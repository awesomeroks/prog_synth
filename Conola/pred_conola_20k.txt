0
os . chdir ( <unk> )
<unk> . <unk> ( <unk> . <unk> , <unk> ) \n <unk> . format ( <unk> , <unk> , <unk> = True )
for item in <unk> : \n <unk> . write ( ( <unk> % item ) )
zip ( * [ ( 1 , 2 ) , ( 3 , 4 ) , ( 5 , 6 ) ] )
print ( ( '%.2f' % a ) )
<unk> . <unk> ( <unk> )
os . chdir ( <unk> )
sorted ( list ( d . items ( ) ) , key = lambda x : x [ 1 ] )
arr [ arr != 0 ] . min ( )
np . <unk> ( <unk> , delimiter = ',' )
driver . <unk> ( <unk> )
[ int ( s ) for s in re . findall ( <unk> , <unk> <unk> <unk> a <unk> string <unk> ) ]
np . <unk> ( ( A , B ) . sum ( - 1 ) )
sorted ( a , key = lambda x : ( sum ( x [ 1 : 3 ] ) , x [ 0 ] ) )
urllib . parse . unquote ( urllib . parse . unquote ( <unk> ) )
a = [ ( sum ( x ) for x in zip ( <unk> . values ) ]
\"\"\"\"\"\" . join ( set ( <unk> ) )
[ key for item in lst for key , value in list ( <unk> . items ( ) ) if item in value ]
ax . <unk> ( <unk> )
re . findall ( <unk> , <unk> )
struct . <unk> ( <unk> , <unk> )
re . findall ( <unk> , <unk> )
df . tolist ( )
a [ : ] = [ x for x in a if x != [ 1 , 1 ] ]
print ( re . sub ( <unk> , '' , <unk> ) )
re . compile ( <unk> ) . findall ( <unk> , s )
str . decode ( 'utf-8' ) . encode ( <unk> )
' Hello ' . strip ( )
<unk> . join ( [ ( <unk> %s' % ( key , value ) ) for key , value in list ( d . items ( ) ) ] )
print ( os . path . <unk> ( <unk> ) )
np . <unk> ( [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] ) . tolist ( )
\"\"\"\"\"\" . join ( <unk> ( ord ( c ) ) for c in <unk> )
<unk> . open ( <unk> )
re . split ( <unk> , 'a , <unk> <unk> )
pd . concat ( [ a , b ] , <unk> = True )
result = result . replace ( '\\\\' , '' )
sum ( d . values ( ) )
\"\"\" \"\"\" . join ( foo . split ( ) )
<unk> . replace ( <unk> , '' )
request . <unk> . get ( <unk> , '' )
<unk> . <unk> ( <unk> , 2 )
<unk> . encode ( <unk> )
numpy . sort ( arr , axis = 0 )
items . <unk> ( )
print ( <unk> . <unk> ( s ) . <unk> ( 1 ) )
any ( np . <unk> ( <unk> , <unk> ) )
re . split ( <unk> , s )
root . attributes ( <unk> , True )
return user . <unk> . filter ( <unk> = [ <unk> , <unk> ] ) . exists ( )
re . sub ( <unk> , <unk> , <unk> )
re . findall ( <unk> , <unk> )
print ( os . path . exists ( <unk> ) )
re . findall ( <unk> , <unk> )
df . loc [ df . groupby ( [ <unk> ] ) . <unk> ( ) ]
soup . select ( <unk> )
<unk> . replace ( [ <unk> , '' ) for <unk> in <unk> ]
<unk> . decode ( <unk> ) . encode ( 'utf8' )
[ i . split ( '\\t' , 1 ) [ 0 ] for i in l ]
list ( zip ( a , b ) )
print ( np . array ( list ( <unk> ) , dtype = int ) )
<unk> . sort ( key = lambda x : x . <unk> )
set ( [ 'a' , 'b' , 'c' , 'd' ] )
isinstance ( x , int )
sum ( ( d [ <unk> ] for d in s )
random . randint ( <unk> , <unk> )
<unk> . <unk> ( <unk> , <unk> )
sorted ( d , key = d . get , reverse = True )
[ i for i , e in enumerate ( a ) if e != 0 ]
re . sub ( <unk> , '' , <unk> <unk> <unk> )
data = json . <unk> ( array )
[ ]
print ( <unk> . encode ( 'utf-8' ) )
df . values . <unk> ( )
re . findall ( <unk> , <unk> )
re . findall ( <unk> , <unk> )
<unk> [ <unk> ] = 3
glob . glob ( <unk> )
print ( ' ' . join ( [ str ( ord ( a ) ) for a in data ] ) )
df [ <unk> ] = df [ 'A' ] / df [ <unk> ]
f = open ( <unk> , <unk> )
s . split ( ',' , 1 )
open ( 'filename' , <unk> ) . read ( )
x [ : 2 ]
str . decode ( 'utf-8' ) . replace ( <unk> , '*' )
i = int ( s , 16 )
<unk> ( compile ( open ( <unk> ) . read ( ) , <unk> , <unk> ) )
dict ( zip ( l [ : : 2 ] , l [ 1 : : 2 ] ) )
getattr ( <unk> , x )
[ i for i , v in enumerate ( <unk> , 1 ) if elem ]
[ ( v , k ) for k , v in list ( d . items ( ) ) ]
<unk> . encode ( 'utf-8' )
sys . exit ( )
{ k : v for k , v in list ( <unk> . items ( ) ) if v }
datetime . datetime . strptime ( <unk> , <unk> ) . date ( )
list . insert ( 0 , 'foo' )
set ( [ 'a' , 'b' , 'c' , 'd' ] )
<unk> [ ( - 1 ) ]
' Hello ' . strip ( )
os . system ( <unk> <unk> <unk> <unk> <unk> )
df . <unk> ( ) . groupby ( <unk> = [ <unk> , <unk> ] )
sys . stdin . read ( 1 )
logging . <unk> ( ) . <unk> ( logging . <unk> )
dict ( ( k , v ) for k , v in <unk> . items ( ) if 2 < k < 4 )
with open ( 'file.txt' , 'r' ) as <unk> : \n array = [ ] \n for line in <unk> : \n array . append ( line )
<unk> = { key : val for key , val in list ( <unk> . items ( ) ) if val != <unk> }
<unk> . <unk> ( <unk> )
int ( round ( x ) )
[ d for d in a if d [ 'name' ] == <unk> ]
pd . concat ( [ df . <unk> ( 1 ) , df . <unk> ( 1 ) ] )
<unk> ( compile ( open ( <unk> ) . read ( ) , <unk> , <unk> ) )
if ( not <unk> ) : \n pass
np . where ( a == 1 )
today = datetime . datetime . <unk> ( ) . date ( )
[ x for y , x in sorted ( zip ( <unk> , X ) ) ]
len ( [ 1 for i in j if ( i > 5 ) ] )
str ( i )
[ j for i in x for j in i ]
<unk> . <unk> ( <unk> = <unk> <unk> , <unk> = True )
all ( i < j for i , j in zip ( a , b ) )
[ set ( item ) for item in set ( <unk> ) ]
os . listdir ( <unk> )
numpy . array ( [ ( key , val ) for key , val in result . items ( ) ] , dtype )
[ map ( int , sublist ) for sublist in lst ]
<unk> . sort ( key = lambda s : len ( s ) )
<unk> = [ [ <unk> . format ( <unk> ) for <unk> in sublist ] for sublist in lst ]
new_list = old_list [ : ]
s . decode ( 'hex' )
soup . <unk> . findAll ( text = <unk> <unk> )
subprocess . call ( [ <unk> , <unk> ] )
s . <unk> ( )
s . <unk> ( )
struct . <unk> ( <unk> , <unk> )
<unk> = BeautifulSoup ( html ) \n print ( <unk> . <unk> . find ( 'div' , <unk> = { <unk> : <unk> , } ) . text )
sorted ( l , key = lambda x : x [ 1 ] )
df [ <unk> ] . apply ( pd . <unk> , axis = 1 )
np . <unk> ( <unk> , delimiter = ',' )
np . <unk> ( arr , 2 )
[ int ( item ) for item in <unk> ]
[ input [ i : i + n ] for i in range ( 0 , len ( input ) , n ) ]
<unk> . sort ( key = operator . <unk> ( <unk> ) )
a . remove ( 6 )
request . <unk> . get ( <unk> , '' )
( first . lower ( ) == second . lower ( ) )
set ( [ 'a' , 'b' ] ) . <unk> ( [ 'a' , 'b' , 'c' ] )
isinstance ( x , int )
numpy . append ( <unk> , a )
os . environ [ <unk> ] = '1'
[ x for x in j if x <unk> 5 ]
s . strip ( )
raise <unk> ( <unk> <unk> )
df [ <unk> ] . replace ( [ <unk> , <unk> ] , 'A' )
x = <unk> . matrix ( [ 1 , 2 , 3 ] ) . <unk> ( )
re . sub ( <unk> , '' , s )
len ( [ 1 , 2 , 3 ] )
float ( int ( <unk> , 0 ) )
today . strftime ( <unk> )
print ( re . sub ( <unk> , '' , x ) )
np . zeros ( ( 6 , 9 , 20 ) ) + np . array ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ) [ ( None ) , : , ( None ) ]
( <unk> in <unk> ( ) )
isdigit ( )
np . any ( np . <unk> ( <unk> , <unk> ) )
if ( not <unk> ) : \n pass
<unk> = [ '' for <unk> in lst ]
response = requests . <unk> ( url , data = json . dumps ( data ) , headers = headers )
if ( <unk> in open ( <unk> ) . read ( ) ) : \n pass
sum ( v for v in list ( d . values ( ) ) if v > 0 )
os . listdir ( <unk> )
os . system ( <unk> < <unk> | <unk> > <unk> )
s . rstrip ( )
[ sum ( x ) for x in zip ( * a ) ]
s = s . rstrip ( )
subprocess . call ( <unk> <unk> <unk> , shell = True )
plt . figure ( <unk> = ( <unk> , <unk> ) )
mylist . sort ( key = lambda d : ( d [ <unk> ] , d [ <unk> ] ) )
[ { 'A' : 1 , 'C' : 4 , 'B' : 2 , <unk> : 4 } , { 'A' : 1 , 'C' : 4 , 'B' : 1 , <unk> : 5 } ]
print ( os . path . exists ( <unk> ) )
( '%.2f' % <unk> )
result = sys . stdin . read ( )
df [ 'a' ] . tolist ( )
mystring . split ( ',' )
next ( iter ( dict . values ( ) ) )
sorted ( s , key = str . upper )
df = pd . read_csv ( <unk> , sep = '\\t' , <unk> = <unk> )
datetime . datetime . now ( ) . strftime ( <unk> )
sorted ( <unk> , key = lambda tup : tup [ : : - 1 ] )
return iter ( sorted ( dict . items ( ) ) )
<unk> . form . <unk> ( open ( filename ) , <unk> , filename )
input ( <unk> <unk> ' )
<unk> . parse ( <unk> <unk> <unk> <unk> , <unk> = True )
[ x for y , x in sorted ( zip ( <unk> , X ) ) ]
sum ( x * y for x , y in zip ( a , b ) )
<unk> . <unk> ( self , - 1 , size = ( <unk> , - 1 ) )
os . listdir ( <unk> )
sorted ( list ( <unk> . items ( ) ) , key = lambda v : v [ 1 ] )
path = os . path . abspath ( <unk> . __file__ )
[ x [ 0 ] for x in lst ]
[ ( i , j ) for i , j in zip ( <unk> , <unk> ) ]
np . <unk> ( np . <unk> ( array ) )
s . strip ( )
sorted ( a , key = lambda x : x [ 1 ] )
randint ( 0 , 9 )
\"\"\"\"\"\" . join ( x . upper ( ) if random . randint ( 0 , 1 ) else x for x in s )
any ( item [ 2 ] == 0 for item in items )
os . path . dirname ( __file__ )
itertools . permutations ( [ 1 , 2 , 3 ] )
urllib . parse . unquote ( url ) . decode ( 'utf8' )
datetime . datetime . strptime ( <unk> , <unk> ) . date ( )
<unk> ( ) . <unk> ( )
<unk> . <unk> . name
print ( set ( re . sub ( <unk> , '' , <unk> ) ) )
r = requests . <unk> ( url ) \n return ( r . <unk> == <unk> )
b = a . decode ( 'utf-8' ) . encode ( 'utf-8' )
root . <unk> ( <unk> = <unk> )
\"\"\"\"\"\" . join ( c for c in s if c . isdigit ( ) )
struct . unpack ( <unk> , s )
sum ( len ( y ) for y in x )
urllib . parse . unquote ( <unk> . path . encode ( 'utf-8' ) ) . decode ( 'utf-8' )
[ [ sum ( [ x [ 1 ] for x in i ] ) ] for i in data ]
df . <unk> ( axis = 1 )
getattr ( <unk> , a )
df . <unk> ( [ <unk> , <unk> ] , ascending = [ True , False ] , inplace = True )
sum ( d * 10 ** i for i , d in enumerate ( x [ : : - 1 ] ) )
sorted ( <unk> , key = lambda x : x [ <unk> ] [ <unk> ] )
sys . exit ( 0 )
int ( s , 16 )
pd . concat ( [ <unk> , pd . DataFrame ( <unk> ) for d in l ] )
<unk> . <unk> ( <unk> , 2 )
json . load ( <unk> . open ( <unk> , 'r' , <unk> ) )
driver . <unk> ( <unk> )
sorted ( <unk> , key = lambda x : int ( x . split ( '_' ) [ 1 ] ) )
<unk> = <unk> . <unk> ( sorted ( d . items ( ) ) )
plt . plot ( list ( range ( 10 ) ) , <unk> = <unk> , <unk> = <unk> , color = 'b' )
sum ( d . values ( ) )
<unk> . <unk> ( A )
dict ( ( k , <unk> [ k ] ) for k in ( <unk> , <unk> , <unk> ) )
re . split ( <unk> , <unk> <unk> <unk> )
print ( '\\\\' )
strings . sort ( key = lambda str : re . sub ( <unk> , '' , str ) )
df [ <unk> ] . apply ( pd . <unk> )
soup . find_all ( 'a' , <unk> = re . compile ( <unk> ) ) [ 'a' ]
np . concatenate ( <unk> , axis = 0 )
np . where ( a == 1 )
int ( round ( x ) )
df . groupby ( np . arange ( len ( df . columns ) ) <unk> 3 , axis = 1 ) . sum ( )
<unk> . delete ( <unk> , <unk> )
<unk> . objects . filter ( <unk> = [ 1 , <unk> ] )
try : \n a . remove ( c ) \n except <unk> : \n pass
re . sub ( <unk> , str )
re . search ( <unk> , String ) . start ( )
<unk> . <unk> ( <unk> )
re . sub ( <unk> , '' , <unk> <unk> ' )
reversed ( array )
os . listdir ( <unk> )
[ 'a' , 'c' , 'b' , <unk> ]
<unk> ( <unk> ( a ) ) == <unk> ( <unk> ( b ) )
foo . append ( [ 8 , 7 ] )
itertools . permutations ( [ 1 , 2 , 3 ] )
( 'a' in d )
hex ( ord ( 'a' ) )
new_list = old_list [ : ]
cursor . execute ( 'INSERT INTO table <unk> <unk> <unk> <unk> , ( <unk> , <unk> , <unk> ) )
sorted ( data . values ( ) )
[ int ( x ) for x in str ( <unk> ) ]
max ( len ( word ) for word in i )
df [ <unk> ] . str . split ( ' ' , 1 , <unk> = True )
isdigit ( )
print ( <unk> . format ( 2 ) )
os . path . realpath ( __file__ )
print ( [ key for key , value in d . items ( ) if value == 1 ] )
all ( i in ( 1 , 2 , 3 , 4 , 5 ) for i in ( 1 , 6 ) )
df . groupby ( [ 'A' , 'B' ] ) [ 'C' ] . unique ( )
driver . <unk> ( <unk> ) . <unk> ( )
logging . <unk> ( ) . <unk> ( logging . <unk> )
if ( <unk> in open ( <unk> ) . read ( ) ) : \n pass
str . find ( <unk> )
[ x [ 0 ] for x in <unk> ]
print ( os . path . exists ( <unk> ) )
getattr ( <unk> , <unk> )
[ { 'A' : 1 , 'C' : 4 , 'B' : 2 , <unk> : 4 } , { 'A' : 1 , 'C' : 4 , 'B' : 1 , <unk> : 5 } ]
re . findall ( <unk> , <unk> )
[ x [ 0 ] for x in a ]
<unk> . objects . create ( ** d )
x = numpy . delete ( x , 2 , axis = 1 )
re . sub ( <unk> , '' , <unk> )
result = [ - 1 : ] for s in <unk> ]
<unk> . format ( <unk> )
print ( re . findall ( <unk> , <unk> ) )
getattr ( <unk> , 'id' , None )
re . sub ( <unk> , '' , s )
list ( itertools . product ( * a ) )
print ( os . path . <unk> ( <unk> , <unk> ) )
return len ( s . encode ( 'utf-8' ) )
json . <unk> ( { <unk> : <unk> , <unk> : <unk> } )
' Hello ' . strip ( )
datetime . strptime ( <unk> 1 <unk> <unk> , <unk> <unk> <unk> )
re . split ( <unk> , <unk> <unk> <unk> <unk> )
<unk> string <unk> . rstrip ( '\\n' )
os . rename ( <unk> , <unk> )
re . findall ( <unk> , <unk> )
for i in mylist [ : : 2 ] : \n pass
[ 'a' , 'c' , 'b' , <unk> ]
re . findall ( <unk> , s )
dict ( ( i , i * 2 ) for i in range ( 10 ) )
a . remove ( 6 )
np . array ( <unk> , <unk> ) . reshape ( 3 , - 1 ) . T
any ( x in string for x in <unk> )
re . findall ( <unk> , <unk> )
string . find ( <unk> )
re . split ( <unk> , <unk> <unk> <unk> )
sorted ( list ( <unk> . items ( ) ) , key = lambda v : v [ 1 ] )
struct . unpack ( <unk> , s )
foo ( * i )
if <unk> ( a , <unk> ) : \n pass
print ( str ( count ) + ' ' + str ( <unk> ) )
<unk> . objects . filter ( <unk> = <unk> , <unk> = <unk> )
m [ ~ np . <unk> ]
re . sub ( <unk> , '\\\\1' , s )
reversed ( array )
round ( <unk> , 3 )
os . listdir ( <unk> )
os . system ( <unk> <unk> <unk> )
<unk> there <unk> % { <unk> : <unk> }
df . groupby ( [ <unk> , <unk> ] ) . sum ( )
<unk> . <unk> ( <unk> )
x [ ( np . arange ( x . shape [ 0 ] ) != 1 ) , : , 2 ]
<unk> ( <unk> , self )
<unk> ( <unk> , <unk> )
map ( list , zip ( * [ ( 1 , 2 ) , ( 3 , 4 ) , ( 5 , 6 ) ] ) )
<unk> [ <unk> ] = 3
df [ [ 'A' , 'B' ] ] . <unk> ( df [ 'C' ] , axis = 'index' )
struct . unpack ( <unk> , <unk> . <unk> ( <unk> ) )
{ k : v for k , v in list ( <unk> . items ( ) ) if v }
s . decode ( <unk> ) . encode ( 'utf-8' )
A [ ( np . random . randint ( A . shape [ 0 ] , size = 2 ) ) , : ]
random . <unk> ( list ( range ( 100 ) ) , 10 )
re . findall ( <unk> , <unk> , re . <unk> )
df . loc [ ~ df [ 'column_name' ] . <unk> ( <unk> ) ]
sorted ( sorted ( s ) , key = str . upper )
os . path . dirname ( os . path . abspath ( __file__ ) )
re . compile ( <unk> )
text . <unk> ( <unk> = <unk> )
r = requests . get ( <unk> , headers = <unk> )
driver . <unk> ( <unk> )
<unk> . <unk> ( key , [ ] ) . append ( value )
[ [ X [ i ] [ j ] for j in range ( len ( a ) , i ] ) ]
list ( itertools . <unk> ( <unk> ) )
dict ( [ x . split ( '=' ) for x in s . split ( ) ] )
any ( d [ 'name' ] == <unk> for d in <unk> )
re . findall ( <unk> , s )
[ j for i in zip ( a , b ) for j in i ]
s = re . sub ( <unk> , ' ' , s )
[ i for i in range ( 100 ) ]
( 'a' in d )
df [ df [ 'A' ] . <unk> ( [ 3 , 6 ] ) ]
re . findall ( <unk> , <unk> , <unk> )
[ dict ( zip ( k , x ) ) for x in v ]
set ( a ) . <unk> ( b )
[ ( i , j ) for i , j in zip ( lst , <unk> ) ]
item = re . sub ( ' <unk> , '' , item )
<unk> . parser . parse ( <unk> <unk> <unk> )
s = ( [ 0 , 1 ] for s in <unk> )
df . reset_index ( )
plt . <unk> ( ) . <unk> ( )
list ( d . items ( ) )
open ( <unk> , 'r' ) . read ( )
os . system ( <unk> <unk> <unk> )
<unk> ( ) . <unk> ( ) [ n ] . <unk> ( )
print ( s . split ( <unk> ) [ 0 ] )
random . randint ( <unk> , <unk> )
df [ pd . <unk> ( df ) . any ( axis = 1 ) ]
sorted ( iter ( mydict . items ( ) ) , key = itemgetter ( 1 ) , reverse = True )
a [ ( b ) ]
<unk> . objects . order_by ( '?' ) . first ( )
a [ tuple ( b ) ]
randint ( 0 , 9 )
dict ( [ ( k , v ) for k , v in zip ( keys , values ) ] )
[ ( i <unk> 2 ) for i in range ( 10 ) ]
[ i for i , v in enumerate ( a ) if v [ 0 ] == <unk> ]
a = a . replace ( <unk> , '' )
re . sub ( <unk> , '*' , <unk> <unk> )
df [ <unk> ] . apply ( pd . <unk> )
[ len ( s ) for s in re . split ( <unk> ) ]
df . fillna ( ' <unk> )
[ i . split ( a ) [ 0 ] for i in a ]
df . sort ( [ <unk> , <unk> ] , ascending = [ True , False ] , inplace = True )
pd . merge ( y , x , on = <unk> ) [ [ 'a' , 'b' , 'y' ] ]
sum ( 1 for x in list ( d . values ( ) ) if <unk> ( x ) )
os . path . dirname ( os . path . abspath ( __file__ ) )
<unk> ( <unk> , <unk> )
np . zeros ( ( 6 , 9 , 20 ) ) . array ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ) . reshape ( ( 1 , 9 , 1 ) )
y = map ( operator . itemgetter ( 0 ) , x )
foo . append ( 4 )
sum ( 1 for x in list ( d . values ( ) ) if <unk> ( x ) )
sorted ( a , key = dict . values , reverse = True )
sum ( d . values ( ) ) . <unk> ( 0 )
[ len ( s ) for s in re . split ( <unk> ) ]
<unk> . <unk> ( <unk> , 2 )
x . insert ( 2 , <unk> )
for ( key , value ) in sorted ( d . items ( ) ) : \n pass
<unk> [ ( - n ) ]
os . system ( <unk> with <unk> )
cursor . execute ( <unk> , list ( <unk> . values ( ) ) )
driver . <unk> ( <unk> )
re . findall ( <unk> , <unk> )
df . sort ( axis = 1 , ascending = False )
if ( not my_string ) : \n pass
[ [ <unk> . <unk> ( text = True ) for <unk> in <unk> . findAll ( <unk> ) ] for <unk> in rows ]
print ( item [ <unk> ] [ <unk> ] )
sum ( 1 for k , v in list ( d . items ( ) ) if v )
pd . concat ( [ a , b ] ) . T
datetime . datetime . strptime ( <unk> , '%Y-%m-%d' ) . strftime ( <unk> )
globals ( ) [ <unk> ] ( )
[ x [ 0 ] for x in rows ]
[ i . split ( '\\t' , 1 ) [ 0 ] for i in l ]
a = a . replace ( <unk> , '' )
try : \n return int ( s ) \n except <unk> : \n return float ( s )
<unk> ( <unk> , <unk> )
sorted ( iter ( d . items ( ) ) , key = lambda x : x [ 1 ] [ <unk> ] )
s . decode ( 'hex' )
<unk> . <unk> ( <unk> , <unk> )
round ( <unk> , 3 )
sum ( <unk> )
dict ( map ( int , x . split ( ':' ) ) for x in s . split ( ',' ) )
re . compile ( <unk> )
list ( itertools . combinations ( [ 1 , 2 , 3 , 4 , 5 , 6 ] , 2 ) )
<unk> = max ( <unk> , key = operator . itemgetter ( 1 ) )
sorted ( list ( <unk> . items ( ) ) , key = lambda x : x [ 1 ] )
df . ix [ : - 1 ]
re . findall ( <unk> , s )
<unk> . objects . <unk> ( <unk> ) . order_by ( <unk> )
zip ( [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ] )
sum ( x * y for x , y in zip ( a , b ) )
df . replace ( '-' , np . nan )
sum ( ( 1 for line in open ( <unk> ) ) )
str ( { 'a' : 1 , 'b' : <unk> <unk> } ) . replace ( <unk> ' , ':' ) . replace ( ', ' , ',' )
np . <unk> ( ( [ <unk> , <unk> , <unk> ] , [ <unk> , <unk> ] ) . mean ( )
driver . <unk> ( <unk> ) . click ( )
re . findall ( <unk> , s )
subprocess . call ( <unk> command <unk> <unk> , shell = True )
[ x [ 1 ] for x in elements ]
int ( <unk> , 16 )
b . update ( d )
urllib . parse . <unk> ( <unk> )
{ { <unk> . <unk> | datetime } }
zip ( * <unk> )
np . <unk> ( <unk> , a )
hex ( <unk> )
data . encode ( 'hex' )
datetime . strptime ( <unk> <unk> , <unk> <unk> )
re . findall ( <unk> , <unk> )
all ( isinstance ( x , int ) for x in lst )
df [ 'x' ] [ 'C' ] = 10
soup . find_all ( 'div' , <unk> = <unk> )
df2 = df . reset_index ( )
datetime . datetime . now ( ) . date ( )
df . pivot ( index = <unk> , columns = <unk> )
[ ( v , k ) for k , v in d . items ( ) ]
os . remove ( filename )
pd . <unk> ( pd . <unk> ( <unk> ) )
try : \n <unk> ( ) \n except <unk> : \n pass
os . environ [ <unk> ]
( 'a' in d )
<unk> . open ( <unk> , 'rb' ) . read ( )
zip ( * l )
<unk> . decode ( <unk> )
itertools . permutations ( [ 1 , 2 , 3 ] )
for ( letter , number ) in list ( d . items ( ) ) : \n pass
int ( datetime . datetime . strptime ( <unk> , <unk> ) . strftime ( <unk> ) )
a = a [ : n ] + k + a [ n : ]
with open ( 'foo' , 'a' ) as f : \n f . write ( <unk> <unk> )
[ 2 , 3 , 4 ]
np . zeros ( ( 6 , 9 , 20 ) ) . array ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ) . reshape ( ( 1 , 9 , 1 ) )
dict ( ( k , <unk> ) for k , v in d . items ( ) if v is None )
driver . <unk> ( <unk> )
list ( zip ( * ( ( iter ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ) , ) * 3 ) ) )
int ( <unk> , 16 )
