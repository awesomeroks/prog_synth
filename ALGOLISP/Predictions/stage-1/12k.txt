[ map a [ partial1 b - ] ]
[ map a [ partial1 b - ] ]
[ map a [ partial1 b - ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ map a [ partial1 b - ] ]
[ map a [ partial1 b - ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ map a [ partial1 b - ] ]
[ map a [ partial1 b - ] ]
[ map a [ partial1 b - ] ]
[ map a [ partial1 b - ] ]
[ map a [ partial1 b - ] ]
[ strlen a ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ strlen a ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ strlen a ]
[ strlen a ]
[ strlen a ]
[ strlen a ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ strlen a ]
[ map a [ partial1 b - ] ]
[ strlen a ]
[ map a [ partial1 b - ] ]
[ strlen a ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ strlen a ]
[ strlen a ]
[ strlen a ]
[ strlen a ]
[ strlen a ]
[ strlen a ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ map a [ partial1 b - ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ strlen a ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ strlen a ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ map a [ partial1 b - ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ map a [ partial1 b - ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ strlen a ]
[ strlen a ]
[ strlen a ]
[ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ map a [ partial1 b - ] ]
[ map a [ partial1 b - ] ]
[ strlen a ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ strlen a ]
[ strlen a ]
[ strlen a ]
[ map a [ partial1 b - ] ]
[ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ]
[ strlen a ]
[ map a [ partial1 b - ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ map a [ partial1 b - ] ]
[ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ]
[ strlen a ]
[ strlen a ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ strlen a ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ map a [ partial1 b - ] ]
[ strlen a ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ strlen a ]
[ map a [ partial1 b - ] ]
[ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ map a [ partial1 b - ] ]
[ strlen a ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ map a [ partial1 b - ] ]
[ strlen a ]
[ map a [ partial1 b - ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ strlen a ]
[ map a [ partial1 b - ] ]
[ strlen a ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ strlen a ]
[ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ]
[ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ]
[ strlen a ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ map a [ partial1 b - ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ strlen a ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ strlen a ]
[ map a [ partial1 b - ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ strlen a ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ floor [ sqrt [ + [ * [ - a d ] [ - a d ] ] [ * [ - [ max c b ] e ] [ - [ max c b ] e ] ] ] ] ]
[ strlen a ]
[ digits [ deref a [ / [ len a ] 2 ] ] ]
[ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ]
[ deref [ sort [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ] [ / [ len [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ] 2 ] ]
[ slice [ reverse a ] 0 [ / [ len [ reverse a ] ] 2 ] ]
[ map [ map a [ partial1 b * ] ] [ partial1 c * ] ]
[ filter a [ lambda1 [ reduce [ map [ slice d b c ] [ partial0 arg1 == ] ] false || ] ] ]
[ strlen a ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter c [ partial1 b < ] ] ] ] [ deref [ filter c [ partial1 b < ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ]
[ strlen a ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ slice a [ / [ len a ] 2 ] [ len a ] ] 1000000000 min ]
[ slice [ range 0 a ] b c ]
[ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b < ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ digits b ] ] ] [ deref [ digits b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ deref [ range 0 [ + a 1 ] ] [ / [ len [ range 0 [ + a 1 ] ] ] 2 ] ]
[ reduce [ range 0 [ + [ / [ reduce a 0 + ] [ len a ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ len a ] ]
[ floor [ sqrt [ + [ * [ - a [ reduce [ filter c [ partial0 [ reduce c 1000000000 min ] < ] ] 1000000000 min ] ] [ - a [ reduce [ filter c [ partial0 [ reduce c 1000000000 min ] < ] ] 1000000000 min ] ] ] [ * [ - b d ] [ - b d ] ] ] ] ]
[ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] square ]
[ reduce [ slice a b c ] 1000000000 min ]
[ deref [ sort [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] [ / [ len [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] 2 ] ]
[ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ range 1 b ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ range 1 b ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ slice d b c ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ slice d b c ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ map a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] - ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ deref [ sort [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] ]
[ digits [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ]
[ slice [ filter a [ partial1 b < ] ] 0 [ / [ len [ filter a [ partial1 b < ] ] ] 2 ] ]
[ strlen a ]
[ digits [ deref a [ / [ len a ] 2 ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ]
[ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ > [ head a ] 1 ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ slice a [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] c ]
[ reverse [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ]
[ min [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] b ]
[ digits [ deref a [ / [ len a ] 2 ] ] ]
[ slice a b [ * c d ] ]
[ deref [ sort [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] ]
[ reduce [ slice a b c ] 1000000000 min ]
[ digits [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ]
[ filter [ reverse a ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reverse [ map a [ partial1 b + ] ] ]
[ digits [ strlen a ] ]
[ is_sorted [ map a [ partial1 b * ] ] ]
[ reduce [ range 0 [ + [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ slice a b [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ filter [ filter a [ partial1 b < ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ strlen a ]
[ filter a [ partial1 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] < ] ]
[ digits [ reduce [ slice [ sort a ] 0 b ] 0 + ] ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ reduce [ reverse [ digits [ deref [ sort a ] [ / [ len a ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ filter [ digits a ] [ partial0 [ reduce [ digits a ] 1000000000 min ] < ] ] 1000000000 min ]
[ min a [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ deref [ sort [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] [ / [ len [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] 2 ] ]
[ digits [ reduce [ slice [ sort a ] 0 b ] 0 + ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ digits [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ reduce [ filter [ map a [ partial1 b - ] ] [ partial0 [ reduce [ map a [ partial1 b - ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ reverse [ map a [ partial1 b + ] ] ]
[ < [ reduce [ slice [ sort a ] 0 b ] 0 + ] 0 ]
[ reduce [ reverse [ digits [ deref [ sort a ] [ / [ len a ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ digits [ strlen a ] ]
[ filter [ slice a b c ] [ combine ! is_prime ] ]
[ range 1 [ head a ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map [ map a [ partial1 b * ] ] [ partial1 c + ] ]
[ map [ map a [ partial1 b * ] ] [ partial1 c * ] ]
[ deref [ map a [ partial0 2 * ] ] [ / [ len [ map a [ partial0 2 * ] ] ] 2 ] ]
[ reverse [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ]
[ slice a b [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ filter [ digits a ] [ partial0 [ reduce [ digits a ] 1000000000 min ] < ] ] 1000000000 min ]
[ filter [ slice a b c ] [ combine ! is_prime ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ digits b ] ] ] [ deref [ digits b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ digits b ] ] ] [ deref [ digits b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ filter a [ partial1 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] < ] ]
[ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] ] ]
[ reduce [ range 0 [ + [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ strlen a ]
[ strlen a ]
[ reduce [ reverse [ digits [ deref [ sort a ] [ / [ len a ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ range 0 [ min [ len [ reverse a ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ reverse a ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ digits [ deref a [ / [ len a ] 2 ] ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ slice [ reverse a ] 0 [ / [ len [ reverse a ] ] 2 ] ]
[ reverse [ map a [ partial1 b + ] ] ]
[ >= a [ head b ] ]
[ reduce [ range 0 [ + [ / [ reduce a 0 + ] [ len a ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ < a [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] ]
[ is_sorted [ map a [ partial1 b * ] ] ]
[ reverse [ slice a 0 [ / [ len a ] 2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ digits [ reduce [ slice [ sort a ] 0 b ] 0 + ] ]
[ reverse [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] ] 0 + ]
[ reduce [ range 0 [ + [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ strlen a ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ deref [ range 0 [ + a 1 ] ] [ / [ len [ range 0 [ + a 1 ] ] ] 2 ] ]
[ head [ filter a [ partial1 b > ] ] ]
[ strlen a ]
[ filter a [ lambda1 [ reduce [ map [ slice d b c ] [ partial0 arg1 == ] ] false || ] ] ]
[ range 0 [ + a 1 ] ]
[ map [ slice a 0 [ / [ len a ] 2 ] ] square ]
[ filter [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ reverse [ map a [ partial1 b + ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ reduce [ reverse [ digits [ max a b ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ slice a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ]
[ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ reduce [ filter [ map a [ partial1 b - ] ] [ partial0 [ reduce [ map a [ partial1 b - ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ filter a [ partial1 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] < ] ]
[ reduce [ filter [ digits a ] [ partial0 [ reduce [ digits a ] 1000000000 min ] < ] ] 1000000000 min ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ slice [ sort a ] 0 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] 0 + ]
[ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b < ] ]
[ digits [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b < ] ]
[ * a [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ digits [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] ]
[ is_sorted [ map a [ partial1 b * ] ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] d ] [ - [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] d ] ] ] ] ] ]
[ reverse [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ]
[ reduce [ slice a b c ] 1000000000 min ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ deref d [ / [ len d ] 2 ] ] ] [ - b [ deref d [ / [ len d ] 2 ] ] ] ] ]
[ strlen a ]
[ deref [ map a [ partial0 2 * ] ] [ / [ len [ map a [ partial0 2 * ] ] ] 2 ] ]
[ filter a [ partial1 [ strlen b ] > ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ slice a b [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ > a [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ strlen a ]
[ reduce [ reverse [ digits [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map a [ partial1 [ reduce b 1000000000 min ] * ] ]
[ filter [ filter a [ partial1 b < ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reduce [ slice [ sort a ] 0 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] 0 + ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ filter a [ partial1 [ strlen b ] > ] ]
[ map a [ partial1 [ min c b ] - ] ]
[ slice [ map a [ partial1 b + ] ] [ / [ len [ map a [ partial1 b + ] ] ] 2 ] [ len [ map a [ partial1 b + ] ] ] ]
[ reduce [ map [ range 0 [ min [ len [ reverse a ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ reverse a ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reverse [ slice a 0 [ / [ len a ] 2 ] ] ]
[ digits [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ digits [ strlen a ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ slice [ map a [ partial1 b + ] ] [ / [ len [ map a [ partial1 b + ] ] ] 2 ] [ len [ map a [ partial1 b + ] ] ] ]
[ strlen a ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ reverse [ digits [ / [ reduce a 0 + ] [ len a ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ slice a b [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ filter [ map a [ partial1 b - ] ] [ partial0 [ reduce [ map a [ partial1 b - ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ <= [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] 1 ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ range 1 [ head a ] ]
[ reduce [ filter [ digits a ] [ partial0 [ reduce [ digits a ] 1000000000 min ] < ] ] 1000000000 min ]
[ reduce [ reverse [ digits [ / [ reduce a 0 + ] [ len a ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ filter [ digits a ] [ partial0 [ reduce [ digits a ] 1000000000 min ] < ] ] 1000000000 min ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ strlen a ]
[ < [ head a ] 1 ]
[ reduce [ range 0 [ + [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ strlen a ]
[ + [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] c ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ]
[ min a [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] ]
[ deref [ map a [ partial0 2 * ] ] [ / [ len [ map a [ partial0 2 * ] ] ] 2 ] ]
[ map a [ partial1 b - ] ]
[ reduce [ reverse [ digits [ deref [ sort a ] [ / [ len a ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ digits [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ slice d b c ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ slice d b c ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reverse [ map a [ partial1 b * ] ] ]
[ slice a [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] c ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ filter a [ partial1 b < ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ reduce [ reverse [ digits [ deref a [ / [ len a ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ digits [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] ]
[ deref [ map a [ partial0 2 * ] ] [ / [ len [ map a [ partial0 2 * ] ] ] 2 ] ]
[ reduce [ range 0 [ + [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ slice [ filter a [ partial1 b < ] ] 0 [ / [ len [ filter a [ partial1 b < ] ] ] 2 ] ]
[ reduce [ range 0 [ + [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ map a [ partial1 b - ] ]
[ + a [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ reduce [ reverse [ digits [ deref [ sort a ] [ / [ len a ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ digits [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map c [ partial1 b + ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map c [ partial1 b + ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ * a [ deref [ sort b ] [ / [ len b ] 2 ] ] ]
[ reduce [ slice [ sort [ map a [ partial0 2 * ] ] ] 0 b ] 0 + ]
[ len [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ * a [ strlen b ] ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ strlen a ]
[ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ partial1 b * ] ]
[ deref [ sort [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] [ / [ len [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] 2 ] ]
[ digits [ head a ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ digits [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ]
[ reverse [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ]
[ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter [ range 0 [ + a 1 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ digits [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] ]
[ slice a b [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reverse [ slice a 0 [ / [ len a ] 2 ] ] ]
[ head [ filter a [ partial1 b > ] ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ slice [ filter a [ partial1 b < ] ] 0 [ / [ len [ filter a [ partial1 b < ] ] ] 2 ] ]
[ reverse [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ]
[ digits [ deref a [ / [ len a ] 2 ] ] ]
[ reverse [ map a [ partial1 b + ] ] ]
[ map a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] - ] ]
[ map [ map a [ partial1 b * ] ] [ partial1 c * ] ]
[ digits [ head a ] ]
[ reduce [ slice a 0 [ / [ len a ] 2 ] ] 0 max ]
[ > [ head a ] b ]
[ range 1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] ]
[ filter [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ filter [ map a [ partial0 2 * ] ] is_prime ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ + a [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ]
[ reverse [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ len [ map a [ partial0 2 * ] ] ]
[ map [ filter a is_prime ] [ partial0 2 * ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map c [ partial1 b + ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ map c [ partial1 b + ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ head [ map a [ partial1 b - ] ] ]
[ reduce [ filter [ filter a [ combine ! is_prime ] ] [ partial0 [ reduce [ filter a [ combine ! is_prime ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ reduce [ reverse [ digits [ deref [ sort a ] [ / [ len a ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ range 0 [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] [ lambda1 [ == [ deref [ slice a [ / [ len a ] 2 ] [ len a ] ] arg1 ] [ deref [ slice a [ / [ len a ] 2 ] [ len a ] ] [ - [ - [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ deref [ sort [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ] [ / [ len [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ] 2 ] ]
[ reduce [ filter [ filter a [ combine ! is_prime ] ] [ partial0 [ reduce [ filter a [ combine ! is_prime ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ < a [ head b ] ]
[ range 0 [ + a 1 ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ slice a 0 [ / [ len a ] 2 ] ] 1000000000 min ]
[ digits [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ deref [ sort [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ] [ / [ len [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ] 2 ] ]
[ reduce [ reverse [ digits [ deref a [ / [ len a ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map a [ partial1 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] * ] ]
[ max a [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ filter a [ partial1 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] > ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ digits b ] ] ] [ deref [ digits b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ slice a 0 [ / [ len a ] 2 ] ] 0 max ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map [ filter [ range 0 [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ slice a [ / [ len a ] 2 ] [ len a ] ] int-deref ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ < a [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ reduce [ range 0 [ + [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ deref [ sort [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] ]
[ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b - ] ]
[ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ]
[ head [ filter a [ partial1 b > ] ] ]
[ reverse [ map a [ partial1 b + ] ] ]
[ digits [ strlen a ] ]
[ * a [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ]
[ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ]
[ filter [ filter a [ partial1 b < ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ reduce [ slice a 0 [ / [ len a ] 2 ] ] 0 max ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ reverse [ digits [ deref [ sort a ] [ / [ len a ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reduce [ range 0 [ + [ min a b ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] square ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ reduce [ reverse [ digits [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ digits [ strlen a ] ]
[ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ reduce [ filter d [ partial0 [ reduce d 0 max ] > ] ] 0 max ] ] [ - b [ reduce [ filter d [ partial0 [ reduce d 0 max ] > ] ] 0 max ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ + a [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] ]
[ filter [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ digits [ reduce [ slice [ sort a ] 0 b ] 0 + ] ]
[ filter [ map a [ partial1 b - ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] 0 + ]
[ reduce [ map a square ] 0 + ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ reverse [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ]
[ map [ map a [ partial1 b - ] ] [ partial1 c * ] ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ is_sorted [ map a [ partial1 b * ] ] ]
[ * a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] ]
[ * a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] ]
[ digits [ head a ] ]
[ reduce [ reverse [ digits [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ head [ filter a [ partial1 b > ] ] ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ map [ filter [ range 0 [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ slice a [ / [ len a ] 2 ] [ len a ] ] int-deref ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ filter [ digits a ] [ partial0 [ reduce [ digits a ] 1000000000 min ] < ] ] 1000000000 min ]
[ reduce [ reverse [ digits [ deref a [ / [ len a ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ slice a [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] d ]
[ reduce [ range 0 [ + [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ deref [ sort [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ] [ / [ len [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ] 2 ] ]
[ reduce [ filter [ map a [ partial1 b - ] ] [ partial0 [ reduce [ map a [ partial1 b - ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ filter [ slice a b c ] [ combine ! is_prime ] ]
[ reverse [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ deref [ sort [ range 0 [ + a 1 ] ] ] [ / [ len [ range 0 [ + a 1 ] ] ] 2 ] ]
[ len [ map a [ partial0 2 * ] ] ]
[ filter [ map a square ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ filter b [ combine ! is_prime ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ filter b [ combine ! is_prime ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ * a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] ]
[ slice a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ]
[ reduce [ slice a 0 [ / [ len a ] 2 ] ] 1000000000 min ]
[ digits [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ map b square ] ] ] [ deref [ map b square ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ slice a b [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reverse [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ]
[ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] ] ]
[ reduce [ reverse [ digits [ deref [ sort a ] [ / [ len a ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce [ slice [ reverse [ sort c ] ] 0 b ] 0 + ] ] 0 + ]
[ head [ map a [ partial1 b - ] ] ]
[ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map c [ partial1 b * ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map c [ partial1 b * ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ slice a [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] b ] c ]
[ filter a [ lambda1 [ reduce [ map [ slice d b c ] [ partial0 arg1 == ] ] false || ] ] ]
[ digits [ deref a [ / [ len a ] 2 ] ] ]
[ slice [ map a [ partial1 b + ] ] [ / [ len [ map a [ partial1 b + ] ] ] 2 ] [ len [ map a [ partial1 b + ] ] ] ]
[ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ digits [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] ]
[ reverse [ slice a 0 [ / [ len a ] 2 ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ filter a [ partial1 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] < ] ]
[ slice a b [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ floor [ sqrt [ + [ * [ - a d ] [ - a d ] ] [ * [ - [ max c b ] e ] [ - [ max c b ] e ] ] ] ] ]
[ is_sorted [ map a [ partial1 b * ] ] ]
[ reverse [ slice a 0 [ / [ len a ] 2 ] ] ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reverse [ map a [ partial1 b * ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ slice b 0 [ / [ len b ] 2 ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ slice b 0 [ / [ len b ] 2 ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ * a [ + c b ] ]
[ reduce [ range 0 [ + [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ strlen a ]
[ map a [ partial1 b - ] ]
[ digits [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ reverse [ map a [ partial1 b + ] ] ]
[ reduce [ slice a b c ] 1000000000 min ]
[ reduce [ filter [ map a [ partial1 b - ] ] [ partial0 [ reduce [ map a [ partial1 b - ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ digits [ head a ] ]
[ reduce [ range 0 [ + [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] square ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ map b square ] ] ] [ deref [ map b square ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ slice [ sort a ] 0 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] 0 + ]
[ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ slice a 0 [ / [ len a ] 2 ] ] 0 max ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter b [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] ] [ deref [ filter b [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ range 0 [ + [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ reduce [ slice [ reverse [ sort [ filter a is_prime ] ] ] 0 b ] 0 + ]
[ map [ slice a [ / [ len a ] 2 ] [ len a ] ] square ]
[ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ head [ filter a [ partial1 b > ] ] ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] is_prime ]
[ is_sorted [ map a [ partial1 b * ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ deref [ sort [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ] [ / [ len [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ] 2 ] ]
[ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] is_prime ]
[ digits [ head a ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ]
[ digits [ reduce [ slice [ sort a ] 0 b ] 0 + ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ is_sorted [ map a [ partial1 b * ] ] ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ range 1 [ head a ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ deref [ sort [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ] [ / [ len [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ] 2 ] ]
[ floor [ sqrt [ + [ * [ - a [ reduce [ filter c [ partial0 [ reduce c 1000000000 min ] < ] ] 1000000000 min ] ] [ - a [ reduce [ filter c [ partial0 [ reduce c 1000000000 min ] < ] ] 1000000000 min ] ] ] [ * [ - b d ] [ - b d ] ] ] ] ]
[ digits [ head a ] ]
[ filter a [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] > ] ]
[ digits [ head a ] ]
[ reduce [ reverse [ digits [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ is_sorted [ map a [ partial1 b * ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ range 0 [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ strlen a ]
[ map [ digits [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] ] [ partial0 2 * ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ slice [ reverse [ map a [ partial1 b + ] ] ] 0 [ / [ len [ reverse [ map a [ partial1 b + ] ] ] ] 2 ] ]
[ reverse [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ reduce [ filter [ map [ map a square ] [ partial0 2 * ] ] [ partial0 [ reduce [ map [ map a square ] [ partial0 2 * ] ] 0 max ] > ] ] 0 max ]
[ reduce [ digits a ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ range 1 b ] ] ] [ deref [ range 1 b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map c [ partial1 b * ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map c [ partial1 b * ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ slice [ slice a b c ] [ reduce [ map [ range 0 [ min [ len e ] [ len f ] ] ] [ lambda1 [ if [ < [ deref e arg1 ] [ deref f arg1 ] ] 1 0 ] ] ] 0 + ] g ]
[ floor [ sqrt [ + [ * [ - a [ deref c [ / [ len c ] 2 ] ] ] [ - a [ deref c [ / [ len c ] 2 ] ] ] ] [ * [ - b [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 d * ] ] ] ] ] ] [ - b [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 d * ] ] ] ] ] ] ] ] ] ]
[ strlen a ]
[ reduce [ slice [ sort [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] 0 c ] 0 + ]
[ digits [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce a 0 max ] ] ]
[ map [ filter [ range 0 [ len [ slice [ slice a b c ] [ / [ len [ slice a b c ] ] 2 ] [ len [ slice a b c ] ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ slice [ slice a b c ] [ / [ len [ slice a b c ] ] 2 ] [ len [ slice a b c ] ] ] int-deref ] ]
[ floor [ sqrt [ + [ * [ - a [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ] [ - a [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ] ] [ * [ - b [ head d ] ] [ - b [ head d ] ] ] ] ] ]
[ filter [ reverse [ range 0 a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ max [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ + [ * [ - [ reduce [ slice [ sort a ] 0 b ] 0 + ] d ] [ - [ reduce [ slice [ sort a ] 0 b ] 0 + ] d ] ] [ * [ - c [ reduce [ filter e [ partial0 [ reduce e 1000000000 min ] < ] ] 1000000000 min ] ] [ - c [ reduce [ filter e [ partial0 [ reduce e 1000000000 min ] < ] ] 1000000000 min ] ] ] ]
[ deref [ map [ digits a ] [ partial0 2 * ] ] [ / [ len [ map [ digits a ] [ partial0 2 * ] ] ] 2 ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ min [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] b ]
[ reduce [ map [ range 0 [ min [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ len [ slice e b c ] ] ] ] [ lambda1 [ if [ < [ deref [ slice a [ / [ len a ] 2 ] [ len a ] ] arg1 ] [ deref [ slice e b c ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ head [ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ]
[ > [ + [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] b ] 0 ]
[ head [ filter a [ partial1 [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] < ] ] ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce [ slice [ reverse [ sort c ] ] 0 b ] 0 + ] ] 0 + ]
[ + [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] [ deref b [ / [ len b ] 2 ] ] ]
[ - [ reduce [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ map [ filter [ range 0 [ len [ filter a [ partial1 b < ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ filter a [ partial1 b < ] ] int-deref ] ]
[ filter [ filter a [ lambda1 [ reduce [ map [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ map c [ partial1 b - ] ] [ partial0 2 * ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ map [ map c [ partial1 b - ] ] [ partial0 2 * ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map [ filter a [ lambda1 [ reduce [ map [ filter c [ partial1 b > ] ] [ partial0 arg1 == ] ] false || ] ] ] [ partial1 d + ] ]
[ reduce [ range 0 [ + [ strlen [ reduce a "z" str_min ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ strlen a ]
[ filter [ slice [ slice a b c ] [ / [ len [ slice a b c ] ] 2 ] [ len [ slice a b c ] ] ] [ combine ! is_prime ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ reverse [ filter c [ partial1 b < ] ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ reverse [ filter c [ partial1 b < ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ range 0 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ slice d b c ] ] ] [ deref [ slice d b c ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ is_sorted [ map [ slice a b c ] [ partial0 2 * ] ] ]
[ floor [ sqrt [ + [ * [ - [ deref [ sort a ] [ / [ len a ] 2 ] ] c ] [ - [ deref [ sort a ] [ / [ len a ] 2 ] ] c ] ] [ * [ - b [ strlen d ] ] [ - b [ strlen d ] ] ] ] ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reduce [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ digits b ] ] ] [ deref [ digits b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ]
[ digits [ reduce [ map [ range 0 [ min [ len a ] [ len [ slice d b c ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ slice d b c ] arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ strlen a ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ map [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] [ partial1 b + ] ]
[ reduce [ slice [ sort [ filter a [ partial1 b < ] ] ] 0 [ reduce [ filter c [ partial0 [ reduce c 1000000000 min ] < ] ] 1000000000 min ] ] 0 + ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ is_sorted [ slice [ reverse a ] b c ] ]
[ map [ digits a ] [ partial1 b * ] ]
[ len [ slice [ map a [ partial1 b - ] ] c d ] ]
[ - [ reduce [ slice a b [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ head [ slice a b c ] ] ]
[ strlen a ]
[ filter [ reverse [ slice a b c ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ reverse [ range 1 b ] ] ] ] [ deref [ reverse [ range 1 b ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ strlen a ]
[ slice a [ strlen [ reduce [ map [ str_split b " " ] [ partial0 0 str_index ] ] "" str_concat ] ] c ]
[ reduce [ map [ range 0 [ min [ len [ range 1 [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ] [ len c ] ] ] [ lambda1 [ if [ > [ deref [ range 1 [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ slice [ reverse [ sort a ] ] 0 [ min c b ] ] 0 + ] ]
[ map [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] square ]
[ filter [ map [ filter [ range 0 [ len [ slice a 0 [ / [ len a ] 2 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ slice a 0 [ / [ len a ] 2 ] ] int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ head [ filter [ range 1 a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ is_sorted [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ]
[ is_sorted [ map [ filter [ range 0 [ len [ filter a [ partial1 b > ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ filter a [ partial1 b > ] ] int-deref ] ] ]
[ filter [ reverse [ range 0 [ + a 1 ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ filter [ slice [ reverse a ] b c ] [ partial0 [ reduce [ slice [ reverse a ] b c ] 0 max ] > ] ] 0 max ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map [ filter [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] square ]
[ reduce [ range 0 [ + [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ reduce [ map [ range 0 [ len [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] ] ] [ lambda1 [ == [ deref [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] arg1 ] [ deref [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] [ - [ - [ len [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ range 0 [ + a 1 ] ]
[ reduce [ filter a [ lambda1 [ reduce [ map [ slice b [ / [ len b ] 2 ] [ len b ] ] [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] + ] ] ] ]
[ filter [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] [ combine ! is_prime ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ - [ reduce [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] square ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ deref [ filter a [ partial1 b > ] ] [ / [ len [ filter a [ partial1 b > ] ] ] 2 ] ] ]
[ strlen a ]
[ range 1 [ reduce [ slice [ reverse [ sort [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] 0 b ] 0 + ] ]
[ reduce [ map [ range 0 [ min [ len [ reverse [ filter a [ partial1 b < ] ] ] ] [ len c ] ] ] [ lambda1 [ if [ < [ deref [ reverse [ filter a [ partial1 b < ] ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] + ] ] ] ]
[ filter a [ partial1 [ strlen b ] > ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ digits [ reduce [ slice [ sort [ slice a b c ] ] 0 d ] 0 + ] ]
[ reduce [ range 0 [ + [ deref [ filter a [ partial1 b > ] ] [ / [ len [ filter a [ partial1 b > ] ] ] 2 ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ filter [ map [ filter [ range 0 [ len [ reverse a ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ reverse a ] int-deref ] ] [ partial1 b < ] ]
[ range 0 [ reduce a 0 max ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ is_sorted [ map a [ partial1 b * ] ] ]
[ filter [ filter a [ partial1 [ deref b [ / [ len b ] 2 ] ] > ] ] is_prime ]
[ strlen a ]
[ digits [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ]
[ strlen a ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ + [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] b ]
[ digits [ reduce [ slice [ sort [ map a [ partial1 b * ] ] ] 0 c ] 0 + ] ]
[ map [ range 0 [ + a 1 ] ] [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] - ] ]
[ digits [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ]
[ range 0 [ deref [ sort a ] [ / [ len a ] 2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ deref [ sort [ reverse a ] ] [ / [ len [ reverse a ] ] 2 ] ] ]
[ + [ * [ - a d ] [ - a d ] ] [ * [ - [ * c b ] [ reduce [ range 0 [ + e 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] [ - [ * c b ] [ reduce [ range 0 [ + e 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ slice b 0 [ / [ len b ] 2 ] ] square ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ map [ slice b 0 [ / [ len b ] 2 ] ] square ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] is_prime ] [ partial1 b > ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ filter c [ partial1 b < ] ] [ partial0 2 * ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map [ filter c [ partial1 b < ] ] [ partial0 2 * ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ slice [ sort [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] ] 0 c ] 0 + ]
[ + [ * [ - [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] d ] [ - [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] d ] ] [ * [ - c [ reduce [ filter e [ partial0 [ reduce e 0 max ] > ] ] 0 max ] ] [ - c [ reduce [ filter e [ partial0 [ reduce e 0 max ] > ] ] 0 max ] ] ] ]
[ head [ filter [ slice a b c ] [ partial1 d > ] ] ]
[ reverse [ filter a [ lambda1 [ reduce [ map [ slice d b c ] [ partial0 arg1 == ] ] false || ] ] ] ]
[ reverse [ map a [ partial1 b + ] ] ]
[ filter [ filter a [ partial1 [ head b ] < ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ deref [ filter [ range 1 a ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ / [ len [ filter [ range 1 a ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] 2 ] ]
[ * [ deref [ sort a ] [ / [ len a ] 2 ] ] [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ filter [ filter a [ lambda1 [ reduce [ map [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ filter a [ partial1 [ deref b [ / [ len b ] 2 ] ] < ] ]
[ map [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] square ]
[ floor [ sqrt [ + [ * [ - a [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 c + ] ] ] ] ] [ - a [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 c + ] ] ] ] ] ] [ * [ - b [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] d ] ] [ - b [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] d ] ] ] ] ] ]
[ floor [ sqrt [ + [ * [ - [ min a b ] d ] [ - [ min a b ] d ] ] [ * [ - c [ strlen e ] ] [ - c [ strlen e ] ] ] ] ] ]
[ max a [ reduce [ filter d [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ filter a [ lambda1 [ reduce [ map [ filter c [ partial1 [ head b ] > ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ slice [ reverse [ sort [ map a square ] ] ] 0 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] 0 + ]
[ slice [ reverse [ range 0 [ + a 1 ] ] ] [ / [ len [ reverse [ range 0 [ + a 1 ] ] ] ] 2 ] [ len [ reverse [ range 0 [ + a 1 ] ] ] ] ]
[ - [ reduce [ range 0 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ head [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ reduce [ filter [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 2 * ] ] [ partial0 [ reduce [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 2 * ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ map [ reverse [ map a square ] ] [ partial0 2 * ] ]
[ < a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ min c b ] ] ]
[ filter [ range 0 a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ map [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c + ] ] [ partial0 2 * ] ]
[ reduce [ range 0 [ + [ strlen [ reduce a "z" str_min ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ reverse [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] ]
[ - [ reduce [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b < ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ reduce [ reverse [ digits d ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ - b [ reduce [ reverse [ digits d ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] ] ] ] ]
[ reduce [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] 1000000000 min ]
[ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ reduce [ map [ slice e b c ] [ partial0 arg1 == ] ] false || ] ] ]
[ slice [ slice [ filter a [ partial1 b > ] ] c d ] 0 [ / [ len [ slice [ filter a [ partial1 b > ] ] c d ] ] 2 ] ]
[ slice a b [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ is_sorted [ map [ map a [ partial1 b + ] ] square ] ]
[ reduce [ reverse [ map a square ] ] 0 max ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ filter [ range 0 [ + a 1 ] ] [ lambda1 [ reduce [ map [ range 0 [ + b 1 ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ filter a [ lambda1 [ reduce [ map [ digits [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ reverse [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ reverse [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ range 0 [ + [ reduce [ range 0 [ + [ head a ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] 1 ] ]
[ reduce [ map [ range 1 a ] [ partial1 b - ] ] 0 max ]
[ reduce [ slice [ sort a ] 0 [ head [ map [ filter [ range 0 [ len b ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 b int-deref ] ] ] ] 0 + ]
[ reduce [ range 0 [ + [ reduce [ slice [ sort [ range 1 [ + a 1 ] ] ] 0 b ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ slice [ reverse [ reverse a ] ] 0 [ / [ len [ reverse [ reverse a ] ] ] 2 ] ]
[ reduce [ slice [ sort a ] 0 [ reduce [ reverse b ] 0 + ] ] 0 + ]
[ digits [ deref a [ / [ len a ] 2 ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ deref d [ / [ len d ] 2 ] ] ] [ - b [ deref d [ / [ len d ] 2 ] ] ] ] ] ]
[ reverse [ slice [ map a [ partial1 b - ] ] 0 [ / [ len [ map a [ partial1 b - ] ] ] 2 ] ] ]
[ len [ slice a [ deref [ sort b ] [ / [ len b ] 2 ] ] c ] ]
[ slice [ reverse [ reverse a ] ] [ / [ len [ reverse [ reverse a ] ] ] 2 ] [ len [ reverse [ reverse a ] ] ] ]
[ map [ filter [ filter a [ partial1 b < ] ] is_prime ] square ]
[ map [ map a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] * ] ] [ partial0 2 * ] ]
[ reduce [ map [ range 0 [ len [ map a [ partial1 [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 b + ] ] ] ] + ] ] ] ] [ lambda1 [ == [ deref [ map a [ partial1 [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 b + ] ] ] ] + ] ] arg1 ] [ deref [ map a [ partial1 [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 b + ] ] ] ] + ] ] [ - [ - [ len [ map a [ partial1 [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 b + ] ] ] ] + ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ map [ map [ slice a 0 [ / [ len a ] 2 ] ] square ] [ partial0 2 * ] ]
[ map [ map [ filter [ range 0 [ len [ filter a [ partial1 b > ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ filter a [ partial1 b > ] ] int-deref ] ] [ partial0 2 * ] ]
[ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial1 b * ] ]
[ head [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ range 0 [ + [ head [ filter a [ partial1 b < ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ range 0 [ + [ max a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ map [ filter [ range 0 [ len [ map [ filter [ range 0 [ len [ filter a [ partial1 b < ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ filter a [ partial1 b < ] ] int-deref ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ map [ filter [ range 0 [ len [ filter a [ partial1 b < ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ filter a [ partial1 b < ] ] int-deref ] ] int-deref ] ]
[ slice a [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] c ]
[ reduce [ reverse [ digits [ reduce [ slice [ sort [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 0 b ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ digits [ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len [ digits a ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ digits a ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map [ filter a [ lambda1 [ reduce [ map [ filter c [ partial1 b < ] ] [ partial0 arg1 == ] ] false || ] ] ] [ partial1 d + ] ]
[ is_sorted [ slice [ reverse a ] b c ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ slice a b [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] c ] ]
[ reduce [ range 0 [ + [ reduce [ filter [ range 1 a ] [ partial0 [ reduce [ range 1 a ] 0 max ] > ] ] 0 max ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ reduce [ range 0 [ + [ head [ filter a [ partial1 b < ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ map [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 2 * ] ]
[ reduce [ slice [ reverse [ sort [ range 1 [ reduce [ slice [ sort a ] 0 b ] 0 + ] ] ] ] 0 c ] 0 + ]
[ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ reduce [ reverse [ digits [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter c [ partial1 b < ] ] ] ] [ deref [ filter c [ partial1 b < ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter [ reverse a ] [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ strlen a ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ slice b 0 [ / [ len b ] 2 ] ] square ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ map [ slice b 0 [ / [ len b ] 2 ] ] square ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter a [ partial1 [ strlen b ] > ] ]
[ reduce [ map [ filter [ range 0 [ len [ range 1 [ + a 1 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ range 1 [ + a 1 ] ] int-deref ] ] 0 + ]
[ + [ * [ - [ reduce a 1000000000 min ] d ] [ - [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ] ] [ * [ - c [ reduce e 1000000000 min ] ] [ - c [ reduce e 1000000000 min ] ] ] ]
[ filter a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] > ] ]
[ slice a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ head [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ reverse [ digits [ reduce [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1000000000 min ] < ] ] 1000000000 min ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ]
[ slice a b [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ filter a [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] < ] ] 0 max ]
[ - [ reduce [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b < ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ slice [ map a [ partial0 2 * ] ] b [ reduce [ filter c [ partial0 [ reduce c 0 max ] > ] ] 0 max ] ]
[ max a [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ > [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ head [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ reverse [ digits [ deref [ sort a ] [ / [ len a ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ filter a [ partial1 b > ] ] 0 + ] ]
[ reduce [ slice a 0 [ / [ len a ] 2 ] ] 1000000000 min ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ]
[ + [ reduce a 0 + ] [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ range 0 [ + [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ range 0 b ] [ partial0 2 * ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map [ range 0 b ] [ partial0 2 * ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ len [ map [ digits a ] [ partial1 b + ] ] ] ] [ lambda1 [ == [ deref [ map [ digits a ] [ partial1 b + ] ] arg1 ] [ deref [ map [ digits a ] [ partial1 b + ] ] [ - [ - [ len [ map [ digits a ] [ partial1 b + ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ map [ filter [ range 0 [ + a 1 ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial1 b - ] ]
[ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] + ] ]
[ filter [ reverse [ filter a [ partial1 b < ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ slice [ map a [ partial0 2 * ] ] b [ reduce c 0 max ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] < ] ]
[ map [ filter a [ lambda1 [ reduce [ map [ map b [ partial0 2 * ] ] [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ]
[ map [ reverse [ filter a [ partial1 b > ] ] ] [ partial1 c * ] ]
[ map [ slice [ digits a ] [ / [ len [ digits a ] ] 2 ] [ len [ digits a ] ] ] [ partial1 b - ] ]
[ - [ reduce [ filter a [ partial1 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] < ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ digits [ deref a [ / [ len a ] 2 ] ] ]
[ map a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] + ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ floor [ sqrt [ + [ * [ - [ min a b ] d ] [ - [ min a b ] d ] ] [ * [ - c e ] [ - c e ] ] ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ strlen a ]
[ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] > ] ]
[ deref [ sort [ map [ reverse a ] [ partial0 2 * ] ] ] [ / [ len [ map [ reverse a ] [ partial0 2 * ] ] ] 2 ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ reduce [ slice [ sort a ] 0 [ reduce [ slice [ sort d ] 0 [ reduce [ slice [ sort c ] 0 b ] 0 + ] ] 0 + ] ] 0 + ]
[ slice a [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] b ] [ deref c [ / [ len c ] 2 ] ] ]
[ + [ * [ - [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] c ] [ - [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] c ] ] [ * [ - [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] d ] [ - [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] d ] ] ]
[ reduce [ map [ range 0 [ len [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] ] [ lambda1 [ == [ deref [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] arg1 ] [ deref [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ - [ - [ len [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ digits [ deref a [ / [ len a ] 2 ] ] ]
[ digits [ reduce [ slice [ sort a ] 0 b ] 0 + ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ reverse [ digits [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ reduce [ map [ filter c [ partial1 b > ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ max [ reduce [ range 0 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] c ]
[ slice a b [ head [ slice e f c ] ] ]
[ filter a [ lambda1 [ reduce [ map [ filter d [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ map [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] * ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ map [ reverse b ] square ] ] ] [ deref [ map [ reverse b ] square ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ filter [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ partial1 b < ] ]
[ filter [ map a [ partial1 b + ] ] [ partial1 [ reduce [ filter c [ partial0 [ reduce c 1000000000 min ] < ] ] 1000000000 min ] < ] ]
[ is_sorted [ slice [ reverse a ] b c ] ]
[ - [ reduce [ slice a b [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ reverse [ digits [ reduce [ reverse [ digits [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter [ reverse [ filter a [ partial1 b < ] ] ] [ partial1 c < ] ]
[ strlen a ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ slice a [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] [ reduce d 0 + ] ]
[ map a [ partial1 b - ] ]
[ filter [ range 1 a ] [ partial1 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] > ] ]
[ reduce [ map [ digits a ] [ partial1 b * ] ] 0 + ]
[ reduce [ reverse [ digits [ reduce [ filter [ slice a b c ] [ partial0 [ reduce [ slice a b c ] 0 max ] > ] ] 0 max ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ * a [ reduce [ range 0 [ + [ reduce [ slice [ reverse [ sort c ] ] 0 b ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ reduce [ range 0 [ + [ strlen [ reduce a "z" str_min ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ floor [ sqrt [ + [ * [ - a [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ] [ - a [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ] ] [ * [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g i ] [ - g i ] ] ] ] [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g i ] [ - g i ] ] ] ] ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map [ filter a [ lambda1 [ reduce [ map [ digits b ] [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ]
[ reduce [ map [ range 0 [ min [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ len [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] ] [ lambda1 [ if [ > [ deref [ slice a [ / [ len a ] 2 ] [ len a ] ] arg1 ] [ deref [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ slice [ filter a [ combine ! is_prime ] ] b c ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ slice [ slice a 0 [ / [ len a ] 2 ] ] [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ]
[ reduce [ reverse [ digits [ + [ * [ - [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] [ - [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter [ filter [ map a [ partial0 2 * ] ] [ partial1 b < ] ] [ combine ! is_prime ] ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ range 1 [ max a [ deref b [ / [ len b ] 2 ] ] ] ]
[ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] is_prime ]
[ slice [ filter a [ partial1 b < ] ] c [ reduce [ filter d [ partial0 [ reduce d 1000000000 min ] < ] ] 1000000000 min ] ]
[ + a [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ]
[ map [ reverse [ digits a ] ] [ partial0 2 * ] ]
[ reverse [ digits [ deref [ sort a ] [ / [ len a ] 2 ] ] ] ]
[ - [ reduce [ digits [ max a b ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reverse [ reverse [ filter a [ partial1 b > ] ] ] ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ filter [ range 0 [ len [ range 0 b ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ range 0 b ] int-deref ] ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map [ filter [ range 0 [ len [ range 0 b ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ range 0 b ] int-deref ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ map a [ partial1 [ strlen b ] + ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] [ len c ] ] ] [ lambda1 [ if [ > [ deref [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ filter d [ partial1 [ + c b ] < ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ filter d [ partial1 [ + c b ] < ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len [ filter a [ partial1 b < ] ] ] [ len [ digits c ] ] ] ] [ lambda1 [ if [ < [ deref [ filter a [ partial1 b < ] ] arg1 ] [ deref [ digits c ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len d ] ] [ deref d arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] - ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reverse [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] square ] ]
[ filter [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] [ partial1 d < ] ]
[ reduce [ filter [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 [ reduce [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 max ] > ] ] 0 max ]
[ slice a [ reduce b 1000000000 min ] [ reduce c 0 + ] ]
[ reduce [ slice [ map a [ partial1 b + ] ] 0 [ / [ len [ map a [ partial1 b + ] ] ] 2 ] ] 0 max ]
[ reverse [ range 1 [ + [ min a b ] 1 ] ] ]
[ digits [ strlen a ] ]
[ reduce [ filter [ slice a b c ] [ lambda1 [ reduce [ map e [ partial0 arg1 == ] ] false || ] ] ] 0 max ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ map [ filter [ range 0 [ len [ digits [ head a ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ digits [ head a ] ] int-deref ] ]
[ reverse [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] ]
[ reverse [ range 1 [ reduce a 1000000000 min ] ] ]
[ range 1 [ + [ reduce [ range 0 [ + [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] 1 ] ]
[ reduce [ slice [ sort [ filter a [ partial1 b > ] ] ] 0 [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ] 0 + ]
[ head [ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial0 2 * ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b < ] ] 1000000000 min ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ digits [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] ]
[ digits [ strlen a ] ]
[ deref [ map [ map a [ partial1 b - ] ] [ partial0 2 * ] ] [ / [ len [ map [ map a [ partial1 b - ] ] [ partial0 2 * ] ] ] 2 ] ]
[ reduce [ reverse [ digits [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter c [ partial1 b < ] ] ] ] [ deref [ filter c [ partial1 b < ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ - [ reduce [ filter a [ partial1 [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] b ] < ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ slice a b [ reduce [ slice [ sort c ] 0 d ] 0 + ] ]
[ > [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ] 1 ]
[ reduce [ reverse [ digits [ max [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] g ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 [ deref c [ / [ len c ] 2 ] ] > ] ]
[ map a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ slice [ sort c ] 0 b ] 0 + ] ] * ] ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ]
[ + [ * [ - [ reduce [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ partial0 [ reduce [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] 0 max ] > ] ] 0 max ] c ] [ - [ reduce [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] 0 [ reduce [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] 0 max ] > ] ] 0 max ] c ] ] [ * [ - b d ] [ - b d ] ] ]
[ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ reverse [ digits [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ digits [ strlen [ reduce a "z" str_min ] ] ]
[ range 0 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ reverse [ range 0 b ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ reverse [ range 0 b ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ slice [ slice [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] c d ] [ / [ len [ slice [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] c d ] ] 2 ] [ len [ slice [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] c d ] ] ]
[ reduce [ slice [ sort [ map a [ partial1 b - ] ] ] 0 [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 + ]
[ filter [ slice a b [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] is_prime ]
[ slice [ reverse a ] b [ reduce [ filter c [ partial0 [ reduce c 1000000000 min ] < ] ] 1000000000 min ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ < [ reduce [ slice [ sort [ filter a [ partial1 b < ] ] ] 0 c ] 0 + ] d ]
[ map [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] [ partial0 2 * ] ]
[ > [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] 1 ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ reduce [ range 0 [ + [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ] ] 0 + ]
[ filter [ map [ filter [ range 0 [ len [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] int-deref ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ]
[ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ partial1 [ deref b [ / [ len b ] 2 ] ] > ] ]
[ reverse [ digits [ deref [ sort a ] [ / [ len a ] 2 ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ digits b ] ] ] [ deref [ digits b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ map [ range 0 [ len [ filter [ map a [ partial1 b - ] ] is_prime ] ] ] [ lambda1 [ == [ deref [ filter [ map a [ partial1 b - ] ] is_prime ] arg1 ] [ deref [ filter [ map a [ partial1 b - ] ] is_prime ] [ - [ - [ len [ filter [ map a [ partial1 b - ] ] is_prime ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ < [ min a [ reduce b 0 max ] ] 1 ]
[ map [ map a [ partial1 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] + ] ] square ]
[ map a [ partial1 b - ] ]
[ reduce [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] 1000000000 min ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ filter [ reverse [ filter a [ partial1 b > ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ reduce [ slice [ reverse [ sort [ reverse a ] ] ] 0 [ + c b ] ] 0 + ]
[ map [ map [ slice a b c ] [ partial1 d + ] ] square ]
[ map [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 b > ] ] [ partial1 c + ] ]
[ <= [ - [ reduce [ range 0 [ + a 1 ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ]
[ reduce [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] 1000000000 min ]
[ reduce [ filter [ filter a [ lambda1 [ reduce [ map [ slice d b c ] [ partial0 arg1 == ] ] false || ] ] ] [ partial0 [ reduce [ filter a [ lambda1 [ reduce [ map [ slice d b c ] [ partial0 arg1 == ] ] false || ] ] ] 0 max ] > ] ] 0 max ]
[ digits [ reduce [ slice [ sort a ] 0 b ] 0 + ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ reverse [ digits [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ head [ filter a [ partial1 b > ] ] ] ]
[ map [ filter [ range 0 [ len [ digits [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ digits [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] int-deref ] ]
[ reverse [ map a [ partial1 b * ] ] ]
[ + [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] b ]
[ map [ range 0 [ + a 1 ] ] [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] - ] ]
[ reduce [ slice [ reverse [ sort [ range 1 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] ] ] 0 c ] 0 + ]
[ map [ digits a ] [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] + ] ]
[ map [ filter [ digits a ] [ combine ! is_prime ] ] square ]
[ <= [ reduce [ slice [ reverse [ sort [ range 0 a ] ] ] 0 b ] 0 + ] 0 ]
[ reverse [ map [ map a square ] [ partial0 2 * ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ strlen a ]
[ map [ slice a b c ] [ partial1 [ reduce [ map [ range 0 [ min [ len e ] [ len f ] ] ] [ lambda1 [ if [ < [ deref e arg1 ] [ deref f arg1 ] ] 1 0 ] ] ] 0 + ] * ] ]
[ reduce [ reverse [ digits [ floor [ sqrt [ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] ] ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ slice [ sort [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 0 [ deref [ sort b ] [ / [ len b ] 2 ] ] ] 0 + ]
[ slice [ map [ filter a is_prime ] [ partial1 b - ] ] c d ]
[ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ partial1 [ len b ] < ] ]
[ slice [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] b [ reduce [ filter c [ partial0 [ reduce c 0 max ] > ] ] 0 max ] ]
[ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] square ]
[ max [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ map [ filter [ map a [ partial1 b - ] ] [ partial1 c < ] ] [ partial1 d - ] ]
[ reduce [ slice [ sort [ filter a [ partial1 b < ] ] ] 0 [ + [ * [ - f c ] [ - f c ] ] [ * [ - g d ] [ - g d ] ] ] ] 0 + ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ + [ * [ - [ max a b ] d ] [ - [ max a b ] d ] ] [ * [ - c [ strlen e ] ] [ - c [ strlen e ] ] ] ]
[ range 0 [ + [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] 1 ] ]
[ reduce [ filter [ filter a [ lambda1 [ reduce [ map [ slice e b c ] [ partial0 arg1 == ] ] false || ] ] ] [ partial0 [ reduce [ filter a [ lambda1 [ reduce [ map [ slice e b c ] [ partial0 arg1 == ] ] false || ] ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ digits [ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ range 0 [ - [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ filter [ slice a b c ] [ partial1 [ reduce [ map [ range 0 [ min [ len d ] [ len e ] ] ] [ lambda1 [ if [ < [ deref d arg1 ] [ deref e arg1 ] ] 1 0 ] ] ] 0 + ] > ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ filter [ slice [ reverse a ] b c ] [ partial0 [ reduce [ slice [ reverse a ] b c ] 0 max ] > ] ] 0 max ]
[ filter [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ max a [ reduce [ slice [ reverse [ sort d ] ] 0 [ + c b ] ] 0 + ] ]
[ head [ map a [ partial1 b - ] ] ]
[ filter [ reverse a ] [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] > ] ]
[ map [ map a [ partial1 b * ] ] [ partial1 [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] - ] ]
[ min [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 c + ] ] ] ] ]
[ len [ range 1 [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ]
[ is_sorted [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ combine ! is_prime ] ] ]
[ strlen a ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ len [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] ]
[ reduce [ filter [ map [ map a square ] [ partial0 2 * ] ] [ partial0 [ reduce [ map [ map a square ] [ partial0 2 * ] ] 0 max ] > ] ] 0 max ]
[ reduce [ range 0 [ + [ reduce [ reverse [ digits [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ reverse [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ filter [ filter [ map a [ partial0 2 * ] ] [ partial1 b > ] ] [ partial0 [ reduce [ filter [ map a [ partial0 2 * ] ] [ partial1 b > ] ] 0 max ] > ] ] 0 max ]
[ reduce [ filter [ slice [ reverse a ] b c ] [ partial0 [ reduce [ slice [ reverse a ] b c ] 0 max ] > ] ] 0 max ]
[ digits [ strlen [ reduce a "z" str_min ] ] ]
[ strlen a ]
[ reduce [ reverse [ digits [ reduce [ reverse [ digits [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ filter [ slice a b [ reduce c 0 + ] ] is_prime ]
[ reduce [ range 0 [ + [ deref [ range 1 [ + a 1 ] ] [ / [ len [ range 1 [ + a 1 ] ] ] 2 ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ reverse [ digits [ + [ * [ - a [ deref [ sort c ] [ / [ len c ] 2 ] ] ] [ - a [ deref [ sort c ] [ / [ len c ] 2 ] ] ] ] [ * [ - b d ] [ - b d ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ slice a [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] [ min c d ] ]
[ reduce [ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] square ] 0 + ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ deref [ map [ range 0 [ + a 1 ] ] square ] [ / [ len [ map [ range 0 [ + a 1 ] ] square ] ] 2 ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map c [ partial1 b * ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map c [ partial1 b * ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ + [ * [ - [ deref a [ / [ len a ] 2 ] ] c ] [ - [ deref a [ / [ len a ] 2 ] ] c ] ] [ * [ - b [ reduce [ range 0 [ + d 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ] [ - b [ reduce [ range 0 [ + d 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ] ]
[ reduce [ range 0 [ + [ len [ slice a b c ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ reduce [ reverse [ digits [ reduce [ slice a [ / [ len a ] 2 ] [ len a ] ] 1000000000 min ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter [ slice a b c ] [ lambda1 [ reduce [ map d [ partial0 arg1 == ] ] false || ] ] ]
[ filter [ range 1 [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ range 0 [ min [ len [ slice a 0 [ / [ len a ] 2 ] ] ] [ len [ map b [ partial0 2 * ] ] ] ] ] [ lambda1 [ if [ > [ deref [ slice a 0 [ / [ len a ] 2 ] ] arg1 ] [ deref [ map b [ partial0 2 * ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ is_sorted [ map a [ partial1 [ reduce b 0 + ] + ] ] ]
[ digits [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter c [ partial1 b < ] ] ] ] [ deref [ filter c [ partial1 b < ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ digits [ strlen a ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ reduce [ map [ map a [ partial1 b + ] ] [ partial0 2 * ] ] 1000000000 min ]
[ floor [ sqrt [ + [ * [ - [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] [ - [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] ] [ * [ - b [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] d ] ] [ - b [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] d ] ] ] ] ] ]
[ reduce [ range 0 [ + [ reduce [ reverse [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ slice a b [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ map [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] [ partial0 2 * ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ + [ * [ - a c ] [ - a c ] ] [ * [ - [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] d ] [ - [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] d ] ] ] ]
[ map [ slice [ filter a [ partial1 b > ] ] 0 [ / [ len [ filter a [ partial1 b > ] ] ] 2 ] ] square ]
[ reduce [ filter [ filter [ range 0 [ + a 1 ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ reduce [ filter [ range 0 [ + a 1 ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] 0 max ] > ] ] 0 max ]
[ + [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] b ]
[ digits [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] is_prime ]
[ floor [ sqrt [ + [ * [ - [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] [ - [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] ] [ * [ - [ deref [ sort b ] [ / [ len b ] 2 ] ] d ] [ - [ deref [ sort b ] [ / [ len b ] 2 ] ] d ] ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ / [ reduce a 0 + ] [ len a ] ] * ] ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ slice a [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] [ reduce [ filter d [ partial0 [ reduce d 1000000000 min ] < ] ] 1000000000 min ] ]
[ / [ reduce [ range 0 [ + [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] 1 ] ] 0 + ] [ len [ range 0 [ + [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] 1 ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ min [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] b ] ]
[ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b < ] ]
[ map [ range 0 [ + a 1 ] ] [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] - ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map c [ partial1 b + ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map c [ partial1 b + ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] + ] ] ] ]
[ digits [ * a [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ > [ reduce [ slice [ sort a ] 0 b ] 0 + ] [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] c ] ]
[ head [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ filter [ digits a ] [ partial0 [ reduce [ digits a ] 1000000000 min ] < ] ] 1000000000 min ]
[ reduce [ slice [ sort a ] 0 [ strlen [ reduce b "" str_concat ] ] ] 0 + ]
[ map [ slice a b c ] [ partial1 [ head e ] + ] ]
[ reduce [ filter [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c > ] ] [ partial0 [ reduce [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c > ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ filter [ slice a b c ] [ partial1 [ reduce [ map [ range 0 [ min [ len d ] [ len e ] ] ] [ lambda1 [ if [ < [ deref d arg1 ] [ deref e arg1 ] ] 1 0 ] ] ] 0 + ] > ] ]
[ range 1 [ + [ reduce [ range 0 [ + [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] 1 ] ]
[ reduce [ map [ range 0 [ len [ filter [ map a [ partial1 b - ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] ] [ lambda1 [ == [ deref [ filter [ map a [ partial1 b - ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] arg1 ] [ deref [ filter [ map a [ partial1 b - ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ - [ - [ len [ filter [ map a [ partial1 b - ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ slice [ digits a ] [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 b + ] ] ] ] c ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ head [ slice a 0 [ / [ len a ] 2 ] ] ] ]
[ reverse [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ map [ filter a [ lambda1 [ reduce [ map [ map b [ partial0 2 * ] ] [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ]
[ map a [ partial1 [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ strlen b ] ] + ] ]
[ reduce [ range 0 [ + [ reduce [ digits a ] 1000000000 min ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ is_sorted [ slice a b [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ] ]
[ + [ * [ - a [ head c ] ] [ - a [ head c ] ] ] [ * [ - b [ reduce d 1000000000 min ] ] [ - b [ reduce d 1000000000 min ] ] ] ]
[ digits [ strlen [ reduce a "z" str_min ] ] ]
[ map [ slice [ filter a [ partial1 b < ] ] [ / [ len [ filter a [ partial1 b < ] ] ] 2 ] [ len [ filter a [ partial1 b < ] ] ] ] [ partial1 c * ] ]
[ * [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] [ reduce [ slice [ sort c ] 0 b ] 0 + ] ]
[ len [ filter a is_prime ] ]
[ reduce [ reverse [ digits [ + [ * [ - a [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ] [ - a [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ] ] [ * [ - b e ] [ - b e ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ]
[ floor [ sqrt [ + [ * [ - [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] g ] [ - [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] g ] ] [ * [ - f h ] [ - f h ] ] ] ] ] ]
[ strlen a ]
[ range 1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] ]
[ head [ filter a [ lambda1 [ reduce [ map [ filter b [ combine ! is_prime ] ] [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ range 0 [ + [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ reduce [ slice [ sort a ] 0 [ reduce [ filter c [ partial1 b < ] ] 0 max ] ] 0 + ]
[ floor [ sqrt [ + [ * [ - a [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] [ - a [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] ] [ * [ - b [ head d ] ] [ - b [ head d ] ] ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] * ] ] ] ] ]
[ digits [ + a [ deref b [ / [ len b ] 2 ] ] ] ]
[ head [ map [ slice a 0 [ / [ len a ] 2 ] ] square ] ]
[ map [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 b + ] ]
[ floor [ sqrt [ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] ] ] ] ]
[ reduce [ filter a [ lambda1 [ reduce [ map [ map b [ partial0 2 * ] ] [ partial0 arg1 == ] ] false || ] ] ] 1000000000 min ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ head [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ slice [ reverse a ] [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ deref [ sort [ reverse a ] ] [ / [ len [ reverse a ] ] 2 ] ] ]
[ map [ reverse [ range 0 [ + a 1 ] ] ] [ partial0 2 * ] ]
[ reduce [ map [ range 0 [ min [ len [ filter a [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] > ] ] ] [ len d ] ] ] [ lambda1 [ if [ < [ deref [ filter a [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] > ] ] arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ]
[ deref [ sort [ map [ filter [ range 0 [ len [ slice a 0 [ / [ len a ] 2 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ slice a 0 [ / [ len a ] 2 ] ] int-deref ] ] ] [ / [ len [ map [ filter [ range 0 [ len [ slice a 0 [ / [ len a ] 2 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ slice a 0 [ / [ len a ] 2 ] ] int-deref ] ] ] 2 ] ]
[ <= [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ] [ strlen b ] ]
[ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - [ / [ reduce b 0 + ] [ len b ] ] d ] [ - [ / [ reduce b 0 + ] [ len b ] ] d ] ] ] ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ head [ filter a [ partial1 b > ] ] ] ]
[ deref [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] [ / [ len [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] ] 2 ] ]
[ range 0 [ + [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ] ]
[ + [ * [ - [ / [ reduce a 0 + ] [ len a ] ] c ] [ - [ / [ reduce a 0 + ] [ len a ] ] c ] ] [ * [ - b [ reduce [ filter d [ partial0 [ reduce d 0 max ] > ] ] 0 max ] ] [ - b [ reduce [ filter d [ partial0 [ reduce d 0 max ] > ] ] 0 max ] ] ] ]
[ slice a [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] [ reduce [ filter d [ partial0 [ reduce d 0 max ] > ] ] 0 max ] ]
[ head [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ floor [ sqrt [ + [ * [ - [ deref [ sort a ] [ / [ len a ] 2 ] ] c ] [ - [ deref [ sort a ] [ / [ len a ] 2 ] ] c ] ] [ * [ - b [ strlen d ] ] [ - b [ strlen d ] ] ] ] ] ]
[ strlen a ]
[ reduce [ filter [ map [ map a [ partial0 2 * ] ] [ partial1 b - ] ] [ partial0 [ reduce [ map [ map a [ partial0 2 * ] ] [ partial1 b - ] ] 0 max ] > ] ] 0 max ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ reverse [ reverse [ filter a [ partial1 b > ] ] ] ]
[ reverse [ slice a [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] c ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ digits [ deref a [ / [ len a ] 2 ] ] ]
[ + [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] b ]
[ reduce [ map a [ partial1 [ strlen b ] - ] ] 0 max ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ filter [ slice e b c ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ filter [ slice e b c ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ - [ reduce [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ filter a [ partial1 [ deref b [ / [ len b ] 2 ] ] < ] ] 1000000000 min ]
[ head [ map [ map a [ partial1 b - ] ] [ partial0 2 * ] ] ]
[ map [ filter [ range 0 [ len [ map [ filter a [ partial1 b > ] ] [ partial1 c * ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ map [ filter a [ partial1 b > ] ] [ partial1 c * ] ] int-deref ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ filter [ filter [ map a [ partial1 b + ] ] [ combine ! is_prime ] ] [ partial1 c > ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ range 0 [ min [ len [ reverse [ slice a b c ] ] ] [ len d ] ] ] [ lambda1 [ if [ > [ deref [ reverse [ slice a b c ] ] arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ reduce [ reverse [ digits [ deref [ range 1 [ + a 1 ] ] [ / [ len [ range 1 [ + a 1 ] ] ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ head [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ max [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ reverse [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ deref [ reverse a ] [ / [ len [ reverse a ] ] 2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ reduce [ reverse [ digits [ reduce [ range 0 [ + [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter [ filter [ map a [ partial1 b - ] ] [ partial1 c > ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ map [ digits [ deref [ sort a ] [ / [ len a ] 2 ] ] ] [ partial0 2 * ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ range 0 [ + [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ filter [ range 1 [ + a 1 ] ] [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] > ] ]
[ reduce [ map [ range 0 [ min [ len [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] [ len b ] ] ] [ lambda1 [ if [ < [ deref [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ head [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ slice a [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] b ] [ reduce [ map [ range 0 [ min [ len d ] [ len e ] ] ] [ lambda1 [ if [ > [ deref d arg1 ] [ deref e arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ is_sorted [ slice [ reverse a ] b c ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ digits b ] ] ] [ deref [ digits b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ map [ range 0 [ min [ len [ reverse [ filter a [ partial1 b < ] ] ] ] [ len c ] ] ] [ lambda1 [ if [ < [ deref [ reverse [ filter a [ partial1 b < ] ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ reverse [ filter [ map a [ partial1 b * ] ] [ combine ! is_prime ] ] ]
[ - [ reduce [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ len [ digits [ reduce a 1000000000 min ] ] ] ] [ lambda1 [ == [ deref [ digits [ reduce a 1000000000 min ] ] arg1 ] [ deref [ digits [ reduce a 1000000000 min ] ] [ - [ - [ len [ digits [ reduce a 1000000000 min ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ filter [ filter a is_prime ] [ partial1 [ reduce b 1000000000 min ] < ] ]
[ map [ map a [ partial1 b * ] ] [ partial1 [ - [ reduce c 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] * ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] square ]
[ reverse [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] + ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ deref [ filter a [ partial1 [ * c b ] > ] ] [ / [ len [ filter a [ partial1 [ * c b ] > ] ] ] 2 ] ]
[ reduce [ range 0 [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ] 0 max ]
[ map [ filter a [ partial1 b > ] ] [ partial1 [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] - ] ]
[ len [ map a [ partial1 [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] b ] * ] ] ]
[ head [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ deref [ sort [ map [ reverse a ] [ partial0 2 * ] ] ] [ / [ len [ map [ reverse a ] [ partial0 2 * ] ] ] 2 ] ]
[ range 0 [ + a 1 ] ]
[ reduce [ range 0 [ + [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ is_sorted [ slice a b [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ] ]
[ floor [ sqrt [ + [ * [ - a [ min c d ] ] [ - a [ min c d ] ] ] [ * [ - b [ reduce [ range 0 [ + e 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] [ - b [ reduce [ range 0 [ + e 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] ] ] ] ]
[ head [ filter a [ partial1 [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] < ] ] ]
[ range 0 [ + [ len [ slice a 0 [ / [ len a ] 2 ] ] ] 1 ] ]
[ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] + ] ]
[ range 0 [ + a 1 ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ reverse [ digits [ deref [ sort a ] [ / [ len a ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ range 0 [ min [ len [ reverse [ slice a b c ] ] ] [ len e ] ] ] [ lambda1 [ if [ < [ deref [ reverse [ slice a b c ] ] arg1 ] [ deref e arg1 ] ] 1 0 ] ] ] 0 + ]
[ digits [ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ reduce [ map [ range 0 [ min [ len [ digits [ / [ reduce a 0 + ] [ len a ] ] ] ] [ len b ] ] ] [ lambda1 [ if [ < [ deref [ digits [ / [ reduce a 0 + ] [ len a ] ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len [ map a [ partial1 b + ] ] ] [ len [ slice d e c ] ] ] ] [ lambda1 [ if [ < [ deref [ map a [ partial1 b + ] ] arg1 ] [ deref [ slice d e c ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ range 0 [ reduce [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial0 [ reduce [ slice a [ / [ len a ] 2 ] [ len a ] ] 1000000000 min ] < ] ] 1000000000 min ] ]
[ map [ reverse [ digits a ] ] [ partial0 2 * ] ]
[ reverse [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 b < ] ] ]
[ head [ digits [ min a b ] ] ]
[ map [ digits a ] [ partial1 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] * ] ]
[ filter [ filter a [ partial1 [ head b ] < ] ] [ combine ! is_prime ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ slice e b c ] [ partial0 2 * ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map [ slice e b c ] [ partial0 2 * ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ filter [ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b + ] ] [ partial0 [ reduce [ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b + ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ filter a [ lambda1 [ reduce [ map [ filter c [ lambda1 [ reduce [ map [ range 0 [ + b 1 ] ] [ partial0 arg1 == ] ] false || ] ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ map [ map [ digits a ] square ] [ partial1 b * ] ]
[ < [ - [ reduce [ map a [ partial1 b - ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ reverse [ digits [ reduce [ filter [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ reduce [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] 1000000000 min ] < ] ] 1000000000 min ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ reverse [ digits [ reduce a 0 max ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ max [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] c ]
[ filter a [ partial1 [ reduce [ reverse [ digits [ deref [ sort b ] [ / [ len b ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] < ] ]
[ map a [ partial1 [ min c [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] - ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ filter [ reverse [ slice a b c ] ] [ lambda1 [ reduce [ map e [ partial0 arg1 == ] ] false || ] ] ]
[ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] [ head b ] c ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ range 0 [ + [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] 1 ] ]
[ map [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] square ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ slice d b c ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ slice d b c ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reverse [ map [ filter [ range 0 [ len [ slice a 0 [ / [ len a ] 2 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ slice a 0 [ / [ len a ] 2 ] ] int-deref ] ] ]
[ * a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ head [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ range 1 a ] [ partial1 b - ] ] 0 max ]
[ deref [ range 1 [ + [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] [ / [ len [ range 1 [ + [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] ] 2 ] ]
[ filter a [ partial1 [ - [ reduce [ slice e b c ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] > ] ]
[ slice [ range 0 [ + a 1 ] ] [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] c ]
[ reduce [ range 0 [ + [ reduce a 0 max ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ reduce [ map [ range 0 [ min [ len [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ] [ len [ map c [ partial1 b - ] ] ] ] ] [ lambda1 [ if [ > [ deref [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] arg1 ] [ deref [ map c [ partial1 b - ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ map [ range 1 a ] [ partial1 [ reduce [ slice [ sort c ] 0 b ] 0 + ] * ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ map [ filter [ range 0 [ len [ map [ slice a b c ] square ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ map [ slice a b c ] square ] int-deref ] ]
[ * a [ strlen b ] ]
[ digits [ reduce [ map [ range 0 [ min [ len [ reverse a ] ] [ len b ] ] ] [ lambda1 [ if [ < [ deref [ reverse a ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ slice [ digits [ max a b ] ] 0 [ / [ len [ digits [ max a b ] ] ] 2 ] ]
[ is_sorted [ filter a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] > ] ] ]
[ deref [ range 0 [ reduce [ slice [ sort a ] 0 b ] 0 + ] ] [ / [ len [ range 0 [ reduce [ slice [ sort a ] 0 b ] 0 + ] ] ] 2 ] ]
[ reverse [ filter [ map a [ partial1 b + ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] ]
[ filter [ range 1 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] is_prime ]
[ filter [ slice a 0 [ / [ len a ] 2 ] ] [ lambda1 [ reduce [ map [ slice b 0 [ / [ len b ] 2 ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ range 0 [ + [ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ filter [ slice a b c ] [ lambda1 [ reduce [ map d [ partial0 arg1 == ] ] false || ] ] ]
[ range 1 [ reduce [ range 0 [ + [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ reduce [ range 0 [ + [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len [ slice d b c ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ slice d b c ] arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ slice [ digits a ] b c ]
[ reduce [ reverse [ digits [ + [ * [ - a [ max c d ] ] [ - a [ max c d ] ] ] [ * [ - b e ] [ - b e ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter a [ partial1 [ deref b [ / [ len b ] 2 ] ] < ] ]
[ filter [ filter [ range 1 [ + a 1 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c > ] ]
[ reverse [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ digits [ head [ slice a b c ] ] ]
[ slice [ slice [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] c d ] [ / [ len [ slice [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] c d ] ] 2 ] [ len [ slice [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] c d ] ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ reverse c ] ] ] [ deref [ reverse c ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ filter [ reverse [ slice a b c ] ] [ partial1 e < ] ]
[ map [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 b > ] ] [ partial0 2 * ] ]
[ reduce [ slice [ sort [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] ] 0 c ] 0 + ]
[ reduce [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ] 0 + ]
[ reduce [ reverse [ digits [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 max ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ filter [ reverse [ filter a is_prime ] ] is_prime ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ reverse [ digits [ reduce [ reverse [ digits [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ range 0 [ len [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] ] ] [ lambda1 [ == [ deref [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] arg1 ] [ deref [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] [ - [ - [ len [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - [ deref [ sort b ] [ / [ len b ] 2 ] ] d ] [ - [ deref [ sort b ] [ / [ len b ] 2 ] ] d ] ] ] ] ] ]
[ reduce [ range 0 [ + [ reduce [ filter [ range 1 [ + a 1 ] ] [ partial0 [ reduce [ range 1 [ + a 1 ] ] 0 max ] > ] ] 0 max ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ range 1 [ + [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] b ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ slice [ range 1 [ + a 1 ] ] [ / [ len [ range 1 [ + a 1 ] ] ] 2 ] [ len [ range 1 [ + a 1 ] ] ] ] 0 + ]
[ slice a [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ < [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] [ reduce [ filter e [ partial0 [ reduce e 0 max ] > ] ] 0 max ] ]
[ head [ map [ map a [ partial1 b - ] ] [ partial0 2 * ] ] ]
[ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len [ reverse a ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ reverse a ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] ] 0 + ]
[ map [ map [ slice a b c ] [ partial0 2 * ] ] [ partial1 d + ] ]
[ filter [ digits [ * a b ] ] is_prime ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter b is_prime ] ] ] [ deref [ filter b is_prime ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ range 1 [ reduce [ slice [ reverse [ sort [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] 0 c ] 0 + ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ filter [ map [ range 0 a ] [ partial1 b + ] ] [ partial0 [ reduce [ map [ range 0 a ] [ partial1 b + ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ reduce [ map [ range 0 [ len [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] ] ] [ lambda1 [ == [ deref [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] arg1 ] [ deref [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] [ - [ - [ len [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ map [ map a [ partial1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] * ] ] square ]
[ reduce [ slice [ reverse [ sort [ filter a [ combine ! is_prime ] ] ] ] 0 [ min c b ] ] 0 + ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter c [ partial1 b < ] ] ] ] [ deref [ filter c [ partial1 b < ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ map [ filter [ slice a 0 [ / [ len a ] 2 ] ] is_prime ] [ partial1 b - ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ filter [ filter c [ partial1 b < ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ filter [ filter c [ partial1 b < ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ filter [ filter a [ combine ! is_prime ] ] [ partial0 [ reduce [ filter a [ combine ! is_prime ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ reduce [ slice a b c ] 1000000000 min ]
[ slice a b [ reduce [ slice [ sort c ] 0 d ] 0 + ] ]
[ slice [ reverse [ filter a [ partial1 b > ] ] ] [ / [ len [ reverse [ filter a [ partial1 b > ] ] ] ] 2 ] [ len [ reverse [ filter a [ partial1 b > ] ] ] ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ]
[ map [ range 1 [ + a 1 ] ] [ partial0 2 * ] ]
[ is_sorted [ slice [ reverse a ] b c ] ]
[ map [ filter a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] < ] ] [ partial1 c - ] ]
[ - [ reduce [ slice [ reverse a ] b c ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ filter [ map [ filter [ range 0 [ len [ slice a 0 [ / [ len a ] 2 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ slice a 0 [ / [ len a ] 2 ] ] int-deref ] ] [ partial1 b < ] ]
[ reduce [ range 0 [ + [ head [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ * a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ reduce [ range 0 [ + [ reduce [ range 0 [ + [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ - [ reduce [ slice [ reverse a ] b c ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ reduce [ reverse [ digits d ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ - b [ reduce [ reverse [ digits d ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ filter [ map [ filter a [ combine ! is_prime ] ] [ partial0 2 * ] ] [ partial0 [ reduce [ map [ filter a [ combine ! is_prime ] ] [ partial0 2 * ] ] 0 max ] > ] ] 0 max ]
[ > [ reduce [ filter [ range 0 [ + a 1 ] ] [ partial0 [ reduce [ range 0 [ + a 1 ] ] 1000000000 min ] < ] ] 1000000000 min ] 1 ]
[ + [ * [ - a [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] [ - a [ + [ * [ - f c ] [ - f c ] ] [ * [ - g d ] [ - g d ] ] ] ] ] [ * [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g i ] [ - g i ] ] ] ] [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g i ] [ - g i ] ] ] ] ] ]
[ reduce [ map [ range 0 [ min [ len [ range 1 a ] ] [ len [ range 1 b ] ] ] ] [ lambda1 [ if [ < [ deref [ range 1 a ] arg1 ] [ deref [ range 1 b ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ range 0 [ * a [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] ]
[ strlen a ]
[ map a [ partial1 [ reduce [ range 0 [ + b 1 ] ] 0 max ] - ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ deref [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ / [ len [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] ] 2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ reduce [ map [ range 0 [ len [ filter a [ partial1 [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] < ] ] ] ] [ lambda1 [ == [ deref [ filter a [ partial1 [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] < ] ] arg1 ] [ deref [ filter a [ partial1 [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] < ] ] [ - [ - [ len [ filter a [ partial1 [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] < ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ head [ map a [ partial1 [ strlen b ] * ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ head [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ reduce d 0 + ] ] [ - b [ reduce d 0 + ] ] ] ]
[ range 1 [ + [ reduce [ range 0 [ + [ reduce [ slice [ sort a ] 0 b ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] 1 ] ]
[ reduce [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 max ]
[ map [ slice a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] c ] square ]
[ map [ filter [ range 0 [ len [ map [ reverse a ] square ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ map [ reverse a ] square ] int-deref ] ]
[ map [ filter [ range 1 [ + a 1 ] ] [ partial1 b < ] ] square ]
[ filter [ range 0 [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ + [ * [ - [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] [ - [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] ] [ * [ - b [ head d ] ] [ - b [ head d ] ] ] ]
[ floor [ sqrt [ + [ * [ - a [ strlen c ] ] [ - a [ strlen c ] ] ] [ * [ - b [ reduce [ slice [ reverse [ sort d ] ] 0 e ] 0 + ] ] [ - b [ reduce [ slice [ reverse [ sort d ] ] 0 e ] 0 + ] ] ] ] ] ]
[ filter [ map [ filter [ range 0 [ len [ map a square ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ map a square ] int-deref ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reverse [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] b c ] 0 max ]
[ map [ filter a [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] > ] ] [ partial0 2 * ] ]
[ reverse [ range 0 [ head a ] ] ]
[ * [ head a ] [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ range 0 [ + [ deref [ filter a [ partial1 b > ] ] [ / [ len [ filter a [ partial1 b > ] ] ] 2 ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] < ] ]
[ filter [ range 0 [ + a 1 ] ] [ partial1 [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] b ] < ] ]
[ reduce [ map [ range 0 [ min [ len [ range 1 [ deref [ sort a ] [ / [ len a ] 2 ] ] ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ range 1 [ deref [ sort a ] [ / [ len a ] 2 ] ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ reverse a ] [ partial1 [ reduce [ slice [ sort c ] 0 b ] 0 + ] < ] ]
[ digits [ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ digits [ floor [ sqrt [ + [ * [ - a [ reduce [ filter c [ partial0 [ reduce c 1000000000 min ] < ] ] 1000000000 min ] ] [ - a [ reduce [ filter c [ partial0 [ reduce c 1000000000 min ] < ] ] 1000000000 min ] ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ]
[ digits [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ range 0 b ] ] ] [ deref [ range 0 b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ slice [ sort a ] 0 [ deref b [ / [ len b ] 2 ] ] ] 0 + ] ]
[ filter [ range 1 [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ]
[ range 1 [ + [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] 1 ] ]
[ reduce [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] b c ] 0 max ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ]
[ reduce [ map [ range 0 [ min [ len [ slice [ reverse a ] b c ] ] [ len d ] ] ] [ lambda1 [ if [ > [ deref [ slice [ reverse a ] b c ] arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ digits [ reduce [ range 1 [ + a 1 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ filter [ slice [ range 0 [ + a 1 ] ] 0 [ / [ len [ range 0 [ + a 1 ] ] ] 2 ] ] [ combine ! is_prime ] ]
[ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len d ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ] + ] ]
[ reduce [ slice [ map a [ partial0 2 * ] ] 0 [ / [ len [ map a [ partial0 2 * ] ] ] 2 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reverse [ map a [ partial1 b + ] ] ]
[ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] * ] ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ slice [ reverse [ sort a ] ] 0 [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] 0 + ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reverse [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ floor [ sqrt [ + [ * [ - [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] c ] [ - [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] c ] ] [ * [ - b [ deref [ sort d ] [ / [ len d ] 2 ] ] ] [ - b [ deref [ sort d ] [ / [ len d ] 2 ] ] ] ] ] ] ]
[ head [ slice a b [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] c ] ] ]
[ reduce [ slice [ sort [ map a [ partial0 2 * ] ] ] 0 [ deref b [ / [ len b ] 2 ] ] ] 0 + ]
[ len [ slice [ digits a ] b c ] ]
[ * [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] [ head c ] ]
[ map [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 b + ] ] square ]
[ slice [ reverse [ slice a b c ] ] 0 [ / [ len [ reverse [ slice a b c ] ] ] 2 ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ filter a [ lambda1 [ reduce [ map [ filter c [ partial1 [ head b ] < ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ is_sorted [ map [ slice a b c ] [ partial0 2 * ] ] ]
[ map [ slice a b c ] [ partial1 [ reduce [ map [ range 0 [ min [ len e ] [ len f ] ] ] [ lambda1 [ if [ < [ deref e arg1 ] [ deref f arg1 ] ] 1 0 ] ] ] 0 + ] * ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ slice [ sort a ] 0 [ strlen [ reduce b "" str_concat ] ] ] 0 + ]
[ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] square ]
[ reduce [ range 0 [ + [ head [ filter a [ partial1 b < ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ * [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] ]
[ reduce [ map [ range 0 [ len [ filter [ filter a [ partial1 b < ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] ] [ lambda1 [ == [ deref [ filter [ filter a [ partial1 b < ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] arg1 ] [ deref [ filter [ filter a [ partial1 b < ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ - [ - [ len [ filter [ filter a [ partial1 b < ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ filter a [ partial1 [ reduce [ slice b [ / [ len b ] 2 ] [ len b ] ] 0 max ] < ] ]
[ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 [ strlen c ] > ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ filter [ reverse [ range 0 a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ range 0 [ len [ digits [ reduce a 1000000000 min ] ] ] ] [ lambda1 [ == [ deref [ digits [ reduce a 1000000000 min ] ] arg1 ] [ deref [ digits [ reduce a 1000000000 min ] ] [ - [ - [ len [ digits [ reduce a 1000000000 min ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ is_sorted [ filter a [ partial1 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] > ] ] ]
[ filter [ digits [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] is_prime ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ map [ range 0 [ reduce a 0 + ] ] square ]
[ digits [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] ]
[ reduce [ reverse [ digits [ reduce [ range 0 [ + [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ digits [ strlen [ reduce a "z" str_min ] ] ]
[ deref [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ / [ len [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] 2 ] ]
[ reduce [ slice a b c ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len e ] ] [ deref e arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ head [ filter [ range 1 a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ digits [ strlen a ] ]
[ - [ reduce [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b < ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ range 0 [ head a ] ]
[ filter [ filter [ digits a ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ combine ! is_prime ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ reverse [ slice e b c ] ] ] ] [ deref [ reverse [ slice e b c ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ map a [ partial0 2 * ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ slice b 0 [ / [ len b ] 2 ] ] ] ] [ deref [ slice b 0 [ / [ len b ] 2 ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ map [ filter [ range 0 [ len [ map [ reverse a ] square ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ map [ reverse a ] square ] int-deref ] ]
[ + [ max a b ] [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] c ] ]
[ reduce [ range 0 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ range 1 [ + b 1 ] ] ] ] [ deref [ range 1 [ + b 1 ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ reverse [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ map [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c + ] ] [ partial0 2 * ] ]
[ map [ map a [ partial1 b - ] ] [ partial1 [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ]
[ reduce [ filter [ range 1 [ + a 1 ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] 0 max ]
[ filter [ filter [ digits a ] is_prime ] [ partial1 b < ] ]
[ reduce [ map [ map a [ partial1 b + ] ] [ partial0 2 * ] ] 0 max ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ reduce [ filter [ map [ reverse a ] square ] [ partial0 [ reduce [ map [ reverse a ] square ] 0 max ] > ] ] 0 max ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map c [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] - ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ map c [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] - ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ < [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] * ] ]
[ head [ map [ map a [ partial0 2 * ] ] [ partial1 b - ] ] ]
[ reduce [ map a square ] 0 + ]
[ is_sorted [ reverse [ filter a [ partial1 b < ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ head [ slice [ map a [ partial1 b + ] ] c d ] ]
[ map [ range 1 [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] ] [ partial0 2 * ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ reverse [ slice e b c ] ] ] ] [ deref [ reverse [ slice e b c ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ deref [ sort [ range 0 [ + [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] 1 ] ] ] [ / [ len [ range 0 [ + [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] 1 ] ] ] 2 ] ]
[ floor [ sqrt [ + [ * [ - a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len d ] ] [ deref d arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] [ - a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len d ] ] [ deref d arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ] [ * [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g i ] [ - g i ] ] ] ] [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g i ] [ - g i ] ] ] ] ] ] ] ]
[ digits [ reduce [ range 0 [ + [ max a b ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ reduce [ slice a b [ min c d ] ] 0 max ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ digits [ reduce [ map [ range 0 [ min [ len [ reverse a ] ] [ len b ] ] ] [ lambda1 [ if [ < [ deref [ reverse a ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ filter [ map [ filter a [ partial1 b > ] ] square ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reduce [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] 1000000000 min ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] + ] ]
[ head [ filter [ range 1 a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ filter [ filter a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] > ] ] [ combine ! is_prime ] ]
[ map a [ partial1 b - ] ]
[ head [ map [ slice a 0 [ / [ len a ] 2 ] ] square ] ]
[ range 0 [ - [ reduce [ slice a 0 [ / [ len a ] 2 ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ digits [ strlen [ reduce a "z" str_min ] ] ]
[ map [ filter a [ partial1 b > ] ] [ partial1 [ reduce [ slice [ sort c ] 0 d ] 0 + ] * ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] + ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ]
[ reduce [ filter [ digits [ max a b ] ] [ partial0 [ reduce [ digits [ max a b ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ range 0 [ + [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] 1 ] ]
[ reduce [ filter [ map [ map a square ] [ partial0 2 * ] ] [ partial0 [ reduce [ map [ map a square ] [ partial0 2 * ] ] 0 max ] > ] ] 0 max ]
[ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 [ reduce b 0 max ] + ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ range 0 [ + [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ reduce [ range 0 [ + [ deref [ sort [ range 1 a ] ] [ / [ len [ range 1 a ] ] 2 ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ > [ head a ] 1 ]
[ reduce [ map [ range 0 [ len [ map [ slice a b c ] [ partial0 2 * ] ] ] ] [ lambda1 [ == [ deref [ map [ slice a b c ] [ partial0 2 * ] ] arg1 ] [ deref [ map [ slice a b c ] [ partial0 2 * ] ] [ - [ - [ len [ map [ slice a b c ] [ partial0 2 * ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ + a [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] ]
[ reduce [ reverse [ digits [ reduce [ filter [ slice a b c ] [ partial0 [ reduce [ slice a b c ] 0 max ] > ] ] 0 max ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ range 0 [ + [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] ]
[ filter [ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] square ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ > [ deref [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ / [ len [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] 2 ] ] c ]
[ strlen a ]
[ head [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ head [ digits b ] ] ] 0 + ]
[ reduce [ map [ filter a is_prime ] [ partial1 b + ] ] 0 max ]
[ map [ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial0 2 * ] ] [ partial0 2 * ] ]
[ deref [ map a [ partial0 2 * ] ] [ / [ len [ map a [ partial0 2 * ] ] ] 2 ] ]
[ reduce [ filter [ map [ map a square ] [ partial0 2 * ] ] [ partial0 [ reduce [ map [ map a square ] [ partial0 2 * ] ] 0 max ] > ] ] 0 max ]
[ range 0 [ * [ head a ] b ] ]
[ filter [ digits a ] [ combine ! is_prime ] ]
[ map a [ partial1 b - ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ reverse [ digits [ reduce a 0 max ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ > [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ head a ] ] 1 ]
[ reduce [ range 0 [ + [ max [ / [ reduce a 0 + ] [ len a ] ] b ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map [ slice a b c ] [ partial1 [ reduce d 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len e ] ] [ deref e arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] - ] ]
[ + [ * [ - a [ deref c [ / [ len c ] 2 ] ] ] [ - a [ deref c [ / [ len c ] 2 ] ] ] ] [ * [ - b d ] [ - b d ] ] ]
[ map a [ partial1 [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 c + ] ] ] ] * ] ]
[ reduce [ range 0 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ map b square ] ] ] [ deref [ map b square ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ filter [ slice a b [ max c d ] ] [ combine ! is_prime ] ]
[ slice a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] [ - [ reduce d 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ map [ map [ filter [ range 0 [ len [ map a [ partial1 b * ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ map a [ partial1 b * ] ] int-deref ] ] [ partial0 2 * ] ]
[ reduce [ map a [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] + ] ] 1000000000 min ]
[ filter [ range 1 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ combine ! is_prime ] ]
[ * a [ + c [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] ]
[ floor [ sqrt [ + [ * [ - a [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 c + ] ] ] ] ] [ - a [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 c + ] ] ] ] ] ] [ * [ - b [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] d ] ] [ - b [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] d ] ] ] ] ] ]
[ slice a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] c ]
[ map [ range 0 a ] [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] * ] ]
[ strlen a ]
[ + [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] b ]
[ reduce [ map [ range 0 [ len [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] ] ] [ lambda1 [ == [ deref [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] arg1 ] [ deref [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] [ - [ - [ len [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len [ digits a ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ digits a ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter [ range 0 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] * ] ] ] ] ]
[ reduce [ map [ range 0 [ len [ filter a [ partial1 [ reduce [ slice [ sort c ] 0 b ] 0 + ] > ] ] ] ] [ lambda1 [ == [ deref [ filter a [ partial1 [ reduce [ slice [ sort c ] 0 b ] 0 + ] > ] ] arg1 ] [ deref [ filter a [ partial1 [ reduce [ slice [ sort c ] 0 b ] 0 + ] > ] ] [ - [ - [ len [ filter a [ partial1 [ reduce [ slice [ sort c ] 0 b ] 0 + ] > ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ head [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ filter [ reverse [ filter a [ partial1 b > ] ] ] is_prime ]
[ reverse [ range 1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] ] ]
[ is_sorted [ map [ map a [ partial0 2 * ] ] [ partial1 b - ] ] ]
[ digits [ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ reverse [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] ]
[ deref [ sort [ range 0 [ + a 1 ] ] ] [ / [ len [ range 0 [ + a 1 ] ] ] 2 ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] ]
[ deref [ sort [ slice a 0 [ / [ len a ] 2 ] ] ] [ / [ len [ slice a 0 [ / [ len a ] 2 ] ] ] 2 ] ]
[ * [ reduce a 1000000000 min ] [ reduce b 0 max ] ]
[ reduce [ range 0 [ + [ strlen [ reduce a "" str_concat ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ reduce [ range 0 [ + [ reduce [ reverse [ digits [ + a b ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ + [ reduce [ map [ range 0 [ min [ len a ] [ len [ slice b [ / [ len b ] 2 ] [ len b ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ slice b [ / [ len b ] 2 ] [ len b ] ] arg1 ] ] 1 0 ] ] ] 0 + ] c ]
[ slice [ range 1 [ + a 1 ] ] [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] c ]
[ range 0 [ + a 1 ] ]
[ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial1 b * ] ]
[ range 0 [ head a ] ]
[ filter [ slice [ digits a ] [ / [ len [ digits a ] ] 2 ] [ len [ digits a ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ floor [ sqrt [ + [ * [ - a [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ] [ - a [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ] ] [ * [ - b [ / [ reduce e 0 + ] [ len e ] ] ] [ - b [ / [ reduce e 0 + ] [ len e ] ] ] ] ] ] ]
[ map [ filter a [ partial1 b < ] ] [ partial1 [ reduce [ filter c [ partial0 [ reduce c 1000000000 min ] < ] ] 1000000000 min ] + ] ]
[ digits [ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ head [ map [ slice a 0 [ / [ len a ] 2 ] ] square ] ]
[ min [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] [ reduce [ map [ range 0 [ min [ len c ] [ len d ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter c [ partial1 b < ] ] ] ] [ deref [ filter c [ partial1 b < ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ reverse [ slice d b c ] ] ] ] [ deref [ reverse [ slice d b c ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ slice [ sort a ] 0 [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ]
[ * a [ reduce [ range 0 [ + [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ digits [ min a [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] > ] ]
[ reduce [ slice [ reverse [ sort [ digits [ head a ] ] ] ] 0 b ] 0 + ]
[ map [ range 0 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] ] [ partial0 2 * ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ digits [ reduce [ map [ range 0 [ min [ len [ slice a b c ] ] [ len d ] ] ] [ lambda1 [ if [ > [ deref [ slice a b c ] arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ digits [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ]
[ map a [ partial1 b - ] ]
[ reduce [ map [ range 0 [ min [ len [ digits a ] ] [ len [ slice e b c ] ] ] ] [ lambda1 [ if [ > [ deref [ digits a ] arg1 ] [ deref [ slice e b c ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ head [ map [ map a [ partial0 2 * ] ] [ partial1 b - ] ] ]
[ digits [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] ]
[ + [ * [ - a [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] [ - a [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] ] [ * [ - b [ / [ reduce d 0 + ] [ len d ] ] ] [ - b [ / [ reduce d 0 + ] [ len d ] ] ] ] ]
[ * [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] [ head b ] ]
[ + [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] [ reduce [ slice [ sort c ] 0 b ] 0 + ] ]
[ - [ reduce [ slice [ reverse a ] b c ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ map [ digits [ max a b ] ] [ partial1 c * ] ]
[ reverse [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ slice [ sort [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 c ] 0 + ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ filter [ map [ reverse a ] square ] [ partial0 [ reduce [ map [ reverse a ] square ] 0 max ] > ] ] 0 max ]
[ len [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] 0 [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ deref [ map [ digits a ] [ partial0 2 * ] ] [ / [ len [ map [ digits a ] [ partial0 2 * ] ] ] 2 ] ]
[ + [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] [ reduce [ filter d [ partial0 [ reduce d 0 max ] > ] ] 0 max ] ]
[ * a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ map [ range 0 [ min [ len a ] [ len [ range 1 b ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ range 1 b ] arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] + ] ] ] ]
[ reduce [ range 0 [ + [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ head d ] ] [ - b [ head d ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ slice [ range 1 [ strlen a ] ] 0 [ / [ len [ range 1 [ strlen a ] ] ] 2 ] ]
[ reverse [ filter a [ lambda1 [ reduce [ map [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 arg1 == ] ] false || ] ] ] ]
[ strlen a ]
[ digits [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ]
[ range 0 [ + a 1 ] ]
[ map a [ partial1 [ + [ * [ - f [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 c * ] ] ] ] ] ] [ - f [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 c * ] ] ] ] ] ] ] [ * [ - b d ] [ - b d ] ] ] - ] ]
[ deref [ sort [ range 0 [ + [ max a b ] 1 ] ] ] [ / [ len [ range 0 [ + [ max a b ] 1 ] ] ] 2 ] ]
[ strlen a ]
[ reduce [ slice [ sort a ] 0 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ]
[ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ]
[ <= [ reduce [ range 0 [ + [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] b ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ digits b ] square ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map [ digits b ] square ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ digits [ head a ] ]
[ head [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c + ] ] ]
[ max a [ len b ] ]
[ reduce [ range 0 [ + [ reduce [ range 0 [ + [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ filter a [ lambda1 [ reduce [ map [ filter c [ partial1 [ head b ] > ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ slice [ sort a ] 0 [ reduce [ map [ range 0 [ min [ len [ reverse c ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ reverse c ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ range 1 [ max c b ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ range 1 [ min c b ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len [ filter a is_prime ] ] [ len [ range 1 [ + b 1 ] ] ] ] ] [ lambda1 [ if [ < [ deref [ filter a is_prime ] arg1 ] [ deref [ range 1 [ + b 1 ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map a [ partial1 [ deref b [ / [ len b ] 2 ] ] * ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map [ filter [ map a [ partial1 b - ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ]
[ head [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ]
[ reverse [ filter [ map a [ partial1 b * ] ] [ combine ! is_prime ] ] ]
[ reduce [ slice [ sort [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 d ] 0 + ]
[ len [ map [ filter a [ partial1 b < ] ] square ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ slice [ reverse [ sort [ map a [ partial0 2 * ] ] ] ] 0 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] ] 0 + ]
[ floor [ sqrt [ + [ * [ - a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] ] [ - a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] ] ] [ * [ - b [ reduce [ filter d [ partial0 [ reduce d 0 max ] > ] ] 0 max ] ] [ - b [ reduce [ filter d [ partial0 [ reduce d 0 max ] > ] ] 0 max ] ] ] ] ] ]
[ < [ reduce [ range 0 [ + [ deref a [ / [ len a ] 2 ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] b ]
[ * [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] c ]
[ filter [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] > ] ]
[ reverse [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] ]
[ reduce [ slice [ reverse [ sort [ range 1 a ] ] ] 0 [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 + ]
[ map [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] [ partial0 2 * ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] + ] ] ] ]
[ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] * ] ]
[ reduce [ filter [ map [ filter [ range 0 [ len [ slice a 0 [ / [ len a ] 2 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ slice a 0 [ / [ len a ] 2 ] ] int-deref ] ] [ partial0 [ reduce [ map [ filter [ range 0 [ len [ slice a 0 [ / [ len a ] 2 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ slice a 0 [ / [ len a ] 2 ] ] int-deref ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ reduce [ map [ range 0 [ min [ len [ range 1 [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ] [ len c ] ] ] [ lambda1 [ if [ < [ deref [ range 1 [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ floor [ sqrt [ + [ * [ - a [ deref c [ / [ len c ] 2 ] ] ] [ - a [ deref c [ / [ len c ] 2 ] ] ] ] [ * [ - b [ reduce [ map [ range 0 [ min [ len d ] [ len e ] ] ] [ lambda1 [ if [ > [ deref d arg1 ] [ deref e arg1 ] ] 1 0 ] ] ] 0 + ] ] [ - b [ reduce [ map [ range 0 [ min [ len d ] [ len e ] ] ] [ lambda1 [ if [ > [ deref d arg1 ] [ deref e arg1 ] ] 1 0 ] ] ] 0 + ] ] ] ] ] ]
[ map [ filter [ range 0 [ len [ map [ filter [ range 0 [ len [ filter a is_prime ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ filter a is_prime ] int-deref ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ map [ filter [ range 0 [ len [ filter a is_prime ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ filter a is_prime ] int-deref ] ] int-deref ] ]
[ reduce [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ range 0 [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] 0 + ]
[ floor [ sqrt [ + [ * [ - [ + a b ] d ] [ - [ + a b ] d ] ] [ * [ - c [ head e ] ] [ - c [ head e ] ] ] ] ] ]
[ digits [ deref a [ / [ len a ] 2 ] ] ]
[ / [ reduce [ map [ filter [ range 0 [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ slice a [ / [ len a ] 2 ] [ len a ] ] int-deref ] ] 0 + ] [ len [ map [ filter [ range 0 [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ slice a [ / [ len a ] 2 ] [ len a ] ] int-deref ] ] ] ]
[ deref [ sort [ map [ filter a is_prime ] [ partial1 b + ] ] ] [ / [ len [ map [ filter a is_prime ] [ partial1 b + ] ] ] 2 ] ]
[ reduce [ reverse [ digits [ floor [ sqrt [ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce [ slice [ sort c ] 0 b ] 0 + ] e ] [ - [ reduce [ slice [ sort c ] 0 b ] 0 + ] e ] ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ range 0 [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ * d e ] ] [ - b [ * d e ] ] ] ] ] ] ] ]
[ filter [ reverse a ] [ lambda1 [ reduce [ map [ filter c [ partial1 b < ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ is_sorted [ map a [ partial1 [ reduce b 0 max ] + ] ] ]
[ map a [ partial1 [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ < [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] - ] ]
[ reduce [ reverse [ digits [ deref [ sort [ range 0 a ] ] [ / [ len [ range 0 a ] ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] * ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ slice [ reverse [ sort a ] ] 0 [ min c b ] ] 0 + ] ]
[ max a [ reduce [ filter [ digits b ] [ partial0 [ reduce [ digits b ] 1000000000 min ] < ] ] 1000000000 min ] ]
[ filter [ filter a [ lambda1 [ reduce [ map [ slice d b c ] [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ filter a [ partial1 [ reduce [ range 0 [ + [ deref [ sort b ] [ / [ len b ] 2 ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] > ] ]
[ filter [ reverse a ] [ lambda1 [ reduce [ map [ slice e b c ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ range 0 [ len [ slice [ range 1 a ] b c ] ] ] [ lambda1 [ == [ deref [ slice [ range 1 a ] b c ] arg1 ] [ deref [ slice [ range 1 a ] b c ] [ - [ - [ len [ range 1 a ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ len [ range 0 [ deref a [ / [ len a ] 2 ] ] ] ]
[ deref [ sort [ map [ map a [ partial1 b - ] ] square ] ] [ / [ len [ map [ map a [ partial1 b - ] ] square ] ] 2 ] ]
[ + [ * [ - a [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ] [ - a [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ] ] [ * [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g i ] [ - g i ] ] ] ] [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g i ] [ - g i ] ] ] ] ] ]
[ reduce [ range 0 [ + [ reduce [ reverse [ digits [ reduce a 0 max ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ slice [ reverse [ slice a b c ] ] 0 [ / [ len [ reverse [ slice a b c ] ] ] 2 ] ]
[ digits [ strlen a ] ]
[ reduce [ reverse [ digits [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter [ reverse a ] [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ]
[ reverse [ map [ filter [ range 0 [ len [ map a [ partial1 b + ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ map a [ partial1 b + ] ] int-deref ] ] ]
[ max a [ head [ range 0 b ] ] ]
[ map [ filter a [ partial1 [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] b ] > ] ] square ]
[ + [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ filter a [ partial1 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] < ] ]
[ reduce [ map [ range 0 [ min [ len [ slice a 0 [ / [ len a ] 2 ] ] ] [ len [ map b [ partial0 2 * ] ] ] ] ] [ lambda1 [ if [ > [ deref [ slice a 0 [ / [ len a ] 2 ] ] arg1 ] [ deref [ map b [ partial0 2 * ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ + [ * [ - [ * a b ] d ] [ - [ * a b ] d ] ] [ * [ - c e ] [ - c e ] ] ]
[ < [ head [ map a [ partial1 b * ] ] ] c ]
[ deref [ sort [ map [ range 0 [ + a 1 ] ] [ partial0 2 * ] ] ] [ / [ len [ map [ range 0 [ + a 1 ] ] [ partial0 2 * ] ] ] 2 ] ]
[ map [ map a [ partial1 [ strlen b ] - ] ] square ]
[ map [ map a [ partial1 b + ] ] [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len d ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ] + ] ]
[ digits [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] ] ]
[ slice a b [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ filter a [ partial1 [ floor [ sqrt [ + [ * [ - g d ] [ - g d ] ] [ * [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] ] ] ] ] > ] ]
[ reduce [ filter [ slice [ reverse a ] b c ] [ partial0 [ reduce [ slice [ reverse a ] b c ] 0 max ] > ] ] 0 max ]
[ filter [ slice [ filter a is_prime ] [ / [ len [ filter a is_prime ] ] 2 ] [ len [ filter a is_prime ] ] ] [ partial1 b > ] ]
[ reverse [ range 0 [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ map [ map a square ] [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] * ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ head [ slice a b c ] ] ]
[ filter [ reverse a ] [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ slice [ reverse [ sort [ digits [ head a ] ] ] ] 0 b ] 0 + ]
[ slice [ range 1 [ + a 1 ] ] [ strlen b ] c ]
[ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ map [ map a [ partial1 [ strlen b ] - ] ] square ]
[ floor [ sqrt [ + [ * [ - [ deref a [ / [ len a ] 2 ] ] c ] [ - [ deref a [ / [ len a ] 2 ] ] c ] ] [ * [ - b [ floor [ sqrt [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] [ - b [ floor [ sqrt [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] ] ] ] ]
[ reduce [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c > ] ] 0 max ]
[ map [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 [ reduce b 0 max ] + ] ]
[ >= a [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ strlen a ]
[ digits [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ]
[ reduce [ slice [ sort a ] 0 [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] ]
[ reduce [ map [ range 0 [ len [ filter a [ partial1 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] < ] ] ] ] [ lambda1 [ == [ deref [ filter a [ partial1 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] < ] ] arg1 ] [ deref [ filter a [ partial1 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] < ] ] [ - [ - [ len [ filter a [ partial1 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] < ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ filter a [ partial1 [ reduce [ range 0 [ + [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] < ] ]
[ map [ filter [ range 0 [ len [ map a [ partial1 [ head b ] * ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ map a [ partial1 [ head b ] * ] ] int-deref ] ]
[ slice [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] square ] [ / [ len [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] square ] ] 2 ] [ len [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] square ] ] ]
[ head [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ]
[ slice [ range 1 a ] [ reduce b 1000000000 min ] c ]
[ slice a [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ range 0 [ + a 1 ] ]
[ digits [ head [ reverse a ] ] ]
[ map [ filter [ slice a b c ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] square ]
[ filter [ reverse [ reverse a ] ] [ combine ! is_prime ] ]
[ filter [ slice a b c ] [ lambda1 [ reduce [ map [ filter e [ partial1 f > ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ reverse [ map a [ partial1 [ strlen b ] + ] ] ]
[ range 0 [ + [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 1 ] ]
[ > [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] 1 ]
[ filter [ slice a 0 [ / [ len a ] 2 ] ] [ lambda1 [ reduce [ map [ slice b 0 [ / [ len b ] 2 ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ map [ filter a is_prime ] [ partial1 [ reduce b 1000000000 min ] * ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ digits a ] 1000000000 min ] ]
[ reverse [ filter [ range 1 [ + a 1 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ slice a [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] c ]
[ map [ filter [ filter a [ partial1 b > ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] square ]
[ digits [ max a [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ digits [ min a [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ slice a b c ] 0 + ] ]
[ reduce [ filter [ range 1 [ + a 1 ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] 0 max ]
[ reduce [ filter [ range 0 a ] [ partial0 [ reduce [ range 0 a ] 1000000000 min ] < ] ] 1000000000 min ]
[ map [ slice a b c ] [ partial1 [ reduce [ map [ range 0 [ min [ len e ] [ len f ] ] ] [ lambda1 [ if [ > [ deref e arg1 ] [ deref f arg1 ] ] 1 0 ] ] ] 0 + ] + ] ]
[ map [ range 0 [ + [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] 1 ] ] square ]
[ filter [ slice [ range 0 [ + a 1 ] ] 0 [ / [ len [ range 0 [ + a 1 ] ] ] 2 ] ] is_prime ]
[ reverse [ map a [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] + ] ] ]
[ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ reverse b ] ] ] [ deref [ reverse b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ reverse b ] ] ] [ deref [ reverse b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] ] ]
[ map [ filter [ range 0 [ len [ map [ digits a ] [ partial1 b - ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ map [ digits a ] [ partial1 b - ] ] int-deref ] ]
[ digits [ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ]
[ head [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c + ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ reduce [ reverse [ digits [ head [ map a square ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ map [ slice [ digits a ] [ / [ len [ digits a ] ] 2 ] [ len [ digits a ] ] ] [ partial0 2 * ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ filter [ range 1 a ] [ lambda1 [ reduce [ map [ slice b 0 [ / [ len b ] 2 ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ filter [ digits a ] [ partial1 [ reduce b 0 max ] > ] ]
[ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ partial1 [ head b ] * ] ]
[ reduce [ reverse [ digits [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ digits b ] ] ] [ deref [ digits b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ reverse [ digits [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map [ filter a [ partial1 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] < ] ] square ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter [ range 1 [ + [ strlen a ] 1 ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] d ] [ - [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] d ] ] ] ] ] ]
[ * [ reduce [ slice [ sort a ] 0 b ] 0 + ] [ strlen c ] ]
[ deref [ sort [ filter a [ partial1 b < ] ] ] [ / [ len [ filter a [ partial1 b < ] ] ] 2 ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ map c [ partial1 b - ] ] square ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ map [ map c [ partial1 b - ] ] square ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ map a [ partial1 [ max c b ] - ] ] [ combine ! is_prime ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 [ deref c [ / [ len c ] 2 ] ] > ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ filter [ slice [ filter a [ partial1 b < ] ] 0 [ / [ len [ filter a [ partial1 b < ] ] ] 2 ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ deref [ sort [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ] [ / [ len [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ] 2 ] ]
[ filter [ filter [ digits a ] is_prime ] [ partial1 b < ] ]
[ map [ map [ filter a [ partial1 b > ] ] [ partial1 c - ] ] [ partial1 d * ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ len [ slice b [ / [ len b ] 2 ] [ len b ] ] ] ] 0 + ]
[ digits [ head [ slice a b c ] ] ]
[ reverse [ map a [ partial1 [ max c b ] * ] ] ]
[ digits [ strlen a ] ]
[ reduce [ range 0 [ + [ reduce [ range 0 [ + [ reduce [ slice [ sort a ] 0 b ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ floor [ sqrt [ + [ * [ - a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] ] [ - a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] ] ] [ * [ - b [ reduce d 0 max ] ] [ - b [ reduce d 0 max ] ] ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ filter a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] < ] ] 0 + ]
[ slice a b [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ]
[ filter [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ / [ reduce a 0 + ] [ len a ] ] * ] ] ] ] ]
[ reduce [ range 0 [ + [ reduce [ filter [ map a [ partial1 b * ] ] [ partial0 [ reduce [ map a [ partial1 b * ] ] 1000000000 min ] < ] ] 1000000000 min ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ map [ filter [ range 0 [ len [ map [ slice a b c ] [ partial1 d + ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ map [ slice a b c ] [ partial1 d + ] ] int-deref ] ]
[ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len [ digits b ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ digits b ] arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ reduce [ range 0 [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] 0 max ]
[ - [ reduce [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reverse [ map a [ partial1 b + ] ] ]
[ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len [ reverse b ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ reverse b ] arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ / [ reduce [ slice a [ / [ len a ] 2 ] [ len a ] ] 0 + ] [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ head [ map a [ partial1 b - ] ] ]
[ reverse [ map [ map a [ partial1 b * ] ] [ partial1 c * ] ] ]
[ digits [ deref [ sort [ slice a 0 [ / [ len a ] 2 ] ] ] [ / [ len [ slice a 0 [ / [ len a ] 2 ] ] ] 2 ] ] ]
[ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ slice d e c ] ] ] [ deref [ slice d e c ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ deref [ sort [ map a [ partial1 b - ] ] ] [ / [ len [ map a [ partial1 b - ] ] ] 2 ] ] ]
[ reduce [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] 0 [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] ] 1000000000 min ]
[ range 1 [ reduce [ reverse a ] 1000000000 min ] ]
[ reverse [ slice [ map a [ partial1 b - ] ] 0 [ / [ len [ map a [ partial1 b - ] ] ] 2 ] ] ]
[ slice [ reverse a ] [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] c ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ slice [ map [ filter a [ combine ! is_prime ] ] square ] [ / [ len [ map [ filter a [ combine ! is_prime ] ] square ] ] 2 ] [ len [ map [ filter a [ combine ! is_prime ] ] square ] ] ]
[ map [ filter a [ partial1 b > ] ] [ partial1 [ strlen c ] - ] ]
[ + [ * [ - a [ reduce [ filter c [ partial0 [ reduce c 1000000000 min ] < ] ] 1000000000 min ] ] [ - a [ reduce [ filter c [ partial0 [ reduce c 1000000000 min ] < ] ] 1000000000 min ] ] ] [ * [ - b [ strlen d ] ] [ - b [ strlen d ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map c [ partial1 b * ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map c [ partial1 b * ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ digits [ max a b ] ] 0 max ]
[ reverse [ digits [ deref [ sort a ] [ / [ len a ] 2 ] ] ] ]
[ map [ slice a b c ] [ partial1 [ reduce [ reverse [ digits e ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] - ] ]
[ reduce [ range 0 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ slice e b c ] ] ] [ deref [ slice e b c ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ head [ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ partial0 2 * ] ] ]
[ floor [ sqrt [ + [ * [ - [ reduce [ slice [ sort a ] 0 b ] 0 + ] d ] [ - [ reduce [ slice [ sort a ] 0 b ] 0 + ] d ] ] [ * [ - c [ strlen e ] ] [ - c [ strlen e ] ] ] ] ] ]
[ filter [ slice a 0 [ / [ len a ] 2 ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ map [ map [ range 0 a ] [ partial1 b - ] ] square ]
[ slice a b [ reduce [ filter c [ partial0 [ reduce c 0 max ] > ] ] 0 max ] ]
[ <= [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ map c [ partial1 b - ] ] ] ] [ deref [ map c [ partial1 b - ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ filter [ digits [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] [ combine ! is_prime ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map [ map a [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] + ] ] [ partial0 2 * ] ]
[ reduce [ filter [ filter [ slice a b c ] [ lambda1 [ reduce [ map e [ partial0 arg1 == ] ] false || ] ] ] [ partial0 [ reduce [ filter [ slice a b c ] [ lambda1 [ reduce [ map e [ partial0 arg1 == ] ] false || ] ] ] 0 max ] > ] ] 0 max ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ filter [ range 1 [ + [ reduce a 0 max ] 1 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ map a [ partial1 [ reduce b 1000000000 min ] * ] ]
[ map [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] square ]
[ reduce [ range 0 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ digits b ] ] ] [ deref [ digits b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ map [ slice [ map a [ partial1 b * ] ] [ / [ len [ map a [ partial1 b * ] ] ] 2 ] [ len [ map a [ partial1 b * ] ] ] ] [ partial1 c * ] ]
[ digits [ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ]
[ reduce [ slice [ reverse [ sort [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] ] ] 0 d ] 0 + ]
[ floor [ sqrt [ + [ * [ - [ min a b ] d ] [ - [ min a b ] d ] ] [ * [ - c [ head e ] ] [ - c [ head e ] ] ] ] ] ]
[ filter [ filter a [ partial1 b > ] ] [ partial1 [ reduce [ filter c [ partial0 [ reduce c 0 max ] > ] ] 0 max ] < ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ floor [ sqrt [ + [ * [ - a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] ] [ - a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] ] ] [ * [ - b [ reduce [ filter d [ partial0 [ reduce d 1000000000 min ] < ] ] 1000000000 min ] ] [ - b [ reduce [ filter d [ partial0 [ reduce d 1000000000 min ] < ] ] 1000000000 min ] ] ] ] ] ]
[ + [ * [ - [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] d ] [ - [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] d ] ] [ * [ - c [ reduce [ reverse [ digits e ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ - c [ reduce [ reverse [ digits e ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ filter [ range 0 [ len b ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 b int-deref ] ] square ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map [ map [ filter [ range 0 [ len b ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 b int-deref ] ] square ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial1 b > ] ]
[ reduce [ range 0 [ + [ min a [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ filter a [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] > ] ]
[ map [ filter [ range 0 [ len [ slice [ slice a b c ] [ / [ len [ slice a b c ] ] 2 ] [ len [ slice a b c ] ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ slice [ slice a b c ] [ / [ len [ slice a b c ] ] 2 ] [ len [ slice a b c ] ] ] int-deref ] ]
[ filter [ map [ filter [ range 0 [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ slice a [ / [ len a ] 2 ] [ len a ] ] int-deref ] ] is_prime ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ filter [ range 1 a ] [ lambda1 [ reduce [ map [ map b [ partial0 2 * ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ slice [ range 1 a ] [ / [ len [ range 1 a ] ] 2 ] [ len [ range 1 a ] ] ] 1000000000 min ]
[ * a [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] ]
[ slice [ map a square ] b [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] c ] ]
[ reverse [ filter [ range 0 [ + a 1 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ map [ range 0 [ min [ len [ filter a [ lambda1 [ reduce [ map [ range 0 [ + b 1 ] ] [ partial0 arg1 == ] ] false || ] ] ] ] [ len c ] ] ] [ lambda1 [ if [ < [ deref [ filter a [ lambda1 [ reduce [ map [ range 0 [ + b 1 ] ] [ partial0 arg1 == ] ] false || ] ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ range 0 [ + [ reduce [ reverse [ digits [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ is_sorted [ map a [ partial1 b * ] ] ]
[ map [ reverse a ] [ partial1 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] * ] ]
[ filter [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ]
[ range 0 [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ]
[ filter [ range 0 [ + [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] is_prime ]
[ range 1 [ + [ * a b ] 1 ] ]
[ reduce [ slice [ reverse [ sort [ map a [ partial1 b - ] ] ] ] 0 [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ] 0 + ]
[ <= [ head [ slice a [ / [ len a ] 2 ] [ len a ] ] ] b ]
[ digits [ * a [ head b ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ slice [ filter [ filter a is_prime ] [ partial1 b < ] ] 0 [ / [ len [ filter [ filter a is_prime ] is_prime ] ] 2 ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ filter [ range 0 [ len [ slice d b c ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ slice d b c ] int-deref ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ map [ filter [ range 0 [ len [ slice d b c ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ slice d b c ] int-deref ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ reduce [ map [ range 0 [ + b 1 ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ <= [ - [ reduce [ range 0 [ + a 1 ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 0 ]
[ slice a [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] ]
[ reduce [ reverse [ digits [ deref [ sort a ] [ / [ len a ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map [ filter [ filter a [ partial1 b < ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ]
[ min [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] b ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter d [ lambda1 [ reduce [ map [ slice d b c ] [ partial0 arg1 == ] ] false || ] ] ] ] ] [ deref [ filter d [ lambda1 [ reduce [ map [ slice d b c ] [ partial0 arg1 == ] ] false || ] ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ map [ filter [ range 0 [ len [ map [ filter [ range 0 [ len [ digits a ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ digits a ] int-deref ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ map [ filter [ range 0 [ len [ digits a ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ digits a ] int-deref ] ] int-deref ] ]
[ reduce [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 b < ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ floor [ sqrt [ + [ * [ - [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ] c ] [ - [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ] c ] ] [ * [ - [ reduce b 1000000000 min ] d ] [ - [ reduce b 1000000000 min ] d ] ] ] ] ]
[ filter [ slice [ digits a ] [ / [ len [ digits a ] ] 2 ] [ len [ digits a ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ map [ map a [ partial1 [ head b ] + ] ] [ partial0 2 * ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ range 0 [ + [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ reduce [ range 0 [ + [ reduce [ reverse a ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ - [ reduce [ slice a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ slice [ sort [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 0 [ deref [ sort b ] [ / [ len b ] 2 ] ] ] 0 + ]
[ range 1 [ + [ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ]
[ slice [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] c [ head d ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ reduce [ range 0 [ + [ max a [ strlen b ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ reduce [ slice [ sort a ] 0 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] ] 0 + ]
[ deref [ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] [ / [ len [ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] 2 ] ]
[ reverse [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] ]
[ slice [ reverse a ] 0 [ / [ len [ reverse a ] ] 2 ] ]
[ filter [ slice [ range 0 [ + a 1 ] ] [ / [ len [ range 0 [ + a 1 ] ] ] 2 ] [ len [ range 0 [ + a 1 ] ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ slice a 0 [ / [ len a ] 2 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ map b [ partial0 2 * ] ] ] ] [ deref [ map b [ partial0 2 * ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ filter [ range 0 [ head a ] ] [ partial1 b > ] ]
[ reduce [ filter [ filter a [ partial1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 b + ] ] ] ] > ] ] [ partial0 [ reduce [ filter a [ partial1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 b + ] ] ] ] > ] ] 0 max ] > ] ] 0 max ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ range 0 [ + [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ min a [ strlen b ] ] ]
[ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ reduce [ slice [ reverse [ sort d ] ] 0 [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 d * ] ] ] ] ] ] 0 + ] ] [ - b [ reduce [ slice [ reverse [ sort d ] ] 0 e ] 0 + ] ] ] ]
[ reduce [ reverse [ digits [ reduce [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1000000000 min ] < ] ] 1000000000 min ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ digits [ reduce [ slice [ sort a ] 0 b ] 0 + ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ + [ * [ - a c ] [ - a c ] ] [ * [ - [ deref [ sort b ] [ / [ len b ] 2 ] ] d ] [ - [ deref [ sort b ] [ / [ len b ] 2 ] ] d ] ] ] ]
[ * a [ reduce [ filter [ slice e b c ] [ partial0 [ reduce [ slice e b c ] 0 max ] > ] ] 0 max ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ slice [ reverse [ sort [ range 1 a ] ] ] 0 b ] 0 + ] ]
[ map [ map a square ] [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] + ] ]
[ range 0 [ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ]
[ filter [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] square ] 0 max ]
[ slice [ filter [ reverse a ] [ partial1 b > ] ] [ / [ len [ filter [ reverse a ] [ partial1 b > ] ] ] 2 ] [ len [ filter [ reverse a ] [ partial1 b > ] ] ] ]
[ reduce [ map [ range 0 [ len [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] ] ] [ lambda1 [ == [ deref [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] arg1 ] [ deref [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] [ - [ - [ len [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ reduce [ map a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] - ] ] 0 max ]
[ slice [ map [ reverse a ] [ partial1 b + ] ] 0 [ / [ len [ map [ reverse a ] [ partial1 b + ] ] ] 2 ] ]
[ map [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] square ]
[ reduce [ map [ range 0 [ min [ len [ map [ map a square ] [ partial1 b * ] ] ] [ len c ] ] ] [ lambda1 [ if [ > [ deref [ map [ map a square ] [ partial1 b * ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reduce [ slice [ sort a ] 0 [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ]
[ digits [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] ]
[ reduce [ slice a 0 [ / [ len a ] 2 ] ] 0 max ]
[ floor [ sqrt [ + [ * [ - [ deref [ sort a ] [ / [ len a ] 2 ] ] c ] [ - [ deref [ sort a ] [ / [ len a ] 2 ] ] c ] ] [ * [ - b [ floor [ sqrt [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] [ - b [ floor [ sqrt [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] ] ] ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ range 0 [ + [ reduce [ range 0 [ + [ head a ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ slice [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 0 [ / [ len [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] 2 ] ]
[ map [ digits [ deref [ sort a ] [ / [ len a ] 2 ] ] ] [ partial0 2 * ] ]
[ reduce [ range 0 [ + [ strlen [ reduce a "" str_concat ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ range 0 [ len [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial1 b * ] ] ] ] [ lambda1 [ == [ deref [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial1 b * ] ] arg1 ] [ deref [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial1 b * ] ] [ - [ - [ len [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial1 b * ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ reduce [ reverse [ digits [ reduce [ filter [ slice a b c ] [ partial0 [ reduce [ slice a b c ] 0 max ] > ] ] 0 max ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ range 0 [ min [ len [ reverse [ range 1 [ + a 1 ] ] ] ] [ len b ] ] ] [ lambda1 [ if [ < [ deref [ reverse [ range 1 [ + a 1 ] ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ filter [ filter a [ partial1 b < ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ combine ! is_prime ] ]
[ reduce [ reverse [ digits [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 max ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ is_sorted [ filter a [ partial1 [ deref b [ / [ len b ] 2 ] ] > ] ] ]
[ head [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ slice e b c ] [ partial0 2 * ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map [ slice e b c ] [ partial0 2 * ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ map [ reverse [ range 0 [ + a 1 ] ] ] square ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ max a [ reduce [ reverse [ digits [ deref c [ / [ len c ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ map [ range 0 [ len [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] [ lambda1 [ == [ deref [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] arg1 ] [ deref [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ - [ - [ len [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ deref [ sort [ map [ range 0 [ + a 1 ] ] square ] ] [ / [ len [ map [ range 0 [ + a 1 ] ] square ] ] 2 ] ]
[ reduce [ range 0 [ + [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ strlen d ] ] [ - b [ strlen d ] ] ] ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ slice a b c ] 1000000000 min ] ]
[ reduce [ reverse [ digits [ max a [ reduce [ slice [ reverse [ sort c ] ] 0 b ] 0 + ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ min [ deref [ sort a ] [ / [ len a ] 2 ] ] [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ reduce [ map [ range 0 [ len [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] ] ] [ lambda1 [ == [ deref [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] arg1 ] [ deref [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] [ - [ - [ len [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ min [ deref a [ / [ len a ] 2 ] ] [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ reverse [ map [ digits a ] [ partial0 2 * ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ strlen a ]
[ reverse [ filter [ range 1 [ + a 1 ] ] [ partial1 b < ] ] ]
[ filter a [ partial1 [ strlen b ] > ] ]
[ < a [ deref b [ / [ len b ] 2 ] ] ]
[ filter [ slice [ range 1 [ + a 1 ] ] [ / [ len [ range 1 [ + a 1 ] ] ] 2 ] [ len [ range 1 [ + a 1 ] ] ] ] [ partial1 b < ] ]
[ reduce [ reverse [ digits [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ - [ reduce d 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] [ - b [ - [ reduce d 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ + [ min a b ] [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] ]
[ map [ filter [ range 0 [ + a 1 ] ] [ partial1 b < ] ] [ partial1 c * ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len [ range 0 b ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ range 0 b ] arg1 ] ] 1 0 ] ] ] 0 + ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ floor [ sqrt [ + [ * [ - [ deref a [ / [ len a ] 2 ] ] c ] [ - [ deref a [ / [ len a ] 2 ] ] c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ]
[ reduce [ filter [ reverse a ] [ partial1 b < ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ filter [ map [ reverse a ] square ] [ partial0 [ reduce [ map [ reverse a ] square ] 0 max ] > ] ] 0 max ]
[ slice a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] c ]
[ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len a ] [ len [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ filter [ range 0 [ + [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ reverse [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len [ digits a ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ digits a ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] > ] ]
[ < [ reduce [ slice [ reverse [ sort [ map a [ partial1 b - ] ] ] ] 0 c ] 0 + ] 0 ]
[ digits [ reduce [ range 0 [ + [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len [ reverse a ] ] [ len b ] ] ] [ lambda1 [ if [ < [ deref [ reverse a ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ + [ * [ - a [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] d ] ] [ - a [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] d ] ] ] [ * [ - [ + c b ] e ] [ - [ + c b ] e ] ] ]
[ map [ map [ filter [ range 0 [ len [ digits a ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ digits a ] int-deref ] ] [ partial1 b + ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ + [ * [ - [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] [ - [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] ] [ * [ - b [ head d ] ] [ - b [ head d ] ] ] ]
[ reduce [ map [ range 0 [ len [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ] ] ] [ lambda1 [ == [ deref [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ] arg1 ] [ deref [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ] [ - [ - [ len [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ reduce [ map [ range 0 [ min [ len [ map a [ partial0 2 * ] ] ] [ len [ map b [ partial0 2 * ] ] ] ] ] [ lambda1 [ if [ < [ deref [ map a [ partial0 2 * ] ] arg1 ] [ deref [ map b [ partial0 2 * ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ reverse [ reverse a ] ] [ partial1 b > ] ]
[ map [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] square ] [ partial1 b + ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ map b square ] ] ] [ deref [ map b square ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reverse [ map [ filter [ range 0 [ len [ filter a [ partial1 b < ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ filter a [ partial1 b < ] ] int-deref ] ] ]
[ slice [ digits [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] [ / [ len [ digits [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] ] 2 ] [ len [ digits [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] ] ]
[ slice [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 0 [ / [ len [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] 2 ] ]
[ reduce [ map [ range 0 [ min [ len [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] [ len c ] ] ] [ lambda1 [ if [ < [ deref [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ combine ! is_prime ] ]
[ slice a [ strlen b ] c ]
[ slice a [ - [ reduce [ slice e b c ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] e ]
[ reduce [ slice [ sort a ] 0 [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len [ filter a [ partial1 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] > ] ] ] [ len c ] ] ] [ lambda1 [ if [ < [ deref [ filter a [ partial1 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] < ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ digits [ reduce [ slice [ sort [ filter a [ partial1 b > ] ] ] 0 c ] 0 + ] ]
[ filter [ filter a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] > ] ] is_prime ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ filter [ range 0 [ len [ slice a b c ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ slice a b c ] int-deref ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len e ] ] [ deref e arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ slice [ sort [ map a [ partial1 [ max c b ] - ] ] ] 0 d ] 0 + ]
[ < [ reduce [ range 0 a ] 0 max ] b ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ range 0 [ + [ reduce a 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ reduce [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ filter [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] square ] [ combine ! is_prime ] ]
[ reverse [ slice a [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] c ] ]
[ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len a ] [ len [ slice e b c ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ slice e b c ] arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ]
[ reduce [ slice [ sort a ] 0 [ reduce [ filter c [ partial1 b > ] ] 0 max ] ] 0 + ]
[ map [ slice [ slice a b c ] e f ] square ]
[ reduce [ reverse [ digits [ reduce [ range 0 [ + [ + a b ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ * [ reduce [ slice [ sort a ] 0 b ] 0 + ] [ + [ * [ - f c ] [ - f c ] ] [ * [ - g d ] [ - g d ] ] ] ]
[ map [ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b + ] ] [ partial0 2 * ] ]
[ map [ range 0 [ reduce a 0 max ] ] square ]
[ strlen a ]
[ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ slice [ sort a ] 0 [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ digits [ head [ slice a b c ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ map [ map [ slice a 0 [ / [ len a ] 2 ] ] square ] [ partial0 2 * ] ]
[ reverse [ map [ digits a ] [ partial0 2 * ] ] ]
[ filter [ range 0 [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ floor [ sqrt [ + [ * [ - a [ reduce [ map [ range 0 [ min [ len c ] [ len d ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ] ] [ - a [ reduce [ map [ range 0 [ min [ len c ] [ len d ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ] ] ] [ * [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g i ] [ - g i ] ] ] ] [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g i ] [ - g i ] ] ] ] ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] * ] ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ reverse [ digits [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map c [ partial1 [ strlen b ] - ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map c [ partial1 [ strlen b ] - ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ range 0 [ + [ head [ filter a [ partial1 b < ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ range 0 [ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ]
[ is_sorted [ map a [ partial1 b * ] ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ map [ reverse b ] square ] ] ] [ deref [ map [ reverse b ] square ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ filter [ slice [ digits a ] [ / [ len [ digits a ] ] 2 ] [ len [ digits a ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ slice [ reverse [ sort [ map a [ partial1 b - ] ] ] ] 0 [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ] 0 + ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ reverse [ digits [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ digits [ head [ filter a is_prime ] ] ]
[ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ]
[ reduce [ reverse [ digits [ reduce [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1000000000 min ] < ] ] 1000000000 min ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 [ reduce b 0 max ] + ] ]
[ deref [ sort [ slice a [ strlen b ] c ] ] [ / [ len [ slice a [ strlen b ] c ] ] 2 ] ]
[ reduce [ filter [ filter [ digits a ] [ partial1 b < ] ] [ partial0 [ reduce [ filter [ digits a ] [ partial1 b < ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ map [ map [ filter [ range 0 [ len [ map a [ partial0 2 * ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ map a [ partial0 2 * ] ] int-deref ] ] [ partial0 2 * ] ]
[ is_sorted [ slice [ reverse a ] b c ] ]
[ range 0 [ + a 1 ] ]
[ strlen a ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ filter [ slice b 0 [ / [ len b ] 2 ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ filter [ slice b 0 [ / [ len b ] 2 ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ deref [ sort [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] ]
[ reduce [ map [ range 0 [ min [ len [ filter a [ partial1 b < ] ] ] [ len [ reverse c ] ] ] ] [ lambda1 [ if [ < [ deref [ filter a [ partial1 b < ] ] arg1 ] [ deref [ reverse c ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ reverse [ digits [ deref [ sort [ map a square ] ] [ / [ len [ map a square ] ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reverse [ filter a [ lambda1 [ reduce [ map [ slice d b c ] [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ map a [ partial1 [ deref b [ / [ len b ] 2 ] ] + ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ digits [ head a ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map c [ partial1 b * ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map c [ partial1 b * ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 [ - [ reduce c 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] > ] ]
[ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ is_sorted [ slice [ reverse a ] b c ] ]
[ + [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] [ head c ] ]
[ - [ reduce [ slice [ reverse a ] b c ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ reverse [ map c [ partial1 b + ] ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ reverse [ map c [ partial1 b + ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ map [ reverse [ filter a [ partial1 b > ] ] ] [ partial1 c - ] ]
[ range 0 [ + a 1 ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] * ] ] ] ] ]
[ < [ - [ reduce [ slice a b c ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ]
[ filter [ filter a [ lambda1 [ reduce [ map [ digits b ] [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ slice [ range 0 a ] 0 [ / [ len [ range 0 a ] ] 2 ] ] [ partial1 b < ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ slice d b c ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ slice d b c ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ len a ] ]
[ filter [ map [ digits a ] [ partial0 2 * ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ slice [ sort a ] 0 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ]
[ digits [ head [ slice a b c ] ] ]
[ digits [ deref a [ / [ len a ] 2 ] ] ]
[ filter [ slice [ range 1 a ] [ / [ len [ range 1 a ] ] 2 ] [ len [ range 1 a ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ is_sorted [ slice [ reverse a ] b c ] ]
[ slice a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] ]
[ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] d ] [ - [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] d ] ] ] ] ]
[ filter [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ lambda1 [ reduce [ map [ slice b 0 [ / [ len b ] 2 ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ reverse [ filter [ filter a [ partial1 b < ] ] [ combine ! is_prime ] ] ]
[ filter [ filter a [ partial1 [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] > ] ] is_prime ]
[ reduce [ slice [ sort a ] 0 [ reduce [ slice [ reverse [ sort c ] ] 0 b ] 0 + ] ] 0 + ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ filter a [ lambda1 [ reduce [ map [ filter b is_prime ] [ partial0 arg1 == ] ] false || ] ] ] 1000000000 min ]
[ len [ filter a [ partial1 [ deref b [ / [ len b ] 2 ] ] < ] ] ]
[ floor [ sqrt [ + [ * [ - [ strlen a ] c ] [ - [ strlen a ] c ] ] [ * [ - b [ reduce [ reverse [ digits d ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ - b [ reduce [ reverse [ digits d ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] ] ] ]
[ range 1 [ * a [ head b ] ] ]
[ filter [ reverse [ reverse a ] ] [ combine ! is_prime ] ]
[ reduce [ filter [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 [ reduce [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ max [ reduce [ map [ range 0 [ min [ len [ reverse a ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ reverse a ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] d ]
[ digits [ - [ reduce [ filter a [ partial1 b > ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ range 0 [ reduce [ slice [ sort [ range 0 a ] ] 0 b ] 0 + ] ]
[ max [ reduce [ slice [ sort a ] 0 b ] 0 + ] [ reduce [ slice [ sort c ] 0 d ] 0 + ] ]
[ reverse [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ range 0 [ + a 1 ] ]
[ map [ range 0 [ + [ / [ reduce a 0 + ] [ len a ] ] 1 ] ] square ]
[ map [ slice [ map a [ partial1 b + ] ] 0 [ / [ len [ map a [ partial1 b + ] ] ] 2 ] ] [ partial1 c + ] ]
[ digits [ reduce [ range 0 [ + [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ range 0 [ + [ head [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 1 ] ]
[ map [ range 0 [ + a 1 ] ] square ]
[ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ reverse [ digits [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ slice [ sort [ reverse [ range 1 a ] ] ] 0 b ] 0 + ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map [ map [ filter [ range 0 [ len [ filter a [ partial1 b > ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ filter a [ partial1 b > ] ] int-deref ] ] [ partial0 2 * ] ]
[ range 0 [ strlen [ reduce a "" str_concat ] ] ]
[ filter a [ lambda1 [ reduce [ map [ slice d b c ] [ partial0 arg1 == ] ] false || ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] + ] ] ] ]
[ reduce [ range 0 [ + [ head [ filter a [ partial1 b < ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ filter [ filter a [ lambda1 [ reduce [ map [ slice d b c ] [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map e [ partial0 arg1 == ] ] false || ] ] ]
[ filter [ filter [ filter a [ partial1 b < ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] [ partial1 d < ] ]
[ range 0 [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ map [ reverse a ] [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] * ] ]
[ digits [ reduce [ map [ range 0 [ min [ len [ slice a b c ] ] [ len e ] ] ] [ lambda1 [ if [ > [ deref [ slice a b c ] arg1 ] [ deref e arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ range 1 [ len a ] ]
[ filter [ range 0 [ + a 1 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ map a [ partial1 [ head [ filter c [ partial1 b < ] ] ] - ] ]
[ map [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial0 2 * ] ] [ partial0 2 * ] ]
[ digits [ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] ] ] ]
[ head [ filter a [ lambda1 [ reduce [ map [ filter b [ combine ! is_prime ] ] [ partial0 arg1 == ] ] false || ] ] ] ]
[ filter [ range 1 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ combine ! is_prime ] ]
[ filter a [ partial1 [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] > ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map [ slice a [ / [ len a ] 2 ] [ len a ] ] square ]
[ map [ map [ slice a 0 [ / [ len a ] 2 ] ] square ] [ partial0 2 * ] ]
[ filter [ filter [ range 0 [ + a 1 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reduce [ filter [ range 1 [ + a 1 ] ] [ partial0 [ reduce [ range 1 [ + a 1 ] ] 0 max ] > ] ] 0 max ]
[ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - [ deref [ sort b ] [ / [ len b ] 2 ] ] [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] d ] ] [ - [ deref [ sort b ] [ / [ len b ] 2 ] ] [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] d ] ] ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ map a [ partial0 2 * ] ] 1000000000 min ] ]
[ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ partial1 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] > ] ]
[ reverse [ map [ range 0 [ + a 1 ] ] square ] ]
[ filter a [ partial1 [ strlen b ] > ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ map [ reverse [ slice a b c ] ] [ partial1 e * ] ]
[ reduce [ filter [ map [ filter [ range 0 [ len [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ map a [ partial0 2 * ] ] int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 max ]
[ reduce [ slice [ range 1 a ] [ / [ len [ range 1 a ] ] 2 ] [ len [ range 1 a ] ] ] 0 max ]
[ filter [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] > ] ]
[ slice [ filter a is_prime ] [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] d ]
[ reduce [ range 1 [ + a 1 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ reverse b ] ] ] [ deref [ reverse b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reverse [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ]
[ reduce [ range 0 [ + [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ digits [ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ strlen a ]
[ max [ reduce [ map [ range 0 [ min [ len a ] [ len [ map b [ partial0 2 * ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map b [ partial0 2 * ] ] arg1 ] ] 1 0 ] ] ] 0 + ] d ]
[ reduce [ filter [ filter a [ combine ! is_prime ] ] [ partial0 [ reduce [ filter a [ combine ! is_prime ] ] 0 max ] > ] ] 0 max ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ map c [ partial1 b - ] ] ] ] [ deref [ map c [ partial1 b - ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ map a [ partial1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] - ] ]
[ range 1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] ]
[ slice a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ]
[ is_sorted [ map a [ partial1 [ reduce b 0 max ] + ] ] ]
[ map [ slice [ digits a ] [ / [ len [ digits a ] ] 2 ] [ len [ digits a ] ] ] [ partial0 2 * ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ reduce [ digits [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 1000000000 min ]
[ digits [ strlen a ] ]
[ reduce [ reverse [ digits [ deref [ sort a ] [ / [ len a ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ slice a [ strlen b ] [ reduce c 0 max ] ]
[ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial1 [ head b ] - ] ]
[ floor [ sqrt [ + [ * [ - a [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] [ - a [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] ] [ * [ - b [ head d ] ] [ - b [ head d ] ] ] ] ] ]
[ map [ range 1 [ + [ deref a [ / [ len a ] 2 ] ] 1 ] ] [ partial0 2 * ] ]
[ reverse [ slice a b [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ] ]
[ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ combine ! is_prime ] ]
[ reduce [ slice [ reverse [ sort [ slice [ filter a [ partial1 b < ] ] [ / [ len [ filter a [ partial1 b < ] ] ] 2 ] [ len [ filter a [ partial1 b < ] ] ] ] ] ] 0 c ] 0 + ]
[ filter [ slice [ slice a b c ] 0 [ / [ len [ slice a b c ] ] 2 ] ] [ partial1 e > ] ]
[ < [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ slice d b c ] ] ] [ deref [ slice d b c ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ slice [ reverse a ] 0 [ / [ len [ reverse a ] ] 2 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reverse [ digits [ deref [ sort a ] [ / [ len a ] 2 ] ] ] ]
[ deref [ sort [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] square ] ] [ / [ len [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] square ] ] 2 ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reverse [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] ]
[ digits [ reduce [ map [ range 0 [ min [ len [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ len [ slice [ map a square ] 0 [ / [ len [ map a square ] ] 2 ] ] ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ < a [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] ]
[ min [ deref a [ / [ len a ] 2 ] ] [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ reduce [ range 0 [ + [ strlen [ reduce a "z" str_min ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ reverse [ map [ range 0 [ + a 1 ] ] [ partial1 b + ] ] ]
[ reduce [ reverse [ digits [ reduce [ reverse [ digits [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ filter [ map [ filter [ range 0 [ len [ reverse a ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ reverse a ] int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ slice [ sort a ] 0 [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ]
[ map [ filter [ slice a b c ] [ partial1 d < ] ] [ partial0 2 * ] ]
[ reduce [ range 0 [ + [ - [ reduce [ reverse a ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ digits [ head [ slice a b c ] ] ]
[ reduce [ map [ range 0 [ len [ filter [ map a [ partial1 b * ] ] [ partial1 c > ] ] ] ] [ lambda1 [ == [ deref [ filter [ map a [ partial1 b * ] ] [ partial1 c > ] ] arg1 ] [ deref [ filter [ map a [ partial1 b * ] ] [ partial1 c > ] ] [ - [ - [ len [ filter [ map a [ partial1 b * ] ] [ partial1 c > ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ reduce [ slice [ sort [ reverse [ range 1 a ] ] ] 0 b ] 0 + ]
[ reduce [ map [ range 0 [ min [ len [ filter a [ partial1 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] > ] ] ] [ len c ] ] ] [ lambda1 [ if [ < [ deref [ filter a [ partial1 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] > ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len [ map a [ partial1 b + ] ] ] [ len c ] ] ] [ lambda1 [ if [ < [ deref [ map a [ partial1 b + ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ filter [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] is_prime ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ filter [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] is_prime ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ map a [ partial1 [ head [ digits b ] ] * ] ]
[ digits [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ deref [ sort a ] [ / [ len a ] 2 ] ] ]
[ reduce [ map [ filter [ range 0 [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ slice a [ / [ len a ] 2 ] [ len a ] ] int-deref ] ] 0 max ]
[ map [ range 1 [ + a 1 ] ] [ partial1 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] - ] ]
[ reduce [ slice [ slice a b c ] [ / [ len [ slice a b c ] ] 2 ] [ len [ slice a b c ] ] ] 0 max ]
[ reverse [ slice [ filter a [ partial1 b < ] ] c d ] ]
[ floor [ sqrt [ + [ * [ - a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] ] [ - a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] ] ] [ * [ - b [ strlen d ] ] [ - b [ strlen d ] ] ] ] ] ]
[ reduce [ range 1 [ + [ + a b ] 1 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ slice a [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] b ] [ reduce [ map [ range 0 [ min [ len d ] [ len e ] ] ] [ lambda1 [ if [ < [ deref d arg1 ] [ deref e arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ head [ slice a 0 [ / [ len a ] 2 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ slice [ sort a ] 0 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ]
[ slice a [ min c b ] [ + d e ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ len [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] ]
[ head [ filter a [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] > ] ] ]
[ strlen a ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ deref [ digits [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ] [ / [ len [ digits [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ] ] 2 ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ filter [ map [ filter [ range 0 [ len b ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 b int-deref ] ] is_prime ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ filter [ map [ filter [ range 0 [ len b ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 b int-deref ] ] is_prime ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ len [ filter [ map a [ partial1 b - ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] ] [ lambda1 [ == [ deref [ filter [ map a [ partial1 b - ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] arg1 ] [ deref [ filter [ map a [ partial1 b - ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ - [ - [ len [ filter [ map a [ partial1 b - ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ deref [ filter a [ partial1 b > ] ] [ / [ len [ filter a [ partial1 b > ] ] ] 2 ] ] ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ range 0 [ deref [ filter a [ partial1 b < ] ] [ / [ len [ filter a [ partial1 b < ] ] ] 2 ] ] ]
[ reduce [ slice a b [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] 0 max ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ + [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] b ] ]
[ map a [ partial1 [ head [ filter b is_prime ] ] + ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ range 0 [ + [ head a ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ map [ filter [ filter a is_prime ] [ partial1 b < ] ] square ]
[ range 0 [ + [ reduce [ slice [ reverse [ sort [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] ] ] 0 b ] 0 + ] 1 ] ]
[ slice [ reverse [ range 1 a ] ] [ / [ len [ reverse [ range 1 a ] ] ] 2 ] [ len [ reverse [ range 1 a ] ] ] ]
[ reduce [ map [ range 0 [ len [ filter [ map a [ partial1 b - ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] ] [ lambda1 [ == [ deref [ filter [ map a [ partial1 b - ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] arg1 ] [ deref [ filter [ map a [ partial1 b - ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ - [ - [ len [ filter [ map a [ partial1 b - ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ filter a [ combine ! is_prime ] ]
[ + [ * [ - [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] [ - [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] ] [ * [ - b [ reduce [ slice [ sort d ] 0 e ] 0 + ] ] [ - b [ reduce [ slice [ sort d ] 0 e ] 0 + ] ] ] ]
[ reduce [ reverse [ digits [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter a [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] > ] ] 1000000000 min ]
[ map [ filter [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] is_prime ] [ partial0 2 * ] ]
[ reduce [ range 0 [ + [ reduce [ map a square ] 0 max ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ reverse [ map a [ partial1 [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] - ] ] ]
[ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ partial1 [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ]
[ reduce [ range 0 [ + [ reduce [ filter [ range 0 [ + a 1 ] ] [ partial0 [ reduce [ range 0 [ + a 1 ] ] 0 max ] > ] ] 0 max ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ floor [ sqrt [ + [ * [ - a [ - [ reduce d 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] [ - a [ - [ reduce d 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] ] [ * [ - [ min c b ] e ] [ - [ min c b ] e ] ] ] ] ]
[ filter [ slice a b c ] [ partial1 [ - [ reduce d 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] < ] ]
[ reduce [ slice a b c ] 1000000000 min ]
[ reduce [ reverse [ digits [ + [ * [ - a [ strlen c ] ] [ - a [ strlen c ] ] ] [ * [ - b d ] [ - b d ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ + [ * [ - [ max a b ] d ] [ - [ max a b ] d ] ] [ * [ - c [ head e ] ] [ - c [ head e ] ] ] ]
[ digits [ - [ reduce [ filter a [ partial1 b > ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] ] ] ]
[ filter [ filter [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ]
[ reduce [ map a [ partial1 [ strlen b ] - ] ] 0 max ]
[ reduce [ slice [ sort [ map a [ partial1 b * ] ] ] 0 [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 + ]
[ digits [ deref a [ / [ len a ] 2 ] ] ]
[ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len a ] [ len [ slice e b c ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ slice e b c ] arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ digits [ reduce [ range 0 [ + [ / [ reduce a 0 + ] [ len a ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ map [ map a [ partial1 b + ] ] [ partial1 [ reduce [ slice [ sort c ] 0 d ] 0 + ] - ] ]
[ filter a [ lambda1 [ reduce [ map [ slice d [ min c b ] d ] [ partial0 arg1 == ] ] false || ] ] ]
[ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ reverse [ filter a is_prime ] ] 1000000000 min ]
[ map a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] - ] ]
[ <= [ deref [ reverse a ] [ / [ len [ reverse a ] ] 2 ] ] 1 ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ range 1 [ + [ reduce [ reverse [ digits [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ]
[ digits [ * a [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] ] ]
[ slice [ filter a [ partial1 b < ] ] 0 [ / [ len [ filter a [ partial1 b < ] ] ] 2 ] ]
[ map a [ partial1 [ reduce [ reverse [ digits [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] b ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] + ] ]
[ is_sorted [ filter [ map a square ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ]
[ < [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ deref [ sort a ] [ / [ len a ] 2 ] ] ] 1 ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ head [ map [ map a [ partial1 b - ] ] [ partial0 2 * ] ] ]
[ reduce [ slice a 0 [ / [ len a ] 2 ] ] 1000000000 min ]
[ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 [ deref c [ / [ len c ] 2 ] ] > ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ filter a is_prime ] 0 max ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ map [ range 0 [ min [ len [ map a [ partial1 b - ] ] ] [ len c ] ] ] [ lambda1 [ if [ > [ deref [ map a [ partial1 b - ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ reduce [ range 0 [ + [ min a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ slice [ reverse a ] [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] c ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ reverse [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ filter [ filter a [ lambda1 [ reduce [ map [ map b [ partial0 2 * ] ] [ partial0 arg1 == ] ] false || ] ] ] [ combine ! is_prime ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ head [ map a [ partial1 [ strlen b ] * ] ] ]
[ slice a [ reduce [ slice [ sort c ] 0 b ] 0 + ] [ strlen d ] ]
[ range 0 [ + [ reduce [ slice [ reverse [ sort [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] ] 0 b ] 0 + ] 1 ] ]
[ reduce [ map [ range 0 [ min [ len [ reverse a ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ reverse a ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ map [ slice [ digits a ] [ / [ len [ digits a ] ] 2 ] [ len [ digits a ] ] ] [ partial0 2 * ] ]
[ * a [ deref [ sort [ filter b [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] [ / [ len [ filter b [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] 2 ] ] ]
[ map a [ partial1 b - ] ]
[ floor [ sqrt [ + [ * [ - a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] ] [ - a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] ] ] [ * [ - b [ reduce d 0 max ] ] [ - b [ reduce d 0 max ] ] ] ] ] ]
[ reduce [ map [ range 0 [ len [ map [ filter a [ partial1 b < ] ] [ partial1 c - ] ] ] ] [ lambda1 [ == [ deref [ map [ filter a [ partial1 b < ] ] [ partial1 c - ] ] arg1 ] [ deref [ map [ filter a [ partial1 b < ] ] [ partial1 c - ] ] [ - [ - [ len [ map [ filter a [ partial1 b < ] ] [ partial1 c - ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ reduce [ map [ range 0 [ min [ len [ range 0 a ] ] [ len [ filter c [ partial1 b < ] ] ] ] ] [ lambda1 [ if [ < [ deref [ range 0 a ] arg1 ] [ deref [ filter c [ partial1 b < ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ range 1 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ]
[ range 1 [ head a ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reverse [ slice a [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] d ] ]
[ head [ digits [ max a b ] ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reduce [ range 0 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ filter [ map a square ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ reduce [ map [ range 0 [ min [ len [ filter a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] < ] ] ] [ len c ] ] ] [ lambda1 [ if [ > [ deref [ filter a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] < ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ + a [ reduce [ filter d [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ range 0 [ + a 1 ] ]
[ - [ reduce [ range 0 [ max a b ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ map [ filter [ filter a [ partial1 b < ] ] is_prime ] [ partial0 2 * ] ]
[ reduce [ map [ map a [ partial1 b + ] ] [ partial0 2 * ] ] 1000000000 min ]
[ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 [ head b ] < ] ]
[ reduce [ map [ range 0 [ min [ len [ filter a [ lambda1 [ reduce [ map [ range 1 b ] [ partial0 arg1 == ] ] false || ] ] ] ] [ len c ] ] ] [ lambda1 [ if [ > [ deref [ filter a [ lambda1 [ reduce [ map [ range 1 b ] [ partial0 arg1 == ] ] false || ] ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ range 0 [ + [ head [ filter a [ partial1 b < ] ] ] 1 ] ]
[ filter [ digits [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ digits [ reduce [ slice [ sort a ] 0 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 + ] ]
[ reduce [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] is_prime ] 1000000000 min ]
[ map [ map [ map a [ partial1 b - ] ] [ partial0 2 * ] ] [ partial1 c - ] ]
[ + [ * [ - [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] [ - [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] ] [ * [ - b [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 d * ] ] ] ] ] ] [ - b [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 d * ] ] ] ] ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ filter a [ partial1 [ reduce [ map [ range 0 [ min [ len d ] [ len [ filter b [ partial0 [ reduce b 0 max ] > ] ] ] ] ] [ lambda1 [ if [ < [ deref d arg1 ] [ deref [ filter b [ partial0 [ reduce b 0 max ] > ] ] arg1 ] ] 1 0 ] ] ] 0 + ] < ] ] 0 max ]
[ map [ slice a [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] b ] c ] square ]
[ reduce [ range 0 [ + [ reduce [ reverse [ digits [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ map [ reverse [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] square ]
[ filter a [ partial1 [ reduce [ slice [ reverse [ sort d ] ] 0 [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 + ] < ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ map a [ partial0 2 * ] ] 0 max ] ]
[ map [ digits [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ] [ partial1 b * ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ head [ slice a b c ] ] ]
[ reduce [ slice a b [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] ] 1000000000 min ]
[ head [ filter a [ partial1 b > ] ] ]
[ head [ slice [ filter a [ partial1 b > ] ] c d ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ < [ reduce [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial0 [ reduce [ slice a [ / [ len a ] 2 ] [ len a ] ] 1000000000 min ] < ] ] 1000000000 min ] 0 ]
[ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b - ] ]
[ range 0 [ reduce [ slice [ sort a ] 0 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] 0 + ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ slice a 0 [ / [ len a ] 2 ] ] 0 + ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ slice [ reverse [ filter a [ partial1 b > ] ] ] [ / [ len [ reverse [ filter a [ partial1 b > ] ] ] ] 2 ] [ len [ reverse [ filter a [ partial1 b > ] ] ] ] ]
[ + [ * [ - [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ] [ - [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ] ] [ * [ - c [ reduce [ slice [ sort e ] 0 f ] 0 + ] ] [ - c [ reduce [ slice [ sort e ] 0 f ] 0 + ] ] ] ]
[ reduce [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 max ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ filter b [ combine ! is_prime ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ filter b [ combine ! is_prime ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ digits [ head [ slice a b c ] ] ]
[ slice [ range 0 [ + a 1 ] ] [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] c ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ floor [ sqrt [ + [ * [ - a [ deref c [ / [ len c ] 2 ] ] ] [ - a [ deref c [ / [ len c ] 2 ] ] ] ] [ * [ - b [ reduce [ reverse [ digits d ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ - b [ reduce [ reverse [ digits d ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] ] ] ]
[ map [ slice a b c ] [ partial1 [ head d ] + ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ map [ map a [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] - ] ] [ partial0 2 * ] ]
[ digits [ + a [ deref b [ / [ len b ] 2 ] ] ] ]
[ reverse [ slice [ range 0 [ + a 1 ] ] [ / [ len [ range 0 [ + a 1 ] ] ] 2 ] [ len [ range 0 [ + a 1 ] ] ] ] ]
[ range 1 [ reduce [ range 0 [ + [ deref [ sort a ] [ / [ len a ] 2 ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ reverse [ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] square ] ]
[ reverse [ map [ map a [ partial1 b * ] ] [ partial1 c + ] ] ]
[ reduce [ slice [ sort a ] 0 [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ slice [ range 0 [ + a 1 ] ] [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] b ] c ]
[ reduce [ map [ range 0 [ len [ filter a [ partial1 [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] < ] ] ] ] [ lambda1 [ == [ deref [ filter a [ partial1 [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] < ] ] arg1 ] [ deref [ filter a [ partial1 [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] < ] ] [ - [ - [ len [ filter a [ partial1 [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] < ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ reduce [ slice [ sort a ] 0 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] ] 0 + ]
[ map a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] - ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ reverse [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ reverse [ digits b ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ reverse [ digits b ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ - [ reduce [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ digits [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 1000000000 min ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] ]
[ slice [ slice [ map a [ partial1 b + ] ] c d ] 0 [ / [ len [ slice [ map a [ partial1 b + ] ] c d ] ] 2 ] ]
[ digits [ strlen [ reduce a "z" str_min ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ head d ] ] [ - b [ head d ] ] ] ] ]
[ slice [ map a square ] [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] d ]
[ floor [ sqrt [ + [ * [ - [ deref a [ / [ len a ] 2 ] ] c ] [ - [ deref a [ / [ len a ] 2 ] ] c ] ] [ * [ - b [ reduce [ slice [ sort d ] 0 e ] 0 + ] ] [ - b [ reduce [ slice [ sort d ] 0 e ] 0 + ] ] ] ] ] ]
[ * [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] [ head b ] ]
[ reduce [ reverse [ digits [ reduce [ map a [ partial1 b + ] ] 1000000000 min ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ reduce [ filter [ filter a [ lambda1 [ reduce [ map [ slice e b c ] [ partial0 arg1 == ] ] false || ] ] ] [ partial0 [ reduce [ filter a [ lambda1 [ reduce [ map [ slice e b c ] [ partial0 arg1 == ] ] false || ] ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ reduce [ map a square ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ map b square ] ] ] [ deref [ map b square ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ is_sorted [ filter a [ partial1 [ deref b [ / [ len b ] 2 ] ] > ] ] ]
[ is_sorted [ slice [ reverse a ] b c ] ]
[ range 0 [ reduce [ slice a [ / [ len a ] 2 ] [ len a ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ > [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] [ len b ] ]
[ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ partial1 [ head b ] * ] ]
[ head [ filter [ slice a b c ] [ partial1 d > ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ slice [ reverse [ reverse a ] ] 0 [ / [ len [ reverse [ reverse a ] ] ] 2 ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map [ slice c [ / [ len c ] 2 ] [ len c ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ map [ map [ map a [ partial0 2 * ] ] [ partial1 b + ] ] [ partial0 2 * ] ]
[ reduce [ slice [ sort a ] 0 [ reduce [ reverse [ digits [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 + ]
[ reduce [ filter a [ lambda1 [ reduce [ map [ filter b [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 arg1 == ] ] false || ] ] ] 0 max ]
[ reduce [ reverse [ range 0 a ] ] 0 max ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] + ] ] ] ]
[ reduce [ slice [ reverse [ sort [ slice a [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] ] ] 0 d ] 0 + ]
[ map [ range 0 [ + [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] square ]
[ - [ reduce [ filter a [ partial1 [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] b ] < ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ map [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] + ] ]
[ reduce [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 max ]
[ reduce [ slice [ reverse [ sort [ filter a [ partial1 b < ] ] ] ] 0 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len d ] ] [ deref d arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] 0 + ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ floor [ sqrt [ + [ * [ - [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] [ - [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] ] [ * [ - b [ strlen d ] ] [ - b [ strlen d ] ] ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] + ] ] ] ]
[ floor [ sqrt [ + [ * [ - a [ reduce [ filter c [ partial0 [ reduce c 1000000000 min ] < ] ] 1000000000 min ] ] [ - a [ reduce [ filter c [ partial0 [ reduce c 1000000000 min ] < ] ] 1000000000 min ] ] ] [ * [ - b [ strlen d ] ] [ - b [ strlen d ] ] ] ] ] ]
[ reduce [ map [ range 0 [ min [ len [ map a [ partial1 b + ] ] ] [ len [ map c [ partial1 d - ] ] ] ] ] [ lambda1 [ if [ > [ deref [ map a [ partial1 b - ] ] arg1 ] [ deref [ map c [ partial1 d - ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ digits [ strlen a ] ]
[ map a [ partial1 b - ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ map a [ partial1 [ head [ filter c [ partial1 b > ] ] ] - ] ]
[ head [ slice [ range 0 a ] [ / [ len [ range 0 a ] ] 2 ] [ len [ range 0 a ] ] ] ]
[ reduce [ range 0 [ + [ deref [ filter a [ partial1 b > ] ] [ / [ len [ filter a [ partial1 b > ] ] ] 2 ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ floor [ sqrt [ + [ * [ - a [ min c d ] ] [ - a [ min c d ] ] ] [ * [ - b e ] [ - b e ] ] ] ] ] ]
[ range 0 [ + [ reduce [ filter [ digits a ] [ partial0 [ reduce [ digits a ] 1000000000 min ] < ] ] 1000000000 min ] 1 ] ]
[ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] * ] ]
[ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b < ] ]
[ map a [ partial1 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] + ] ]
[ > [ deref [ slice a [ / [ len a ] 2 ] [ len a ] ] [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] ] 0 ]
[ reduce [ map [ range 0 [ min [ len [ filter a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] > ] ] ] [ len c ] ] ] [ lambda1 [ if [ > [ deref [ filter a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] > ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ max [ strlen [ reduce a "z" str_min ] ] b ]
[ filter [ map [ digits a ] [ partial0 2 * ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ digits [ head a ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ reduce [ map [ range 0 [ min [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ len [ map c [ partial1 b - ] ] ] ] ] [ lambda1 [ if [ < [ deref [ slice a [ / [ len a ] 2 ] [ len a ] ] arg1 ] [ deref [ map c [ partial1 b - ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ floor [ sqrt [ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] f ] [ - [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] f ] ] ] ] ]
[ map [ map a [ partial0 2 * ] ] [ partial1 [ reduce b 0 max ] + ] ]
[ reduce [ reverse [ digits [ deref [ sort a ] [ / [ len a ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ digits [ head [ reverse a ] ] ]
[ filter [ slice a b c ] [ lambda1 [ reduce [ map d [ partial0 arg1 == ] ] false || ] ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] + ] ] ] ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map [ filter [ slice a b c ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] square ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ reduce [ slice [ sort [ digits a ] ] 0 [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 + ]
[ max [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ filter d [ lambda1 [ reduce [ map [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 arg1 == ] ] false || ] ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ filter d [ lambda1 [ reduce [ map [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 arg1 == ] ] false || ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ deref [ filter a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] < ] ] [ / [ len [ filter a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] < ] ] ] 2 ] ]
[ filter [ reverse a ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ map [ map a [ partial1 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] - ] ] [ partial0 2 * ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ digits b ] ] ] [ deref [ digits b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ filter [ slice a b c ] [ lambda1 [ reduce [ map [ range 0 e ] [ partial0 arg1 == ] ] false || ] ] ]
[ filter [ digits a ] [ partial1 [ reduce [ slice [ reverse [ sort c ] ] 0 b ] 0 + ] < ] ]
[ map [ reverse [ range 0 [ + a 1 ] ] ] square ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ digits b ] ] ] [ deref [ digits b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ filter [ filter [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ]
[ reduce [ map [ range 0 [ len [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] ] ] [ lambda1 [ == [ deref [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] arg1 ] [ deref [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] [ - [ - [ len [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ reduce [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] 1000000000 min ]
[ deref [ filter [ reverse a ] [ partial1 b > ] ] [ / [ len [ filter [ reverse a ] [ partial1 b > ] ] ] 2 ] ]
[ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter a [ lambda1 [ reduce [ map [ reverse [ slice e b c ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ reverse [ digits [ reduce [ reverse [ digits [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ slice [ sort a ] 0 [ * c b ] ] 0 + ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ range 0 [ + [ head a ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ slice [ reverse [ range 1 [ + a 1 ] ] ] [ / [ len [ reverse [ range 1 [ + a 1 ] ] ] ] 2 ] [ len [ reverse [ range 1 [ + a 1 ] ] ] ] ]
[ filter [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ map [ slice [ digits a ] [ / [ len [ digits a ] ] 2 ] [ len [ digits a ] ] ] [ partial0 2 * ] ]
[ filter [ reverse a ] [ lambda1 [ reduce [ map [ slice b 0 [ / [ len b ] 2 ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ filter [ filter a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] > ] ] is_prime ]
[ digits [ reduce [ reverse [ digits [ reduce a 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ filter a [ partial1 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] < ] ]
[ map [ digits [ max a b ] ] [ partial1 c * ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ deref [ sort [ map a [ partial1 [ + c b ] * ] ] ] [ / [ len [ map a [ partial1 [ + c b ] * ] ] ] 2 ] ]
[ range 0 [ + [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] ] [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] ] ] 1 ] ]
[ reduce [ slice [ sort [ map a [ partial0 2 * ] ] ] 0 b ] 0 + ]
[ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ combine ! is_prime ] ]
[ deref [ sort [ map a [ partial1 [ reduce [ slice [ reverse [ sort c ] ] 0 b ] 0 + ] - ] ] ] [ / [ len [ map a [ partial1 [ reduce [ slice [ reverse [ sort c ] ] 0 b ] 0 + ] - ] ] ] 2 ] ]
[ filter a [ partial1 [ deref b [ / [ len b ] 2 ] ] < ] ]
[ floor [ sqrt [ + [ * [ - a [ reduce [ filter c [ partial0 [ reduce c 0 max ] > ] ] 0 max ] ] [ - a [ reduce [ filter c [ partial0 [ reduce c 0 max ] > ] ] 0 max ] ] ] [ * [ - b [ reduce [ filter d [ partial0 [ reduce d 1000000000 min ] < ] ] 1000000000 min ] ] [ - b [ reduce [ filter d [ partial0 [ reduce d 1000000000 min ] < ] ] 1000000000 min ] ] ] ] ] ]
[ reduce [ filter [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 b + ] ] [ partial0 [ reduce [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 b + ] ] 0 max ] > ] ] 0 max ]
[ floor [ sqrt [ + [ * [ - a [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 c + ] ] ] ] ] [ - a [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 c + ] ] ] ] ] ] [ * [ - [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] d ] [ - [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] d ] ] ] ] ]
[ filter [ range 0 [ + [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] 1 ] ] [ partial1 b < ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ slice d b c ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ slice d b c ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ reverse [ digits [ deref a [ / [ len a ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reverse [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ map b square ] ] ] [ deref [ map b square ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] < ] ]
[ head [ slice [ digits a ] 0 [ / [ len [ digits a ] ] 2 ] ] ]
[ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] d ] [ - [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] d ] ] ] ] ] ]
[ map [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] * ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ * [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ]
[ reduce [ map [ filter [ range 0 [ len [ reverse a ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ reverse a ] int-deref ] ] 1000000000 min ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ * [ strlen a ] b ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ map [ digits [ head a ] ] [ partial1 b * ] ]
[ - [ reduce [ range 0 [ + [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] 1 ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ strlen a ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ range 1 [ head a ] ]
[ filter [ range 0 a ] [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] < ] ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] ] 0 + ]
[ max a [ reduce [ filter [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 [ reduce [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1000000000 min ] < ] ] 1000000000 min ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ reduce [ range 0 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ slice e b c ] ] ] [ deref [ slice e b c ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ digits [ min a [ reduce b 1000000000 min ] ] ]
[ max [ reduce [ range 0 [ + [ min a b ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] c ]
[ reverse [ map a [ partial1 b + ] ] ]
[ reduce [ map a [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] - ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len d ] ] [ deref d arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ reduce [ range 0 [ + [ strlen [ reduce a "" str_concat ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ is_sorted [ slice [ reverse a ] b c ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ reverse [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ reverse [ digits [ reduce [ slice [ sort a ] 0 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce [ slice [ reverse [ sort c ] ] 0 b ] 0 + ] ] 0 + ]
[ digits [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ / [ reduce a 0 + ] [ len a ] ] ] ]
[ / [ reduce [ map [ filter a [ combine ! is_prime ] ] [ partial1 b + ] ] 0 + ] [ len [ map [ filter a [ combine ! is_prime ] ] [ partial1 b + ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ len [ filter a [ lambda1 [ reduce [ map [ range 0 b ] [ partial0 arg1 == ] ] false || ] ] ] ]
[ map [ slice [ digits a ] [ / [ len [ digits a ] ] 2 ] [ len [ digits a ] ] ] [ partial0 2 * ] ]
[ filter [ range 1 a ] [ partial1 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] < ] ]
[ strlen a ]
[ deref [ digits [ reduce a 1000000000 min ] ] [ / [ len [ digits [ reduce a 1000000000 min ] ] ] 2 ] ]
[ > [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ reverse [ digits [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ deref [ sort [ range 0 a ] ] [ / [ len [ range 0 a ] ] 2 ] ] ]
[ filter [ digits a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ]
[ digits [ strlen [ reduce a "z" str_min ] ] ]
[ range 0 [ + a 1 ] ]
[ head [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ floor [ sqrt [ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] ] ] ] ]
[ filter [ filter [ filter a [ partial1 b > ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial1 c > ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ range 0 [ + [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ slice [ reverse b ] 0 [ / [ len [ reverse b ] ] 2 ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ slice [ reverse b ] 0 [ / [ len [ reverse b ] ] 2 ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ floor [ sqrt [ + [ * [ - [ max a b ] d ] [ - [ max a b ] d ] ] [ * [ - c [ reduce [ reverse [ digits e ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ - c [ reduce [ reverse [ digits e ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] ] ] ]
[ filter [ slice a b c ] [ lambda1 [ reduce [ map [ range 0 e ] [ partial0 arg1 == ] ] false || ] ] ]
[ map [ filter a [ partial1 [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] b ] < ] ] [ partial0 2 * ] ]
[ reduce [ map [ range 0 [ min [ len [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial1 b + ] ] ] [ len c ] ] ] [ lambda1 [ if [ < [ deref [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial1 b + ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ map [ slice a b c ] [ partial1 [ head e ] + ] ]
[ reduce [ map [ range 0 [ min [ len [ reverse [ map a [ partial1 b - ] ] ] ] [ len c ] ] ] [ lambda1 [ if [ > [ deref [ reverse [ map a [ partial1 b - ] ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ > [ reduce [ map [ range 0 [ min [ len a ] [ len [ map b square ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map b square ] arg1 ] ] 1 0 ] ] ] 0 + ] c ]
[ reduce [ range 0 [ + [ reduce [ range 0 [ + [ reduce [ slice [ sort a ] 0 b ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b < ] ]
[ reduce [ slice a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ] 0 max ]
[ filter [ range 0 [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ slice [ sort a ] 0 [ reduce [ map b square ] 0 max ] ] 0 + ]
[ - [ reduce [ filter a [ partial1 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] < ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ * [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] [ reduce [ map [ range 0 [ min [ len c ] [ len d ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ reduce [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] square ] 1000000000 min ]
[ map [ filter a [ partial1 b < ] ] [ partial1 [ - [ reduce c 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] * ] ]
[ filter [ digits [ * a b ] ] is_prime ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ deref [ sort [ range 1 a ] ] [ / [ len [ range 1 a ] ] 2 ] ] ]
[ digits [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ filter [ range 0 c ] [ partial1 b < ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ filter [ range 0 c ] [ partial1 b < ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ filter a [ partial1 b > ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ]
[ range 1 [ + [ reduce [ filter a [ partial1 b > ] ] 1000000000 min ] 1 ] ]
[ len [ filter [ filter a [ partial1 b > ] ] [ combine ! is_prime ] ] ]
[ reduce [ map [ range 0 [ min [ len [ map a [ partial1 b - ] ] ] [ len [ digits c ] ] ] ] [ lambda1 [ if [ > [ deref [ map a [ partial1 b - ] ] arg1 ] [ deref [ digits c ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ range 1 [ + [ * a [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] ] 1 ] ]
[ map a [ partial1 b - ] ]
[ filter [ slice a b [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] [ lambda1 [ reduce [ map g [ partial0 arg1 == ] ] false || ] ] ]
[ map [ range 0 [ + [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ] ] [ partial1 b * ] ]
[ digits [ reduce [ slice [ sort a ] 0 b ] 0 + ] ]
[ map [ filter a [ lambda1 [ reduce [ map [ map b [ partial0 2 * ] ] [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ]
[ reduce [ range 0 [ + [ - [ reduce [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ reverse [ map [ slice a b c ] [ partial1 d * ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ range 0 [ + [ strlen a ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ deref [ sort [ range 0 [ max a b ] ] ] [ / [ len [ range 0 [ max a b ] ] ] 2 ] ]
[ filter [ filter a [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] > ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ filter [ map a square ] [ partial1 [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ < [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] > ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ > [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 ]
[ head [ map a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] - ] ] ]
[ reverse [ map a [ partial1 b * ] ] ]
[ reduce [ reverse [ digits [ reduce [ range 1 [ + a 1 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ head [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ reduce [ range 0 [ + [ min a [ reduce [ slice [ sort c ] 0 b ] 0 + ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ digits [ deref a [ / [ len a ] 2 ] ] ]
[ filter [ slice [ filter a [ partial1 b < ] ] 0 [ / [ len [ filter a [ partial1 b < ] ] ] 2 ] ] [ combine ! is_prime ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] 0 + ]
[ range 0 [ + [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] 1 ] ]
[ deref [ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] [ / [ len [ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] 2 ] ]
[ / [ reduce [ reverse [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] 0 + ] [ len [ reverse [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] ] ]
[ digits [ * a [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ reduce [ reverse [ digits [ reduce [ filter [ map a square ] [ partial0 [ reduce [ map a square ] 0 max ] > ] ] 0 max ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ + a [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ max c b ] ] ]
[ map [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ]
[ len [ reverse [ filter a [ partial1 b > ] ] ] ]
[ slice a [ strlen b ] [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ map [ filter [ filter a [ partial1 b > ] ] [ partial1 c > ] ] square ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ filter [ slice a [ / [ reduce b 0 + ] [ len b ] ] c ] [ partial0 [ reduce [ slice a [ / [ reduce b 0 + ] [ len b ] ] c ] 0 max ] > ] ] 0 max ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter c [ partial1 b < ] ] ] ] [ deref [ filter c [ partial1 b < ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ slice a 0 [ / [ len a ] 2 ] ] 0 max ]
[ reduce [ map [ range 0 [ min [ len [ filter a [ combine ! is_prime ] ] ] [ len [ filter c [ partial1 b < ] ] ] ] ] [ lambda1 [ if [ > [ deref [ filter a [ combine ! is_prime ] ] arg1 ] [ deref [ filter c [ partial1 b < ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ slice a [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] d ]
[ reduce [ reverse [ digits [ reduce [ filter [ filter a [ partial1 b < ] ] [ partial0 [ reduce [ filter a [ partial1 b < ] ] 1000000000 min ] < ] ] 1000000000 min ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ slice [ digits [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] [ / [ len [ digits [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] ] 2 ] [ len [ digits [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] ] ]
[ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ reverse c ] ] ] [ deref [ reverse c ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ map a [ partial1 b - ] ]
[ reduce [ reverse [ digits [ reduce [ slice [ reverse [ sort [ filter a [ partial1 b > ] ] ] ] 0 c ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ floor [ sqrt [ + [ * [ - a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] ] [ - a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] ] ] [ * [ - b d ] [ - b d ] ] ] ] ]
[ reduce [ filter a [ partial1 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] > ] ] 1000000000 min ]
[ head [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ map [ filter a [ partial1 b < ] ] square ]
[ range 1 [ + [ min a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] ] 1 ] ]
[ filter [ map [ filter a [ partial1 b < ] ] square ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ reverse [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] ]
[ filter [ range 1 a ] [ lambda1 [ reduce [ map [ slice b [ / [ len b ] 2 ] [ len b ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ map [ map [ filter [ range 0 [ len [ range 0 a ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ range 0 a ] int-deref ] ] square ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ map [ map [ digits a ] square ] square ]
[ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len [ digits b ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ digits b ] arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ range 0 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ reverse b ] ] ] [ deref [ reverse b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ digits [ reduce [ map [ range 0 [ min [ len [ reverse a ] ] [ len b ] ] ] [ lambda1 [ if [ < [ deref [ reverse a ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ < [ deref [ reverse a ] [ / [ len [ reverse a ] ] 2 ] ] 1 ]
[ reduce [ slice [ sort a ] 0 [ reduce [ map c [ partial1 b - ] ] 0 max ] ] 0 + ]
[ * [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] [ strlen f ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ slice [ filter [ reverse a ] is_prime ] 0 [ / [ len [ filter [ reverse a ] is_prime ] ] 2 ] ]
[ reverse [ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ]
[ map [ slice [ range 1 [ + a 1 ] ] [ / [ len [ range 1 [ + a 1 ] ] ] 2 ] [ len [ range 1 [ + a 1 ] ] ] ] [ partial0 2 * ] ]
[ filter [ reverse a ] [ partial1 [ reduce [ slice [ sort c ] 0 b ] 0 + ] < ] ]
[ reduce [ filter [ reverse a ] [ partial1 b < ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] ] ] ]
[ reduce [ map [ range 0 [ len [ filter a [ partial1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 b + ] ] ] ] > ] ] ] ] [ lambda1 [ == [ deref [ filter a [ partial1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 b + ] ] ] ] > ] ] arg1 ] [ deref [ filter a [ partial1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 b + ] ] ] ] > ] ] [ - [ - [ len [ filter a [ partial1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 b + ] ] ] ] > ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ filter a [ lambda1 [ reduce [ map [ range 0 [ + b 1 ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ reverse [ digits [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ filter [ digits a ] [ partial0 [ reduce [ digits a ] 1000000000 min ] < ] ] 1000000000 min ]
[ map [ filter a [ lambda1 [ reduce [ map [ map b [ partial0 2 * ] ] [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ]
[ reduce [ reverse [ digits [ reduce [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ range 0 [ + a 1 ] ]
[ reduce [ reverse [ digits [ deref [ range 1 [ + a 1 ] ] [ / [ len [ range 1 [ + a 1 ] ] ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ slice d b c ] [ partial0 2 * ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map [ slice d b c ] [ partial0 2 * ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ filter [ filter [ digits a ] [ partial1 b < ] ] [ partial0 [ reduce [ filter [ digits a ] [ partial1 b < ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ reduce [ range 0 [ + [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ reverse [ map a [ partial1 b * ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ slice a [ / [ len a ] 2 ] [ len a ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ filter [ map [ filter [ range 0 [ len [ reverse a ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ reverse a ] int-deref ] ] [ partial1 b < ] ]
[ map [ filter [ range 0 [ len [ map [ reverse a ] [ partial1 b - ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ map [ reverse a ] [ partial1 b - ] ] int-deref ] ]
[ map a [ partial1 b - ] ]
[ reduce [ map [ range 0 [ min [ len [ slice a 0 [ / [ len a ] 2 ] ] ] [ len [ filter c [ partial1 b < ] ] ] ] ] [ lambda1 [ if [ > [ deref [ slice a 0 [ / [ len a ] 2 ] ] arg1 ] [ deref [ filter c [ partial1 b < ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ filter b [ combine ! is_prime ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ filter b [ combine ! is_prime ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ range 0 [ + a 1 ] ]
[ filter [ filter a [ lambda1 [ reduce [ map [ range 0 b ] [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ]
[ reverse [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ map [ range 0 [ min [ len [ digits [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] [ len f ] ] ] [ lambda1 [ if [ < [ deref [ digits [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] arg1 ] [ deref f arg1 ] ] 1 0 ] ] ] 0 + ]
[ digits [ strlen a ] ]
[ reverse [ slice a 0 [ / [ len a ] 2 ] ] ]
[ reduce [ slice [ sort [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 c ] 0 + ]
[ reduce [ slice [ sort [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] ] 0 b ] 0 + ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ range 0 [ + [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ > [ reduce [ slice [ reverse [ sort [ digits a ] ] ] 0 b ] 0 + ] c ]
[ reduce [ map [ range 0 [ len [ range 0 [ reduce a 1000000000 min ] ] ] ] [ lambda1 [ == [ deref [ range 0 [ reduce a 1000000000 min ] ] arg1 ] [ deref [ range 0 [ reduce a 1000000000 min ] ] [ - [ - [ len [ range 0 [ reduce a 1000000000 min ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ range 1 [ + [ reduce [ range 0 [ + [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] 1 ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ filter a [ lambda1 [ reduce [ map [ slice e b [ reduce [ map [ range 0 [ min [ len c ] [ len d ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ slice [ reverse a ] [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] c ]
[ reduce [ range 0 [ + [ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ range 0 [ reduce [ map [ range 0 [ min [ len [ reverse a ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ reverse a ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ < [ reduce [ filter a [ partial1 b < ] ] 0 + ] 1 ]
[ slice [ reverse [ reverse a ] ] 0 [ / [ len [ reverse [ reverse a ] ] ] 2 ] ]
[ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ digits [ reduce [ slice [ sort a ] 0 b ] 0 + ] ]
[ - [ reduce [ range 0 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ digits a ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ range 1 b ] ] ] [ deref [ range 1 b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ deref [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] [ / [ len [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] ] 2 ] ]
[ reverse [ slice a [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] c ] ]
[ range 1 [ - [ reduce [ slice a 0 [ / [ len a ] 2 ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ deref [ range 0 [ + a 1 ] ] [ / [ len [ range 0 [ + a 1 ] ] ] 2 ] ]
[ map [ reverse [ digits a ] ] [ partial0 2 * ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] * ] ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ range 0 [ + [ reduce [ slice [ sort a ] 0 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] 0 + ] 1 ] ]
[ + [ * [ - a [ strlen d ] ] [ - a [ strlen d ] ] ] [ * [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ slice a [ / [ reduce b 0 + ] [ len b ] ] c ]
[ range 1 [ + [ * [ - a [ reduce [ map [ range 0 [ min [ len d ] [ len e ] ] ] [ lambda1 [ if [ < [ deref d arg1 ] [ deref e arg1 ] ] 1 0 ] ] ] 0 + ] ] [ - a [ reduce [ map [ range 0 [ min [ len d ] [ len e ] ] ] [ lambda1 [ if [ < [ deref d arg1 ] [ deref e arg1 ] ] 1 0 ] ] ] 0 + ] ] ] [ * [ - b f ] [ - b f ] ] ] ]
[ head [ filter [ filter a [ partial1 b > ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ]
[ reduce [ reverse [ digits [ deref [ sort [ map a square ] ] [ / [ len [ map a square ] ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ slice [ sort [ map a [ partial1 [ head b ] * ] ] ] 0 c ] 0 + ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ len a ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ head [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ map [ filter [ range 1 a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ]
[ slice a b [ reduce [ range 0 [ + [ reduce [ slice [ sort c ] 0 d ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ filter [ filter a [ lambda1 [ reduce [ map [ map b square ] [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ filter [ map a [ partial1 b + ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] 0 max ]
[ map a [ partial1 [ + [ * [ - f c ] [ - f c ] ] [ * [ - b [ reduce [ filter d [ partial0 [ reduce d 0 max ] > ] ] 0 max ] ] [ - b [ reduce [ filter d [ partial0 [ reduce d 0 max ] > ] ] 0 max ] ] ] ] * ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ]
[ map a [ partial1 [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ / [ reduce b 0 + ] [ len b ] ] ] * ] ]
[ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ reduce [ range 0 [ + [ reduce [ slice [ reverse [ sort d ] ] 0 e ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] [ - b [ reduce [ range 0 [ + [ reduce [ slice [ reverse [ sort d ] ] 0 e ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] ] ] ] ]
[ is_sorted [ map [ slice a b c ] [ partial0 2 * ] ] ]
[ reduce [ map [ range 0 [ min [ len [ range 0 [ + [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] 1 ] ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ range 0 [ + [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] 1 ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ min [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ map [ range 0 [ min [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ len [ slice e b c ] ] ] ] [ lambda1 [ if [ < [ deref [ slice a [ / [ len a ] 2 ] [ len a ] ] arg1 ] [ deref [ slice e b c ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ / [ reduce [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] 0 + ] [ len [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] ] ]
[ filter [ range 1 a ] [ lambda1 [ reduce [ map [ slice d b c ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ * a [ reduce [ range 0 [ + [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ filter a [ lambda1 [ reduce [ map [ filter c [ partial1 [ head b ] > ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ < [ head [ filter a [ partial1 b > ] ] ] c ]
[ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ range 0 [ min [ len [ map a [ partial1 b + ] ] ] [ len c ] ] ] [ lambda1 [ if [ > [ deref [ map a [ partial1 b + ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ range 0 [ deref [ sort a ] [ / [ len a ] 2 ] ] ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reverse [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ head [ map a [ partial1 [ strlen b ] * ] ] ]
[ reduce [ map [ range 0 [ len [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] ] ] [ lambda1 [ == [ deref [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] arg1 ] [ deref [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] [ - [ - [ len [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ filter [ digits [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ head [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ map [ range 0 [ len [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] ] ] [ lambda1 [ == [ deref [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] arg1 ] [ deref [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] [ - [ - [ len [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ is_sorted [ filter a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] > ] ] ]
[ reverse [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] ]
[ map [ map [ slice a b c ] square ] [ partial1 d - ] ]
[ reduce [ map [ range 0 [ len [ map [ map a [ partial1 b + ] ] [ partial1 c + ] ] ] ] [ lambda1 [ == [ deref [ map [ map a [ partial1 b + ] ] [ partial1 c + ] ] arg1 ] [ deref [ map [ map a [ partial1 b + ] ] [ partial1 c + ] ] [ - [ - [ len [ map [ map a [ partial1 b + ] ] [ partial1 c + ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ floor [ sqrt [ + [ * [ - [ max a b ] d ] [ - [ max a b ] d ] ] [ * [ - c [ reduce [ slice [ reverse [ sort e ] ] 0 f ] 0 + ] ] [ - c [ reduce [ slice [ reverse [ sort e ] ] 0 f ] 0 + ] ] ] ] ] ]
[ reduce [ filter [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ] [ partial0 [ reduce [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ slice a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] [ head c ] ]
[ head [ map [ slice a 0 [ / [ len a ] 2 ] ] square ] ]
[ reduce [ map a square ] 0 + ]
[ digits [ deref a [ / [ len a ] 2 ] ] ]
[ map [ slice [ slice a b c ] 0 [ / [ len [ slice a b c ] ] 2 ] ] square ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reduce [ slice a [ / [ len a ] 2 ] [ len a ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ reverse b ] ] ] [ deref [ reverse b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ map [ filter [ range 0 [ len [ filter [ range 1 [ + a 1 ] ] is_prime ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ filter [ range 1 [ + a 1 ] ] is_prime ] int-deref ] ]
[ range 0 [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ slice [ slice [ map a square ] b c ] [ / [ len [ slice [ map a square ] b c ] ] 2 ] [ len [ slice [ map a square ] b c ] ] ]
[ floor [ sqrt [ + [ * [ - a [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ - a [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] [ * [ - b [ / [ reduce e 0 + ] [ len e ] ] ] [ - b [ / [ reduce e 0 + ] [ len e ] ] ] ] ] ] ]
[ map [ filter a [ lambda1 [ reduce [ map [ range 1 b ] [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ]
[ range 0 [ + a 1 ] ]
[ range 0 [ + a 1 ] ]
[ digits [ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ range 1 [ reduce [ filter a [ partial1 b < ] ] 0 max ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ head [ slice [ digits a ] 0 [ / [ len [ digits a ] ] 2 ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ filter [ filter [ filter a [ partial1 b > ] ] is_prime ] [ partial1 c > ] ]
[ map a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] + ] ]
[ reduce [ range 0 [ + [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ map a [ partial0 2 * ] ] 1000000000 min ] ]
[ reduce [ reverse [ digits [ deref [ map a [ partial0 2 * ] ] [ / [ len [ map a [ partial0 2 * ] ] ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ max [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ reduce [ map [ range 0 [ len [ map [ digits a ] [ partial1 b + ] ] ] ] [ lambda1 [ == [ deref [ map [ digits a ] [ partial1 b + ] ] arg1 ] [ deref [ map [ digits a ] [ partial1 b + ] ] [ - [ - [ len [ map [ digits a ] [ partial1 b + ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ reduce [ range 0 [ + [ head [ filter a [ partial1 b < ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ filter a [ partial1 [ + c b ] < ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ range 0 [ + [ strlen [ reduce a "z" str_min ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ reduce [ slice [ sort [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c - ] ] ] 0 d ] 0 + ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map [ filter [ filter a [ partial1 b > ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] square ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ range 0 [ + [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ filter a [ partial1 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] > ] ]
[ - [ reduce [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b < ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ map [ filter [ range 0 [ len [ range 0 [ + a 1 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ range 0 [ + a 1 ] ] int-deref ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ filter [ range 0 [ len [ reverse b ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ reverse b ] int-deref ] ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ map [ filter [ range 0 [ len [ reverse b ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ reverse b ] int-deref ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ reverse [ digits [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ digits b ] ] ] [ deref [ digits b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ range 0 [ + [ reduce [ reverse [ digits [ * a b ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ reduce [ slice [ sort [ slice a b c ] ] 0 [ * e f ] ] 0 + ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ reverse [ digits [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ reverse [ digits [ reduce [ filter [ slice a b c ] [ partial0 [ reduce [ slice a b c ] 0 max ] > ] ] 0 max ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ reverse [ range 1 a ] ] 0 max ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 [ + a b ] + ] ] ] ]
[ filter [ range 0 [ + a 1 ] ] [ partial1 [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] b ] < ] ]
[ reduce [ reverse [ digits [ reduce [ filter [ map a square ] [ partial0 [ reduce [ map a square ] 0 max ] > ] ] 0 max ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ range 0 [ + [ reduce [ slice a [ / [ len a ] 2 ] [ len a ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ digits [ strlen a ] ]
[ filter [ filter [ reverse a ] [ partial1 b < ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ map [ slice [ slice a b c ] 0 [ / [ len [ slice a b c ] ] 2 ] ] square ]
[ reduce [ map [ range 0 [ min [ len [ filter [ digits a ] [ partial1 b < ] ] ] [ len c ] ] ] [ lambda1 [ if [ < [ deref [ filter [ digits a ] [ partial1 b < ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ - [ reduce [ map a [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] * ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ digits [ reduce [ range 0 [ + [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ - [ reduce [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ slice a b [ + [ * [ - f c ] [ - f c ] ] [ * [ - g d ] [ - g d ] ] ] ] 1000000000 min ]
[ digits [ reduce [ slice [ sort a ] 0 [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] ] 0 + ] ]
[ map [ filter [ range 0 [ len [ map [ digits a ] [ partial0 2 * ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ map [ digits a ] [ partial0 2 * ] ] int-deref ] ]
[ reduce [ slice [ sort [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 0 [ reduce b 1000000000 min ] ] 0 + ]
[ map [ map a [ partial1 b + ] ] [ partial1 [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] + ] ]
[ > [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ]
[ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] < ] ]
[ map [ range 1 [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] square ]
[ reduce [ slice [ reverse [ sort [ filter a [ combine ! is_prime ] ] ] ] 0 [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] b ] ] 0 + ]
[ head [ map a [ partial1 b - ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ reduce [ slice [ sort [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ] ] 0 d ] 0 + ]
[ filter [ filter a [ lambda1 [ reduce [ map [ range 0 [ + b 1 ] ] [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c > ] ]
[ reduce [ reverse [ digits [ reduce [ filter [ filter a [ partial1 b < ] ] [ partial0 [ reduce [ filter a [ partial1 b < ] ] 0 max ] > ] ] 0 max ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] ] 0 + ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ min c [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] ] 0 + ]
[ range 1 [ reduce [ reverse [ digits [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ reverse [ digits [ reduce [ filter [ filter a [ partial1 b > ] ] [ partial0 [ reduce [ filter a [ partial1 b > ] ] 0 max ] > ] ] 0 max ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter [ reverse a ] [ partial1 [ head b ] > ] ]
[ filter a [ partial1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] > ] ]
[ reduce [ reverse [ digits [ deref [ sort [ range 1 a ] ] [ / [ len [ range 1 a ] ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ]
[ floor [ sqrt [ + [ * [ - [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ] [ - [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ] ] [ * [ - c [ deref e [ / [ len e ] 2 ] ] ] [ - c [ deref e [ / [ len e ] 2 ] ] ] ] ] ] ]
[ head [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reverse [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ len [ digits [ deref a [ / [ len a ] 2 ] ] ] ]
[ * a [ + c [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] ]
[ / [ reduce [ map [ map a square ] [ partial0 2 * ] ] 0 + ] [ len [ map [ map a square ] [ partial0 2 * ] ] ] ]
[ range 0 [ strlen [ reduce a "" str_concat ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ digits [ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ filter [ slice a b c ] [ lambda1 [ reduce [ map [ slice e b c ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ slice [ sort a ] 0 [ reduce [ slice [ sort c ] 0 b ] 0 + ] ] 0 + ]
[ map [ range 0 [ + [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] [ partial0 2 * ] ]
[ filter [ filter a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] < ] ] [ combine ! is_prime ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ reverse [ filter [ range 1 [ + a 1 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ range 0 [ + [ strlen [ reduce a "z" str_min ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ range 1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ + [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ range 0 [ + [ strlen a ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ reduce [ map [ range 0 [ min [ len [ filter a [ lambda1 [ reduce [ map [ range 1 b ] [ partial0 arg1 == ] ] false || ] ] ] ] [ len c ] ] ] [ lambda1 [ if [ > [ deref [ filter a [ lambda1 [ reduce [ map [ range 1 b ] [ partial0 arg1 == ] ] false || ] ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ slice a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] [ reduce [ map [ range 0 [ min [ len c ] [ len d ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ floor [ sqrt [ + [ * [ - [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] g ] [ - [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] g ] ] [ * [ - f h ] [ - f h ] ] ] ] ] ]
[ slice [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] b ] c ]
[ max [ reduce a 0 max ] [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ slice a [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] c ]
[ - [ reduce [ map a [ partial1 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] - ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ floor [ sqrt [ + [ * [ - [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] g ] [ - [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] g ] ] [ * [ - f h ] [ - f h ] ] ] ] ] ]
[ reduce [ map a [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] + ] ] 1000000000 min ]
[ reduce [ map [ range 0 [ len [ map [ filter [ range 0 [ len [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] int-deref ] ] ] ] [ lambda1 [ == [ deref [ map [ filter [ range 0 [ len [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] int-deref ] ] arg1 ] [ deref [ map [ filter [ range 0 [ len [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] ] [ lambda1 [
[ deref [ filter [ reverse a ] [ partial1 b > ] ] [ / [ len [ filter [ reverse a ] [ partial1 b > ] ] ] 2 ] ]
[ floor [ sqrt [ + [ * [ - a [ reduce [ filter c [ partial0 [ reduce c 0 max ] > ] ] 0 max ] ] [ - a [ reduce [ filter c [ partial0 [ reduce c 0 max ] > ] ] 0 max ] ] ] [ * [ - b [ strlen d ] ] [ - b [ strlen d ] ] ] ] ] ]
[ len [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] ]
[ head [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] square ] ]
[ filter a [ partial1 [ reduce [ reverse [ digits [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] > ] ]
[ range 0 [ + a 1 ] ]
[ map [ slice [ digits a ] [ / [ len [ digits a ] ] 2 ] [ len [ digits a ] ] ] [ partial0 2 * ] ]
[ filter [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial1 b * ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ floor [ sqrt [ + [ * [ - a [ deref [ sort d ] [ / [ len d ] 2 ] ] ] [ - a [ deref [ sort d ] [ / [ len d ] 2 ] ] ] ] [ * [ - [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ > [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] [ - [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ > [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] ] ] ] ]
[ digits [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ]
[ reduce [ map [ range 0 [ min [ len [ map [ filter [ range 0 [ len [ reverse a ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ reverse a ] int-deref ] ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ map [ filter [ range 0 [ len [ reverse a ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ reverse a ] int-deref ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ map a [ partial1 b - ] ] [ partial1 [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] > ] ]
[ deref [ sort [ slice a 0 [ / [ len a ] 2 ] ] ] [ / [ len [ slice a 0 [ / [ len a ] 2 ] ] ] 2 ] ]
[ filter a [ lambda1 [ reduce [ map [ digits [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ < [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ digits a ] [ partial1 b * ] ] 0 max ]
[ reduce [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] 0 + ]
[ map [ filter a [ combine ! is_prime ] ] [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] - ] ]
[ reduce [ range 0 [ + [ reduce [ range 0 [ + [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ map [ digits a ] [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] + ] ]
[ map [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ partial1 b - ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ map [ slice e b c ] square ] ] ] [ deref [ map [ slice e b c ] square ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ map [ range 0 [ min [ len [ map [ filter a [ partial1 b < ] ] [ partial0 2 * ] ] ] [ len c ] ] ] [ lambda1 [ if [ > [ deref [ map [ filter a [ partial1 b < ] ] [ partial0 2 * ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ + [ * [ - [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] [ - [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] ] [ * [ - b [ head d ] ] [ - b [ head d ] ] ] ]
[ * a [ strlen b ] ]
[ filter [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b < ] ] [ combine ! is_prime ] ]
[ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] < ] ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ reduce [ slice [ sort a ] 0 b ] 0 + ] * ] ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ map [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ] [ partial0 2 * ] ]
[ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ digits [ reduce [ slice [ sort a ] 0 [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] 0 + ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ map [ range 0 [ min [ len a ] [ len [ map c [ partial1 b * ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ map c [ partial1 b * ] ] arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ map [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ partial1 b - ] ]
[ reduce [ map [ range 0 [ len [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] ] ] [ lambda1 [ == [ deref [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] arg1 ] [ deref [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] [ - [ - [ len [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reduce [ map [ range 0 [ min [ len [ slice a b c ] ] [ len [ filter d [ lambda1 [ reduce [ map e [ partial0 arg1 == ] ] false || ] ] ] ] ] ] [ lambda1 [ if [ < [ deref [ slice a b c ] arg1 ] [ deref [ filter d [ lambda1 [ reduce [ map e [ partial0 arg1 == ] ] false || ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reverse [ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ]
[ digits [ deref a [ / [ len a ] 2 ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ filter d [ lambda1 [ reduce [ map [ filter c [ partial1 b < ] ] [ partial0 arg1 == ] ] false || ] ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ filter d [ lambda1 [ reduce [ map [ filter c [ partial1 b < ] ] [ partial0 arg1 == ] ] false || ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ slice [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ / [ len [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] 2 ] [ len [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ deref [ map [ digits a ] [ partial0 2 * ] ] [ / [ len [ map [ digits a ] [ partial0 2 * ] ] ] 2 ] ]
[ map [ slice [ digits a ] [ / [ len [ digits a ] ] 2 ] [ len [ digits a ] ] ] [ partial0 2 * ] ]
[ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 b + ] ] ] ] > ] ]
[ head [ map [ range 1 a ] [ partial1 b - ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ slice b [ / [ len b ] 2 ] [ len b ] ] square ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map [ slice b [ / [ len b ] 2 ] [ len b ] ] square ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ slice [ digits a ] [ / [ len [ digits a ] ] 2 ] [ len [ digits a ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ slice e [ deref [ sort b ] [ / [ len b ] 2 ] ] c ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ slice e [ deref [ sort b ] [ / [ len b ] 2 ] ] c ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ reverse [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] b ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ / [ reduce [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 0 + ] [ len [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] ]
[ max [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] f ]
[ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ reverse c ] ] ] [ deref [ reverse c ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ > [ deref [ sort [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ] [ / [ len [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ] 2 ] ] b ]
[ reverse [ slice a 0 [ / [ len a ] 2 ] ] ]
[ map [ digits [ max a b ] ] square ]
[ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len [ range 0 [ + a 1 ] ] ] [ len b ] ] ] [ lambda1 [ if [ < [ deref [ range 0 [ + a 1 ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ max [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ digits b ] ] ] [ deref [ digits b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] c ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ slice [ range 1 [ + a 1 ] ] [ strlen b ] c ]
[ range 0 [ + a 1 ] ]
[ filter [ filter a [ lambda1 [ reduce [ map [ slice d b c ] [ partial0 arg1 == ] ] false || ] ] ] [ partial1 e < ] ]
[ reverse [ map [ map a square ] [ partial0 2 * ] ] ]
[ filter a [ lambda1 [ reduce [ map [ slice [ filter c [ partial1 b < ] ] 0 [ / [ len [ filter c [ partial1 b < ] ] ] 2 ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ filter [ filter [ map a [ partial0 2 * ] ] [ partial1 b < ] ] [ partial0 [ reduce [ filter [ map a [ partial0 2 * ] ] [ partial1 b < ] ] 0 max ] > ] ] 0 max ]
[ filter a [ partial1 [ reduce b 1000000000 min ] > ] ]
[ > [ deref [ sort a ] [ / [ len a ] 2 ] ] [ deref b [ / [ len b ] 2 ] ] ]
[ filter a [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] > ] ]
[ digits [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] ]
[ range 1 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter b is_prime ] ] ] [ deref [ filter b is_prime ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ slice [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] square ] [ / [ len [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] square ] ] 2 ] [ len [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] square ] ] ]
[ map a [ partial1 [ reduce [ reverse [ digits [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ filter [ digits a ] [ lambda1 [ reduce [ map [ filter c [ partial1 b < ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ filter [ map a [ partial1 [ max c b ] - ] ] [ combine ! is_prime ] ]
[ reduce [ filter [ filter [ filter a [ partial1 b < ] ] [ partial1 c < ] ] [ partial0 [ reduce [ filter [ filter a [ partial1 b < ] ] [ partial1 c < ] ] 0 max ] > ] ] 0 max ]
[ reduce [ reverse [ digits [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ strlen a ]
[ filter [ slice [ range 0 a ] 0 [ / [ len [ range 0 a ] ] 2 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ map [ digits a ] [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] + ] ]
[ filter [ digits [ * a b ] ] is_prime ]
[ reduce [ reverse [ digits [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] d ] [ - [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] d ] ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter [ reverse a ] [ partial1 [ reduce [ slice [ sort c ] 0 b ] 0 + ] < ] ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce [ slice [ reverse [ sort c ] ] 0 b ] 0 + ] ] 0 + ]
[ filter [ filter a [ lambda1 [ reduce [ map [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 arg1 == ] ] false || ] ] ] is_prime ]
[ reduce [ slice a 0 [ / [ len a ] 2 ] ] 1000000000 min ]
[ map a [ partial1 b - ] ]
[ max a [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ range 0 [ + [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] + ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ deref [ sort [ range 0 [ + a 1 ] ] ] [ / [ len [ range 0 [ + a 1 ] ] ] 2 ] ] ]
[ * [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] c ]
[ slice a [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] c ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ slice [ sort a ] 0 [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ is_sorted [ map a [ partial1 b * ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reverse [ map a [ partial1 b + ] ] ]
[ filter [ filter [ map a [ partial1 b - ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] [ partial1 d > ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ deref [ sort [ map [ filter [ range 0 [ len [ slice a 0 [ / [ len a ] 2 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ slice a 0 [ / [ len a ] 2 ] ] int-deref ] ] ] [ / [ len [ map [ filter [ range 0 [ len [ slice a 0 [ / [ len a ] 2 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ slice a 0 [ / [ len a ] 2 ] ] int-deref ] ] ] 2 ] ]
[ reduce [ map [ range 0 [ min [ len [ reverse [ digits a ] ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ reverse [ digits a ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ slice [ range 0 a ] [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] d ]
[ filter [ reverse [ filter a [ partial1 b < ] ] ] [ partial1 c < ] ]
[ map [ filter a [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] > ] ] [ partial0 2 * ] ]
[ max a [ reduce [ range 0 [ + [ min c b ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ reduce [ range 0 [ + [ reduce [ slice a 0 [ / [ len a ] 2 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ slice [ reverse a ] [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ]
[ head [ filter a [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] > ] ] ]
[ reduce [ range 1 a ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ reverse b ] ] ] [ deref [ reverse b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ map [ filter [ range 0 [ len [ map [ slice a b c ] square ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ map [ slice a b c ] square ] int-deref ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ filter [ map [ map a [ partial1 b - ] ] [ partial1 c - ] ] [ partial0 [ reduce [ map [ map a [ partial1 b - ] ] [ partial1 c - ] ] 0 max ] > ] ] 0 max ]
[ filter [ map a [ partial1 b - ] ] [ partial1 [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] < ] ]
[ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] > ] ]
[ map [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] is_prime ] [ partial1 b - ] ]
[ filter [ reverse a ] [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map [ range 0 [ + [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] 1 ] ] square ]
[ map [ filter [ range 0 [ len [ map [ filter a [ partial1 b > ] ] [ partial1 c + ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ map [ filter a [ partial1 b > ] ] [ partial1 c + ] ] int-deref ] ]
[ range 0 [ + [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 max ] 1 ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ filter [ slice a b c ] [ partial1 [ reduce [ filter d [ partial0 [ reduce d 1000000000 min ] < ] ] 1000000000 min ] > ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ]
[ reduce [ reverse [ digits [ reduce [ slice a b c ] 0 max ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map [ reverse [ slice a 0 [ / [ len a ] 2 ] ] ] square ]
[ range 1 [ + [ reduce [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial0 [ reduce [ slice a 0 [ / [ len a ] 2 ] ] 0 max ] > ] ] 0 max ] 1 ] ]
[ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reverse [ map [ map a [ partial1 b * ] ] [ partial1 c - ] ] ]
[ slice a [ strlen [ reduce [ map [ str_split b " " ] [ partial0 0 str_index ] ] "" str_concat ] ] c ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ deref [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ / [ len [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] 2 ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ filter c [ partial1 b < ] ] [ partial0 2 * ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ map [ filter c [ partial1 b < ] ] [ partial0 2 * ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ + a [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ reduce [ map [ range 0 [ len [ slice a [ head b ] c ] ] ] [ lambda1 [ == [ deref [ slice a [ head b ] c ] arg1 ] [ deref [ slice a [ head b ] c ] [ - [ - [ len [ slice a [ head b ] c ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ digits [ deref a [ / [ len a ] 2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ reduce [ reverse [ digits [ head [ map a square ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 e * ] ] ] ] ] ] [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 e * ] ] ] ] ] ] ]
[ is_sorted [ slice a b [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ reverse b ] [ partial0 2 * ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ map [ reverse b ] [ partial0 2 * ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ >= [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ digits [ reduce [ reverse [ digits [ / [ reduce a 0 + ] [ len a ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ map [ filter a [ partial1 b > ] ] [ partial1 c - ] ] 1000000000 min ]
[ filter [ map a [ partial1 [ reduce [ slice [ sort c ] 0 b ] 0 + ] + ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ reduce [ map a [ partial0 2 * ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ reverse [ digits [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ reduce [ map a [ partial0 2 * ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ map [ digits [ max a b ] ] square ]
[ map [ digits a ] [ partial1 [ reduce [ slice [ reverse [ sort c ] ] 0 b ] 0 + ] + ] ]
[ reduce [ filter a [ partial1 [ strlen b ] > ] ] 0 max ]
[ reduce [ filter [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ] [ partial0 [ reduce [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ filter [ slice a b [ * c d ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ is_sorted [ map [ slice a b c ] [ partial0 2 * ] ] ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter [ range 1 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ combine ! is_prime ] ]
[ reduce [ filter a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] < ] ] 0 max ]
[ map [ reverse [ filter a [ partial1 b < ] ] ] square ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ map [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] is_prime ] [ partial1 b - ] ]
[ map [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] square ]
[ reduce [ slice [ reverse a ] 0 [ / [ len [ reverse a ] ] 2 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ filter [ digits [ max a b ] ] [ partial0 [ reduce [ digits [ max a b ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ + [ * [ - [ reduce a 0 max ] c ] [ - [ reduce a 0 max ] c ] ] [ * [ - [ reduce b 0 max ] d ] [ - [ reduce b 0 + ] d ] ] ]
[ reduce [ range 0 [ + [ reduce [ reverse a ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ map [ range 0 [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] square ]
[ reverse [ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] square ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map [ digits [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] [ partial1 b * ] ]
[ reduce [ slice [ sort [ range 1 a ] ] 0 [ strlen b ] ] 0 + ]
[ head [ slice a b [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] ]
[ range 0 [ reduce [ range 0 [ + [ reduce [ slice [ sort a ] 0 b ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ digits [ + [ * [ - a c ] [ - a c ] ] [ * [ - [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] d ] [ - [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] d ] ] ] ]
[ floor [ sqrt [ + [ * [ - [ strlen a ] c ] [ - [ strlen a ] c ] ] [ * [ - b [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 d + ] ] ] ] ] [ - b [ strlen d ] ] ] ] ] ]
[ map [ filter a [ lambda1 [ reduce [ map [ filter c [ partial1 b < ] ] [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ range 0 [ + [ reduce [ range 0 [ + [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] 1 ] ]
[ reduce [ map [ range 0 [ len [ filter [ range 0 [ + a 1 ] ] [ partial1 b > ] ] ] ] [ lambda1 [ == [ deref [ filter [ range 0 [ + a 1 ] ] [ partial1 b > ] ] arg1 ] [ deref [ filter [ range 0 [ + a 1 ] ] [ partial1 b > ] ] [ - [ - [ len [ filter [ range 0 [ + a 1 ] ] [ partial1 b > ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ map [ range 0 [ min [ len a ] [ len [ map c [ partial1 b + ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map c [ partial1 b + ] ] arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ reduce [ slice [ sort [ filter a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] < ] ] ] 0 c ] 0 + ]
[ slice a [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] c ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ reduce [ filter [ range 1 [ + a 1 ] ] [ partial0 [ reduce [ range 1 [ + a 1 ] ] 0 max ] > ] ] 0 max ]
[ reduce [ map [ range 0 [ len [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] ] ] [ lambda1 [ == [ deref [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] arg1 ] [ deref [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] [ - [ - [ len [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ - [ reduce [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ map [ slice [ digits a ] [ / [ len [ digits a ] ] 2 ] [ len [ digits a ] ] ] [ partial0 2 * ] ]
[ reverse [ filter a [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] > ] ] ]
[ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ partial1 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] > ] ]
[ range 1 [ + [ deref [ filter a [ partial1 b > ] ] [ / [ len [ filter a [ partial1 b > ] ] ] 2 ] ] 1 ] ]
[ digits [ strlen a ] ]
[ map [ range 1 [ + [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] 1 ] ] [ partial0 2 * ] ]
[ map [ filter [ range 0 [ len [ range 0 [ + [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ range 0 [ + [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] int-deref ] ]
[ min [ reduce [ range 0 [ + [ head a ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] b ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ reduce [ map a [ partial1 b - ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter c [ partial1 d < ] ] ] ] [ deref [ filter c [ partial1 d < ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ reverse [ filter b [ combine ! is_prime ] ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ reverse [ filter b [ combine ! is_prime ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ range 0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ combine ! is_prime ] ]
[ * a [ reduce [ filter [ map b [ partial0 2 * ] ] [ partial0 [ reduce [ map b [ partial0 2 * ] ] 1000000000 min ] < ] ] 1000000000 min ] ]
[ + [ reduce [ range 0 [ + [ reduce a 1000000000 min ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] b ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ head [ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map [ reverse a ] [ partial1 [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] + ] ]
[ digits [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ]
[ slice [ map [ range 0 [ + a 1 ] ] [ partial1 b * ] ] c d ]
[ reduce [ reverse [ digits [ reduce [ filter [ slice a b c ] [ partial0 [ reduce [ slice a b c ] 0 max ] > ] ] 0 max ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce [ digits b ] 0 + ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] + ] ] ] ]
[ range 0 [ + a 1 ] ]
[ filter a [ lambda1 [ reduce [ map [ filter [ slice d b c ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] square ] 1000000000 min ]
[ filter [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] square ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ < [ reduce [ filter [ filter a [ partial1 b < ] ] [ partial0 [ reduce [ filter a [ partial1 b < ] ] 0 max ] > ] ] 0 max ] c ]
[ head [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ reduce [ range 0 [ + [ strlen [ reduce a "" str_concat ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] [ reduce [ slice [ sort e ] 0 f ] 0 + ] ] [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] [ reduce [ slice [ sort e ] 0 f ] 0 + ] ] ] ]
[ slice [ slice a 0 [ / [ len a ] 2 ] ] [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] c ]
[ floor [ sqrt [ + [ * [ - [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] c ] [ - [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] c ] ] [ * [ - b [ reduce [ reverse [ digits d ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ - b [ reduce [ reverse [ digits d ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] ] ] ]
[ filter a [ partial1 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] > ] ]
[ floor [ sqrt [ + [ * [ - a [ reduce c 0 max ] ] [ - a [ reduce c 0 max ] ] ] [ * [ - b [ reduce d 0 max ] ] [ - b [ reduce d 0 max ] ] ] ] ] ] ]
[ filter [ map a [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] - ] ] [ lambda1 [ reduce [ map d [ partial0 arg1 == ] ] false || ] ] ]
[ > [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 ]
[ head [ filter a [ partial1 b > ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ deref [ filter a [ partial1 b > ] ] [ / [ len [ filter a [ partial1 b > ] ] ] 2 ] ] ]
[ map [ digits [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] [ partial1 c + ] ]
[ is_sorted [ slice [ reverse a ] b c ] ]
[ reduce [ reverse [ digits [ head [ map a square ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ filter b [ combine ! is_prime ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ filter b [ combine ! is_prime ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reverse [ map [ filter [ range 0 [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ slice a [ / [ len a ] 2 ] [ len a ] ] int-deref ] ] ]
[ len [ map a [ partial1 [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] b ] * ] ] ]
[ reduce [ filter [ slice [ reverse a ] b c ] [ partial0 [ reduce [ slice [ reverse a ] b c ] 0 max ] > ] ] 0 max ]
[ map a [ partial1 [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] - ] ]
[ filter [ reverse a ] [ lambda1 [ reduce [ map [ slice e b c ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] 1000000000 min ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ filter [ slice [ reverse a ] 0 [ / [ len [ reverse a ] ] 2 ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ slice [ reverse a ] b [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ head [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] ]
[ floor [ sqrt [ + [ * [ - a [ reduce [ map [ range 0 [ min [ len d ] [ len e ] ] ] [ lambda1 [ if [ > [ deref d arg1 ] [ deref e arg1 ] ] 1 0 ] ] ] 0 + ] ] [ - a [ reduce [ map [ range 0 [ min [ len d ] [ len e ] ] ] [ lambda1 [ if [ > [ deref d arg1 ] [ deref e arg1 ] ] 1 0 ] ] ] 0 + ] ] ] [ * [ - b f ] [ - b f ] ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ head [ filter [ slice a b c ] [ partial1 d > ] ] ]
[ reduce [ filter a [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] > ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ filter [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 [ reduce [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 max ] > ] ] 0 max ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ filter [ map a [ partial1 b + ] ] is_prime ] 0 max ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ slice [ reverse [ sort [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ combine ! is_prime ] ] ] ] 0 b ] 0 + ]
[ filter a [ partial1 [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] > ] ]
[ floor [ sqrt [ + [ * [ - [ reduce [ slice [ sort a ] 0 b ] 0 + ] d ] [ - [ reduce [ slice [ sort a ] 0 b ] 0 + ] d ] ] [ * [ - c [ reduce [ reverse [ digits e ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ - c [ reduce [ reverse [ digits e ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] ] ] ]
[ min [ head [ map a [ partial0 2 * ] ] ] b ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ map [ filter [ range 0 [ len [ range 0 [ deref [ sort a ] [ / [ len a ] 2 ] ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ range 0 [ deref [ sort a ] [ / [ len a ] 2 ] ] ] int-deref ] ]
[ reduce [ range 0 [ + [ deref [ range 1 a ] [ / [ len [ range 1 a ] ] 2 ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ + [ * [ - [ + a b ] d ] [ - [ + a b ] d ] ] [ * [ - c e ] [ - c e ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ reverse [ digits [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ slice a b [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ range 0 [ + [ head a ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ reduce [ map [ range 0 [ min [ len [ filter a [ lambda1 [ reduce [ map [ slice e b c ] [ partial0 arg1 == ] ] false || ] ] ] ] [ len f ] ] ] [ lambda1 [ if [ < [ deref [ filter a [ lambda1 [ reduce [ map [ slice e b c ] [ partial0 arg1 == ] ] false || ] ] ] arg1 ] [ deref f arg1 ] ] 1 0 ] ] ] 0 + ]
[ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len d ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ] - ] ]
[ map [ map [ filter [ range 0 [ len [ slice a 0 [ / [ len a ] 2 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ slice a 0 [ / [ len a ] 2 ] ] int-deref ] ] [ partial0 2 * ] ]
[ floor [ sqrt [ + [ * [ - [ deref [ sort a ] [ / [ len a ] 2 ] ] c ] [ - [ deref [ sort a ] [ / [ len a ] 2 ] ] c ] ] [ * [ - b [ reduce [ filter d [ partial0 [ reduce d 0 max ] > ] ] 0 max ] ] [ - b [ reduce [ filter d [ partial0 [ reduce d 0 max ] > ] ] 0 max ] ] ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ filter [ map a [ partial1 [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] + ] ] [ partial0 [ reduce [ map a [ partial1 [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] + ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ reduce [ range 0 [ + [ deref [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ / [ len [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ] 2 ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ reverse [ range 1 [ + [ deref a [ / [ len a ] 2 ] ] 1 ] ] ]
[ map [ filter a [ partial1 b < ] ] [ partial1 [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 c + ] ] ] ] - ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ len [ slice [ map a [ partial1 b + ] ] 0 [ / [ len [ map a [ partial1 b + ] ] ] 2 ] ] ]
[ reduce [ map [ range 0 [ len [ slice a [ head b ] c ] ] ] [ lambda1 [ == [ deref [ slice a [ head b ] c ] arg1 ] [ deref [ slice a [ head b ] c ] [ - [ - [ len [ slice a [ head b ] c ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ reduce [ filter [ slice a b c ] [ lambda1 [ reduce [ map e [ partial0 arg1 == ] ] false || ] ] ] 0 max ]
[ head [ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ]
[ head [ slice [ slice a b c ] [ / [ len [ slice a b c ] ] 2 ] [ len [ slice a b c ] ] ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ reverse [ slice e b c ] ] ] ] [ deref [ reverse [ slice e b c ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] * ] ] ] ] ]
[ head [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ head [ map [ map a [ partial1 b - ] ] [ partial0 2 * ] ] ]
[ reduce [ filter [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 [ reduce [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] * ] ] ] ] ]
[ filter [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ digits [ * a [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ]
[ + [ reduce [ reverse [ digits [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] b ]
[ reduce [ reverse [ digits [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ reduce [ range 0 [ + d 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] [ - b [ reduce [ range 0 [ + d 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] ] ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ max a [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ range 1 [ + [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ floor [ sqrt [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] ] [ - b [ floor [ sqrt [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] ] ] ] ] 1 ] ]
[ map [ filter a [ partial1 b < ] ] [ partial1 [ strlen c ] * ] ]
[ + [ * [ - [ max a b ] d ] [ - [ max a b ] d ] ] [ * [ - c [ head e ] ] [ - c [ head e ] ] ] ]
[ head [ map a [ partial1 [ reduce [ slice [ reverse [ sort c ] ] 0 b ] 0 + ] - ] ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ filter [ range 1 a ] [ lambda1 [ reduce [ map [ slice e b c ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ range 0 [ + [ strlen [ reduce a "z" str_min ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ head [ map [ map a [ partial1 b - ] ] [ partial0 2 * ] ] ]
[ reduce [ map [ range 0 [ len [ filter a [ partial1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 b + ] ] ] ] > ] ] ] ] [ lambda1 [ == [ deref [ filter a [ partial1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 b + ] ] ] ] > ] ] arg1 ] [ deref [ filter a [ partial1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 b + ] ] ] ] > ] ] [ - [ - [ len [ filter a [ partial1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 b + ] ] ] ] > ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ reduce [ map [ range 0 [ min [ len [ filter [ filter a [ partial1 b < ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] [ len c ] ] ] [ lambda1 [ if [ < [ deref [ filter [ filter a [ partial1 b < ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ floor [ sqrt [ + [ * [ - a [ reduce [ filter c [ partial0 [ reduce c 0 max ] > ] ] 0 max ] ] [ - a [ reduce [ filter c [ partial0 [ reduce c 0 max ] > ] ] 0 max ] ] ] [ * [ - b [ reduce [ filter d [ partial0 [ reduce d 1000000000 min ] < ] ] 1000000000 min ] ] [ - b [ reduce [ filter d [ partial0 [ reduce d 1000000000 min ] < ] ] 1000000000 min ] ] ] ] ] ]
[ + [ reduce [ slice [ sort a ] 0 b ] 0 + ] [ reduce [ filter c [ partial0 [ reduce c 1000000000 min ] < ] ] 1000000000 min ] ]
[ / [ reduce [ digits [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ] 0 + ] [ len [ digits [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ] ]
[ < [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 1 ]
[ reverse [ map [ digits a ] [ partial0 2 * ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] + ] ] ] ]
[ map [ slice [ filter a is_prime ] 0 [ / [ len [ filter a is_prime ] ] 2 ] ] square ]
[ head [ slice a b [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] c ] ] ]
[ is_sorted [ map a [ partial1 b * ] ] ]
[ range 0 [ + a 1 ] ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map [ slice [ digits a ] [ / [ len [ digits a ] ] 2 ] [ len [ digits a ] ] ] [ partial0 2 * ] ]
[ reduce [ range 0 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ reverse b ] ] ] [ deref [ reverse b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ reduce [ map [ range 0 [ min [ len [ reverse a ] ] [ len [ slice d b c ] ] ] ] [ lambda1 [ if [ > [ deref [ reverse a ] arg1 ] [ deref [ slice d b c ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ map [ filter [ filter a [ partial1 b > ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] square ]
[ strlen a ]
[ map [ slice a 0 [ / [ len a ] 2 ] ] square ]
[ slice a [ strlen b ] [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] ]
[ digits [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 d * ] ] ] ] ] ] [ - b [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 d * ] ] ] ] ] ] ] ] ]
[ head [ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ map a [ partial0 2 * ] ] 1000000000 min ] ]
[ + a [ reduce [ map [ range 0 [ min [ len [ map d [ partial1 b + ] ] ] [ len c ] ] ] [ lambda1 [ if [ > [ deref [ map d [ partial1 b + ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ filter [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] [ partial1 d > ] ]
[ map [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] square ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ head [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ + [ * [ - [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ] [ - [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ] ] [ * [ - c [ strlen e ] ] [ - c [ strlen e ] ] ] ]
[ filter [ map a square ] [ partial1 [ deref b [ / [ len b ] 2 ] ] < ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ slice d b c ] [ partial0 2 * ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map [ slice d b c ] [ partial0 2 * ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ len [ filter b [ combine ! is_prime ] ] ] ] ] [ lambda1 [ if [ < [ deref [ slice a [ / [ len a ] 2 ] [ len a ] ] arg1 ] [ deref [ filter b [ combine ! is_prime ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ map [ reverse [ digits a ] ] [ partial0 2 * ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ map [ digits [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ] [ partial0 2 * ] ]
[ + [ * [ - [ reduce [ slice [ sort a ] 0 b ] 0 + ] d ] [ - [ reduce [ slice [ sort a ] 0 b ] 0 + ] d ] ] [ * [ - c [ head e ] ] [ - c [ head e ] ] ] ]
[ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ reverse c ] ] ] [ deref [ reverse c ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ slice a [ strlen b ] [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] c ] ]
[ digits [ - [ reduce [ range 1 a ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ head [ map [ map a [ partial1 b - ] ] [ partial0 2 * ] ] ]
[ filter [ filter [ map a [ partial1 b - ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial1 c < ] ]
[ reverse [ map a [ partial1 [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] b ] * ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c + ] ] [ partial0 2 * ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ deref [ sort [ reverse a ] ] [ / [ len [ reverse a ] ] 2 ] ] ]
[ range 1 [ reduce [ slice [ sort a ] 0 [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ] ]
[ >= [ reduce [ filter [ slice a b c ] [ partial0 [ reduce [ slice a b c ] 1000000000 min ] < ] ] 1000000000 min ] 1 ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ range 0 [ + [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reverse [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ]
[ reduce [ reverse [ digits [ deref [ sort [ map a square ] ] [ / [ len [ map a square ] ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ floor [ sqrt [ + [ * [ - a [ reduce [ filter c [ partial0 [ reduce c 1000000000 min ] < ] ] 1000000000 min ] ] [ - a [ reduce [ filter c [ partial0 [ reduce c 1000000000 min ] < ] ] 1000000000 min ] ] ] [ * [ - b [ head d ] ] [ - b [ head d ] ] ] ] ] ]
[ digits [ strlen a ] ]
[ + [ * [ - a [ reduce [ map [ range 0 [ min [ len c ] [ len d ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ] ] [ - a [ reduce [ map [ range 0 [ min [ len c ] [ len d ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ] ] ] [ * [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g i ] [ - g i ] ] ] ] [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g i ] [ - g i ] ] ] ] ]
[ head [ map a [ partial1 [ min c b ] - ] ] ]
[ slice a [ / [ reduce b 0 + ] [ len b ] ] [ / [ reduce c 0 + ] [ len c ] ] ]
[ floor [ sqrt [ + [ * [ - a [ + [ * [ - f c ] [ - f c ] ] [ * [ - g d ] [ - g d ] ] ] ] [ - a [ + [ * [ - f c ] [ - f c ] ] [ * [ - g d ] [ - g d ] ] ] ] ] [ * [ - b [ reduce h 0 max ] ] [ - b [ reduce h 0 max ] ] ] ] ] ]
[ reduce [ digits [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ] 0 + ]
[ reduce [ slice [ sort a ] 0 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ]
[ range 0 [ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] ] ] ]
[ map [ filter [ range 0 [ len [ range 0 [ reduce a 0 + ] 1 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ range 1 [ reduce a 0 + ] ] int-deref ] ]
[ map [ reverse a ] [ partial1 [ strlen b ] + ] ]
[ > [ head a ] [ deref b [ / [ len b ] 2 ] ] ]
[ max [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ reduce [ map [ range 0 [ min [ len [ range 1 [ + [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] 1 ] ] ] [ len f ] ] ] [ lambda1 [ if [ < [ deref [ range 1 [ + [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] 1 ] ] arg1 ] [ deref f arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len [ filter a [ lambda1 [ reduce [ map [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 arg1 == ] ] false || ] ] ] ] [ len d ] ] ] [ lambda1 [ if [ > [ deref [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ]
[ range 0 [ floor [ sqrt [ + [ * [ - a [ reduce [ filter c [ partial0 [ reduce c 1000000000 min ] < ] ] 1000000000 min ] ] [ - a [ reduce [ filter c [ partial0 [ reduce c 1000000000 min ] < ] ] 1000000000 min ] ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ]
[ map a [ partial1 [ reduce [ slice [ sort c ] 0 [ head b ] ] 0 + ] * ] ]
[ reduce [ range 0 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ map b square ] ] ] [ deref [ map b square ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ floor [ sqrt [ + [ * [ - a [ strlen c ] ] [ - a [ strlen c ] ] ] [ * [ - [ reduce b 1000000000 min ] d ] [ - [ reduce b 1000000000 min ] d ] ] ] ] ] ]
[ reduce [ slice [ sort a ] 0 [ reduce [ reverse [ digits [ strlen c ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 + ]
[ deref [ digits [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ] [ / [ len [ digits [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ] ] 2 ] ]
[ filter [ range 0 [ + a 1 ] ] [ lambda1 [ reduce [ map [ range 0 [ + b 1 ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ map [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] [ partial1 c + ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ > [ deref [ digits a ] [ / [ len [ digits a ] ] 2 ] ] 1 ]
[ map [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial0 2 * ] ] square ]
[ map [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ] [ partial0 2 * ] ]
[ is_sorted [ slice a b [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ floor [ sqrt [ + [ * [ - a [ min c d ] ] [ - a [ min c d ] ] ] [ * [ - b [ reduce [ range 0 [ + e 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] [ - b [ reduce [ range 0 [ + e 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] ] ] ] ]
[ digits [ max a [ deref [ sort b ] [ / [ len b ] 2 ] ] ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ range 0 [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ reduce [ slice [ range 1 a ] [ / [ len [ range 1 a ] ] 2 ] [ len [ range 1 a ] ] ] 0 max ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ digits [ head a ] ]
[ reverse [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ filter [ slice a b c ] [ combine ! is_prime ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ reduce [ map [ range 0 [ len [ slice a [ head b ] c ] ] ] [ lambda1 [ == [ deref [ slice a [ head b ] c ] arg1 ] [ deref [ slice a [ head b ] c ] [ - [ - [ len [ slice a [ head b ] c ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ floor [ sqrt [ + [ * [ - a [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] d ] ] [ - a [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] d ] ] ] [ * [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ head [ slice a [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] c ] ]
[ slice [ digits a ] [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] d ]
[ reduce [ range 0 [ + [ reduce [ filter [ digits a ] [ partial0 [ reduce [ digits a ] 0 max ] > ] ] 0 max ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] * ] ] ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ + [ * [ - a [ reduce c 0 max ] ] [ - a [ reduce c 0 max ] ] ] [ * [ - b d ] [ - b d ] ] ] ]
[ filter [ map a [ partial1 [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] b ] + ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ]
[ < [ head a ] [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ reduce [ filter [ map [ reverse a ] square ] [ partial0 [ reduce [ map [ reverse a ] square ] 0 max ] > ] ] 0 max ]
[ reduce [ reverse [ digits [ head [ map a square ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ map [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] [ partial0 2 * ] ]
[ filter [ range 0 a ] [ partial1 [ reduce b 1000000000 min ] > ] ]
[ digits [ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map [ map [ range 1 [ + a 1 ] ] square ] [ partial0 2 * ] ]
[ map [ map [ filter a [ combine ! is_prime ] ] [ partial0 2 * ] ] [ partial1 b + ] ]
[ reduce [ reverse [ digits [ len [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ range 0 [ len [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] ] ] [ lambda1 [ == [ deref [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] arg1 ] [ deref [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] [ - [ - [ len [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ digits [ strlen [ reduce a "z" str_min ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reverse [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ map [ range 0 [ len [ slice a [ head b ] c ] ] ] [ lambda1 [ == [ deref [ slice a [ head b ] c ] arg1 ] [ deref [ slice a [ head b ] c ] [ - [ - [ len [ slice a [ head b ] c ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ filter a [ lambda1 [ reduce [ map [ map c [ partial1 [ head b ] - ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len [ range 1 [ + a 1 ] ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ range 1 [ + a 1 ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ digits [ - [ reduce [ map a [ partial1 b - ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ reduce [ reverse [ digits [ deref [ sort a ] [ / [ len a ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reverse [ map a [ partial1 b + ] ] ]
[ deref [ sort [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] ]
[ reduce [ slice [ reverse [ sort [ digits a ] ] ] 0 [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] b ] ] 0 + ]
[ filter [ slice [ range 0 a ] b c ] [ combine ! is_prime ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map [ filter a [ lambda1 [ reduce [ map [ map b [ partial0 2 * ] ] [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ]
[ + [ reduce [ map [ range 0 [ min [ len a ] [ len [ filter c [ partial1 b > ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ filter c [ partial1 b > ] ] arg1 ] ] 1 0 ] ] ] 0 + ] d ]
[ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ digits c ] ] ] [ deref [ digits c ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ filter [ map a [ partial1 [ min c b ] + ] ] [ partial0 [ reduce [ map a [ partial1 [ min c b ] + ] ] 0 max ] > ] ] 0 max ]
[ reverse [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ range 0 [ + [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ reduce [ digits [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ] 0 + ]
[ slice a [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] c ]
[ map [ digits [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] ] [ partial0 2 * ] ]
[ reduce [ slice [ sort [ slice a 0 [ / [ len a ] 2 ] ] ] 0 [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ > [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] 0 + ]
[ slice a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ]
[ map a [ partial1 b - ] ]
[ map [ filter a [ partial1 b < ] ] [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len d ] ] [ deref d arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] * ] ]
[ slice [ filter [ reverse a ] is_prime ] 0 [ / [ len [ filter [ reverse a ] is_prime ] ] 2 ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ + a [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] ]
[ + [ * [ - [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] c ] [ - [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] c ] ] [ * [ - b [ reduce [ reverse [ digits d ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ - b [ reduce [ reverse [ digits d ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ + [ * [ - a [ reduce c 0 max ] ] [ - a [ reduce c 0 max ] ] ] [ * [ - b d ] [ - b d ] ] ] ]
[ reduce [ slice [ reverse [ sort [ digits [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ] ] 0 c ] 0 + ]
[ filter a [ partial1 [ strlen b ] > ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ filter [ map a [ partial1 b * ] ] [ partial0 [ reduce [ map a [ partial1 b * ] ] 1000000000 min ] < ] ] 1000000000 min ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map c [ partial1 b + ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map c [ partial1 b + ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ len [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ] ] ] [ lambda1 [ == [ deref [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ] arg1 ] [ deref [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ] [ - [ - [ len [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ range 0 [ deref [ sort a ] [ / [ len a ] 2 ] ] ]
[ digits [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] ]
[ min [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] [ head f ] ]
[ reduce [ range 0 [ + [ strlen [ reduce a "z" str_min ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ slice [ map a [ partial1 b + ] ] c [ head d ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ filter c [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] > ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ filter c [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] < ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ floor [ sqrt [ + [ * [ - a [ reduce c 0 max ] ] [ - a [ reduce c 0 max ] ] ] [ * [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] [ - b [ reduce h 0 max ] ] ] ] ] ]
[ < [ reduce [ filter [ filter a [ partial1 b < ] ] [ partial0 [ reduce [ filter a [ partial1 b < ] ] 0 max ] > ] ] 0 max ] 1 ]
[ reduce [ map [ range 0 [ len [ map [ slice a b c ] [ partial1 d * ] ] ] ] [ lambda1 [ == [ deref [ map [ slice a b c ] [ partial1 d * ] ] arg1 ] [ deref [ map [ slice a b c ] [ partial1 d * ] ] [ - [ - [ len [ map [ slice a b c ] [ partial1 d * ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ range 1 [ reduce [ slice [ reverse [ sort [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] ] 0 b ] 0 + ] ]
[ head [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ < a [ deref b [ / [ len b ] 2 ] ] ]
[ reduce [ range 0 [ + [ head [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ map [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ]
[ digits [ reduce [ range 0 [ + [ / [ reduce a 0 + ] [ len a ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ map [ range 0 [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] square ]
[ reduce [ filter [ filter [ map a [ partial1 b * ] ] [ combine ! is_prime ] ] [ partial0 [ reduce [ filter [ map a [ partial1 b * ] ] [ combine ! is_prime ] ] 0 max ] > ] ] 0 max ]
[ reduce [ reverse [ digits [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter b is_prime ] ] ] [ deref [ filter b is_prime ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map [ slice [ digits a ] [ / [ len [ digits a ] ] 2 ] [ len [ digits a ] ] ] [ partial0 2 * ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ range 0 [ + [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ reverse [ slice [ map a [ partial1 b - ] ] 0 [ / [ len [ map a [ partial1 b - ] ] ] 2 ] ] ]
[ filter [ map [ filter [ range 0 [ len [ slice a 0 [ / [ len a ] 2 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ slice a 0 [ / [ len a ] 2 ] ] int-deref ] ] [ partial1 b < ] ]
[ - [ reduce [ map [ reverse a ] square ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ reverse [ map a square ] ] 0 max ]
[ reverse [ map a [ partial1 b + ] ] ]
[ filter a [ partial1 [ strlen b ] > ] ]
[ reduce [ slice [ sort a ] 0 [ reduce [ reverse [ digits [ reduce [ slice [ sort d ] 0 b ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 + ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] b c ] 0 max ]
[ map [ filter a [ lambda1 [ reduce [ map [ map c [ partial1 b + ] ] [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c + ] ]
[ filter [ reverse [ filter a [ partial1 b < ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ reduce [ map a [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] - ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len d ] ] [ deref d arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ floor [ sqrt [ + [ * [ - [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] d ] [ - [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] d ] ] [ * [ - c [ min e ] ] [ - c e ] ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ reverse [ filter c [ partial1 b < ] ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ reverse [ filter c [ partial1 b < ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ head [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ filter a [ lambda1 [ reduce [ map [ filter d [ partial1 [ + c b ] < ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] 0 max ]
[ head [ filter [ map a [ partial1 b + ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ]
[ map [ range 0 [ + [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] 1 ] ] [ partial1 b * ] ]
[ filter [ reverse [ slice a b c ] ] [ partial1 d < ] ]
[ floor [ sqrt [ + [ * [ - a [ reduce [ map [ range 0 [ min [ len c ] [ len d ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ] ] [ - a [ reduce [ map [ range 0 [ min [ len c ] [ len d ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ] ] ] [ * [ - b [ strlen e ] ] [ - b [ strlen e ] ] ] ] ] ]
[ range 1 [ + [ reduce [ slice [ reverse [ sort a ] ] 0 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 + ] 1 ] ]
[ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - [ deref [ sort b ] [ / [ len b ] 2 ] ] [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] d ] ] [ - [ deref [ sort b ] [ / [ len b ] 2 ] ] [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] d ] ] ] ] ] ]
[ min [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ slice d b c ] ] ] [ deref [ slice d b c ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ]
[ filter [ filter a [ partial1 [ head b ] < ] ] [ combine ! is_prime ] ]
[ map [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] square ]
[ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ reduce [ filter [ filter d [ lambda1 [ reduce [ map e [ partial0 arg1 == ] ] false || ] ] ] [ partial0 [ reduce [ filter d [ lambda1 [ reduce [ map e [ partial0 arg1 == ] ] false || ] ] ] 0 max ] > ] ] 0 max ] ] [ - b [ reduce [ filter d [ lambda1 [ reduce [ map e [ partial0 arg1 == ] ] false || ] ] ] 0 max ] ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ head [ filter a [ partial1 b > ] ] ] ]
[ min a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ filter a [ partial1 b > ] ] [ partial1 [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 c + ] ] ] ] > ] ]
[ map [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] [ partial0 2 * ] ]
[ + [ * [ - a [ strlen d ] ] [ - a [ strlen d ] ] ] [ * [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] ] ]
[ range 1 [ + [ reduce [ range 0 [ + [ min a b ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] 1 ] ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reverse [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ]
[ min [ min a b ] [ head c ] ]
[ filter [ reverse [ map a [ partial1 b - ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter a [ lambda1 [ reduce [ map [ range 0 [ head b ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ floor [ sqrt [ + [ * [ - [ min a b ] d ] [ - [ min a b ] d ] ] [ * [ - c e ] [ - c e ] ] ] ] ]
[ < [ reduce [ reverse [ digits [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] c ]
[ reduce [ range 0 [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] 0 + ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ slice [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ / [ len [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ] 2 ] [ len [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ] ]
[ map [ slice a [ strlen b ] c ] [ partial1 e - ] ]
[ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 [ reduce [ slice [ sort c ] 0 b ] 0 + ] < ] ]
[ filter [ slice a [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] b ] c ] [ lambda1 [ reduce [ map d [ partial0 arg1 == ] ] false || ] ] ]
[ digits [ strlen [ reduce a "z" str_min ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ head [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ filter a [ partial1 [ reduce [ map [ range 0 [ min [ len d ] [ len [ filter b is_prime ] ] ] ] [ lambda1 [ if [ < [ deref d arg1 ] [ deref [ filter b is_prime ] arg1 ] ] 1 0 ] ] ] 0 + ] > ] ]
[ map [ range 0 [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] [ partial0 2 * ] ]
[ + [ * [ - a [ reduce d 1000000000 min ] ] [ - a [ reduce d 1000000000 min ] ] ] [ * [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] [ - [ reduce c 1000000000 min ] e ] ] ]
[ map a [ partial1 b - ] ]
[ < [ head [ map a [ partial1 b - ] ] ] 1 ]
[ reduce [ reverse [ digits [ head [ map a square ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ range 0 [ min [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ len [ map c [ partial1 b + ] ] ] ] ] [ lambda1 [ if [ < [ deref [ slice a [ / [ len a ] 2 ] [ len a ] ] arg1 ] [ deref [ map c [ partial1 b + ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ slice [ sort a ] 0 [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ]
[ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ slice b [ / [ len b ] 2 ] [ len b ] ] ] ] [ deref [ slice b [ / [ len b ] 2 ] [ len b ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map [ reverse [ digits a ] ] [ partial0 2 * ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ filter a [ partial1 [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ strlen b ] ] < ] ]
[ range 0 [ reduce [ slice a [ / [ len a ] 2 ] [ len a ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ floor [ sqrt [ + [ * [ - a [ reduce [ filter c [ partial0 [ reduce c 1000000000 min ] < ] ] 1000000000 min ] ] [ - a [ reduce [ filter c [ partial0 [ reduce c 1000000000 min ] < ] ] 1000000000 min ] ] ] [ * [ - b [ head d ] ] [ - b [ head d ] ] ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ map [ filter [ range 0 [ len [ range 1 [ + a 1 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ range 1 [ + a 1 ] ] int-deref ] ]
[ reduce [ filter [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c > ] ] [ partial0 [ reduce [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c > ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ filter [ range 0 [ + [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] 1 ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ map a [ partial1 [ - [ reduce [ reverse b ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] + ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ slice [ reverse [ sort [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] 0 c ] 0 + ] ]
[ + [ min a b ] [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] ]
[ filter [ map a [ partial1 b * ] ] [ partial1 [ reduce [ map [ range 0 [ min [ len d ] [ len e ] ] ] [ lambda1 [ if [ > [ deref d arg1 ] [ deref e arg1 ] ] 1 0 ] ] ] 0 + ] > ] ]
[ head [ map [ filter [ range 0 [ len [ map a [ partial0 2 * ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ map a [ partial0 2 * ] ] int-deref ] ] ]
[ slice a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] [ - [ reduce d 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ range 1 [ + [ reduce [ slice [ sort a ] 0 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 + ] 1 ] ]
[ range 0 [ + [ reduce [ reverse [ digits [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ digits b ] ] ] [ deref [ digits b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ reverse [ digits [ reduce [ slice [ sort [ map a [ partial1 b * ] ] ] 0 c ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ filter [ slice [ map a [ partial1 b - ] ] 0 [ / [ len [ map a [ partial1 b - ] ] ] 2 ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] * ] ] ] ] ]
[ slice a b [ * c d ] ]
[ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ reduce [ map [ slice d b c ] [ partial0 arg1 == ] ] false || ] ] ]
[ digits [ reduce [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial0 [ reduce [ slice a 0 [ / [ len a ] 2 ] ] 1000000000 min ] < ] ] 1000000000 min ] ]
[ reduce [ slice [ sort a ] 0 [ reduce [ reverse [ digits [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 + ]
[ digits [ reduce [ slice [ sort a ] 0 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 + ] ]
[ reduce [ range 0 [ + [ strlen [ reduce a "" str_concat ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ + [ * [ - a [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ] [ - a [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ] ] [ * [ - b [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] e ] ] [ - b [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] e ] ] ] ]
[ filter [ map a square ] [ partial1 [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] > ] ]
[ map [ digits [ reduce [ slice [ sort a ] 0 b ] 0 + ] ] [ partial1 c - ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ filter a [ partial1 [ reduce [ reverse [ digits [ / [ reduce b 0 + ] [ len b ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] > ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ range 1 [ reduce [ range 0 [ + [ deref [ sort a ] [ / [ len a ] 2 ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ reduce [ slice [ sort [ map a [ partial1 b * ] ] ] 0 [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 + ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter c [ partial1 b < ] ] ] ] [ deref [ filter c [ partial1 b < ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ range 0 [ + a 1 ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter c [ partial1 b < ] ] ] ] [ deref [ filter c [ partial1 b < ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ range 1 [ head [ map a [ partial1 b - ] ] ] ]
[ reduce [ slice a b [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] ] 0 max ]
[ reduce [ range 0 [ + [ deref [ digits a ] [ / [ len [ digits a ] ] 2 ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ range 0 [ + a 1 ] ]
[ filter [ digits a ] [ lambda1 [ reduce [ map [ map b [ partial0 2 * ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ max a [ reduce [ reverse [ digits [ deref [ sort b ] [ / [ len b ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ slice [ sort [ filter [ filter a [ partial1 b < ] ] [ combine ! is_prime ] ] ] 0 c ] 0 + ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ - [ reduce [ filter a [ partial1 b < ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ range 1 [ + [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] b ] ]
[ + [ * [ - a [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ] [ - a [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ] ] [ * [ - b [ deref e [ / [ len e ] 2 ] ] ] [ - b [ deref e [ / [ len e ] 2 ] ] ] ] ]
[ min a [ reduce [ slice [ reverse [ sort c ] ] 0 [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] ] 0 + ] ]
[ map a [ partial1 b - ] ]
[ reduce [ range 0 [ + [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ deref d [ / [ len d ] 2 ] ] ] [ - b [ deref d [ / [ len d ] 2 ] ] ] ] ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ + [ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] b ]
[ slice [ slice a b c ] [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] d ] e ]
[ reverse [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ reduce [ reverse [ digits [ deref [ map a [ partial0 2 * ] ] [ / [ len [ map a [ partial0 2 * ] ] ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ range 1 [ head [ map a square ] ] ]
[ reduce [ filter [ map [ reverse a ] square ] [ partial0 [ reduce [ map [ reverse a ] square ] 0 max ] > ] ] 0 max ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ deref [ sort [ map a [ partial1 [ reduce [ slice [ reverse [ sort c ] ] 0 b ] 0 + ] + ] ] ] [ / [ len [ map a [ partial1 [ reduce [ slice [ reverse [ sort c ] ] 0 b ] 0 + ] + ] ] ] 2 ] ]
[ digits [ head a ] ]
[ slice [ map [ filter a [ partial1 b > ] ] square ] 0 [ / [ len [ map [ filter a [ partial1 b > ] ] square ] ] 2 ] ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ filter a [ lambda1 [ reduce [ map [ map [ slice b [ / [ len b ] 2 ] [ len b ] ] [ partial0 2 * ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ filter [ filter a [ lambda1 [ reduce [ map [ map b [ partial0 2 * ] ] [ partial0 arg1 == ] ] false || ] ] ] [ combine ! is_prime ] ]
[ min a [ deref [ filter b [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ / [ len [ filter b [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] 2 ] ] ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ slice b 0 [ / [ len b ] 2 ] ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ head [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len d ] ] [ deref d arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ digits [ reduce [ range 0 [ + [ head a ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ len [ filter a [ partial1 [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] b ] < ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reverse [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ slice [ reverse [ sort [ filter a [ partial1 b < ] ] ] ] 0 [ reduce [ map [ range 0 [ min [ len c ] [ len d ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ] ] 0 + ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ range 0 [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map a [ partial1 b - ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ reverse [ slice d b c ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ reverse [ slice d b c ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ len [ filter [ filter a [ partial1 b < ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] ] ] [ lambda1 [ == [ deref [ filter [ filter a [ partial1 b < ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] arg1 ] [ deref [ filter [ filter a [ partial1 b < ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] [ - [ - [ len [ filter [ filter a [ partial1 b < ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ filter a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] > ] ]
[ map a [ partial1 [ head [ filter c [ partial1 b < ] ] ] - ] ]
[ filter [ map [ filter [ range 0 [ len [ filter a [ partial1 b > ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ filter a [ partial1 b > ] ] int-deref ] ] is_prime ]
[ head [ slice a b [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] c ] ] ]
[ reduce [ slice [ reverse [ sort [ filter a [ lambda1 [ reduce [ map [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 arg1 == ] ] false || ] ] ] ] ] 0 d ] 0 + ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] ]
[ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] b [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ]
[ map a [ partial1 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] ] ] + ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ + [ * [ - a [ deref c [ / [ len c ] 2 ] ] ] [ - a [ deref c [ / [ len c ] 2 ] ] ] ] [ * [ - b [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] d ] ] [ - b [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] d ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ reduce [ reverse [ digits [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ slice e b c ] ] ] [ deref [ slice e b c ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ slice a b [ reduce [ slice [ reverse [ sort c ] ] 0 [ reduce [ map [ range 0 [ min [ len d ] [ len e ] ] ] [ lambda1 [ if [ > [ deref d arg1 ] [ deref e arg1 ] ] 1 0 ] ] ] 0 + ] ] 0 + ] ]
[ filter [ reverse a ] [ lambda1 [ reduce [ map [ slice b 0 [ / [ len b ] 2 ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ reverse [ digits [ reduce [ range 0 [ + [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ filter [ map [ map a [ partial1 b * ] ] [ partial1 c * ] ] [ partial0 [ reduce [ map [ map a [ partial1 b * ] ] [ partial1 c * ] ] 0 max ] > ] ] 0 max ]
[ map a [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] * ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] + ] ] ] ]
[ filter a [ partial1 [ reduce [ slice [ reverse [ sort [ slice f b c ] ] ] 0 e ] 0 + ] < ] ]
[ deref [ map [ range 0 [ + a 1 ] ] square ] [ / [ len [ map [ range 0 [ + a 1 ] ] square ] ] 2 ] ]
[ + [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ filter a [ partial1 [ strlen b ] > ] ]
[ reduce [ range 0 [ + [ reduce [ reverse [ digits [ deref a [ / [ len a ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ deref [ digits [ reduce [ slice [ sort a ] 0 b ] 0 + ] ] [ / [ len [ digits [ reduce [ slice [ sort a ] 0 b ] 0 + ] ] ] 2 ] ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len a ] [ len [ reverse b ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ reverse b ] arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ map [ digits [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ] [ partial1 b * ] ]
[ map [ filter [ filter a [ partial1 b < ] ] [ partial1 c > ] ] square ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ range 1 [ deref [ sort b ] [ / [ len b ] 2 ] ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ range 1 [ deref [ sort b ] [ / [ len b ] 2 ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ head [ map a [ partial1 b - ] ] ]
[ reverse [ map [ filter [ range 0 [ len [ slice a 0 [ / [ len a ] 2 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ slice a 0 [ / [ len a ] 2 ] ] int-deref ] ] ]
[ map [ slice [ filter a [ partial1 b < ] ] 0 [ / [ len [ filter a [ partial1 b < ] ] ] 2 ] ] square ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map a [ partial1 b - ] ]
[ range 1 [ min a [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ head [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ floor [ sqrt [ + [ * [ - a d ] [ - a d ] ] [ * [ - [ max c b ] e ] [ - [ max c b ] e ] ] ] ] ]
[ reduce [ slice a b c ] 1000000000 min ]
[ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ reduce [ map [ slice e b c ] [ partial0 arg1 == ] ] false || ] ] ]
[ + [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] [ reduce b 0 max ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ filter [ range 1 [ + a 1 ] ] [ partial1 [ deref b [ / [ len b ] 2 ] ] > ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ reverse [ digits [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ filter [ filter [ filter a [ partial1 b > ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial1 c > ] ]
[ head [ map a [ partial1 [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] b ] * ] ] ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce [ reverse [ digits [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 + ]
[ reduce [ filter [ filter a [ lambda1 [ reduce [ map [ filter c [ partial1 b < ] ] [ partial0 arg1 == ] ] false || ] ] ] [ partial0 [ reduce [ filter a [ lambda1 [ reduce [ map [ filter c [ partial1 b < ] ] [ partial0 arg1 == ] ] false || ] ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ reduce [ slice [ sort [ map a [ partial1 b * ] ] ] 0 [ reduce [ filter c [ partial0 [ reduce c 1000000000 min ] < ] ] 1000000000 min ] ] 0 + ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ filter [ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b + ] ] [ partial0 [ reduce [ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b + ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ reduce [ map [ range 0 [ min [ len [ filter a [ lambda1 [ reduce [ map [ slice b [ / [ len b ] 2 ] [ len b ] ] [ partial0 arg1 == ] ] false || ] ] ] ] [ len c ] ] ] [ lambda1 [ if [ > [ deref [ filter a [ lambda1 [ reduce [ map [ slice b [ / [ len b ] 2 ] [ len b ] ] [ partial0 arg1 == ] ] false || ] ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ <= [ deref [ reverse a ] [ / [ len [ reverse a ] ] 2 ] ] 1 ]
[ reduce [ range 0 [ + [ reduce [ range 0 [ + [ head a ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ map [ map a square ] [ partial1 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] + ] ]
[ reduce [ filter [ slice [ reverse a ] b c ] [ partial0 [ reduce [ slice [ reverse a ] b c ] 0 max ] > ] ] 0 max ]
[ reduce [ reverse [ digits [ deref [ range 1 [ + a 1 ] ] [ / [ len [ range 1 [ + a 1 ] ] ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ reverse [ digits [ len a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ head [ filter [ range 0 a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ head [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ filter [ map [ filter [ range 0 [ len [ map a [ partial1 b + ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ map a [ partial1 b + ] ] int-deref ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ digits a ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter c [ partial1 b < ] ] ] ] [ deref [ filter c [ partial1 b < ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ head [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ]
[ filter [ slice [ map a square ] [ / [ len [ map a square ] ] 2 ] [ len [ map a square ] ] ] [ partial1 b < ] ]
[ reduce [ filter [ slice [ reverse a ] b c ] [ partial0 [ reduce [ slice [ reverse a ] b c ] 0 max ] > ] ] 0 max ]
[ reduce [ slice a [ / [ len a ] 2 ] [ len a ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter c [ partial1 b < ] ] ] ] [ deref [ filter c [ partial1 b < ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ reverse [ map [ filter [ range 0 [ len [ map a [ partial1 b - ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ map a [ partial1 b - ] ] int-deref ] ] ]
[ range 0 [ + a 1 ] ]
[ map [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] square ]
[ reduce [ reverse [ digits [ len a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reverse [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] ]
[ + [ reduce a 1000000000 min ] [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ digits [ - [ reduce [ slice a b c ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ reduce [ map [ range 0 [ min [ len [ slice a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] ] [ len f ] ] ] [ lambda1 [ if [ < [ deref [ slice a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] arg1 ] [ deref f arg1 ] ] 1 0 ] ] ] 0 + ]
[ digits [ head [ slice a b c ] ] ]
[ reduce [ map [ range 0 [ len [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c - ] ] ] ] [ lambda1 [ == [ deref [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c - ] ] arg1 ] [ deref [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c - ] ] [ - [ - [ len [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c - ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ filter [ range 0 [ + [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ slice a [ strlen [ reduce [ map [ str_split b " " ] [ partial0 0 str_index ] ] "" str_concat ] ] c ]
[ map [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] [ partial0 2 * ] ]
[ filter [ range 1 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ combine ! is_prime ] ]
[ slice a [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] ]
[ reduce [ map [ range 0 [ len [ map a [ partial1 [ reduce b 0 + ] * ] ] ] ] [ lambda1 [ == [ deref [ map a [ partial1 [ reduce b 0 + ] * ] ] arg1 ] [ deref [ map a [ partial1 [ reduce b 0 + ] * ] ] [ - [ - [ len [ map a [ partial1 [ reduce b 0 + ] * ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ reduce [ reverse [ digits [ reduce [ slice a [ / [ len a ] 2 ] [ len a ] ] 1000000000 min ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ range 0 [ head [ map a square ] ] ]
[ map [ filter a [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] < ] ] square ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ digits [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] ]
[ filter [ slice [ filter a is_prime ] 0 [ / [ len [ filter a is_prime ] ] 2 ] ] [ partial1 b < ] ]
[ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len [ slice d b c ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ slice d b c ] arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] * ] ] ] ] ]
[ digits [ deref a [ / [ len a ] 2 ] ] ]
[ reduce [ slice [ sort [ map a [ partial0 2 * ] ] ] 0 b ] 0 + ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ floor [ sqrt [ + [ * [ - [ / [ reduce a 0 + ] [ len a ] ] c ] [ - [ / [ reduce a 0 + ] [ len a ] ] c ] ] [ * [ - b [ max d e ] ] [ - b [ max d e ] ] ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ map [ filter [ range 0 [ len [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] int-deref ] ]
[ reverse [ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b - ] ] ]
[ range 0 [ + [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] 1 ] ]
[ * [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ] [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ reduce [ filter a [ lambda1 [ reduce [ map [ range 0 [ + b 1 ] ] [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ <= [ head [ filter a [ partial1 b < ] ] ] 0 ]
[ deref [ map [ digits a ] [ partial0 2 * ] ] [ / [ len [ map [ digits a ] [ partial0 2 * ] ] ] 2 ] ]
[ * [ deref a [ / [ len a ] 2 ] ] [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ floor [ sqrt [ + [ * [ - [ - [ reduce [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] [ - [ - [ reduce [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] ] [ * [ - b d ] [ - b d ] ] ] ] ]
[ - [ reduce [ range 1 [ + [ max a b ] 1 ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ map [ range 0 [ min [ len [ slice a b c ] ] [ len [ digits d ] ] ] ] [ lambda1 [ if [ < [ deref [ slice a b c ] arg1 ] [ deref [ digits d ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ digits [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ] 1000000000 min ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ map [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] [ partial1 c * ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ deref [ sort [ range 1 [ + [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] 1 ] ] ] [ / [ len [ range 1 [ + [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] 1 ] ] ] 2 ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] * ] ] ] ] ]
[ reduce [ reverse [ digits [ reduce [ filter [ filter a [ partial1 b < ] ] [ partial0 [ reduce [ filter a [ partial1 b < ] ] 1000000000 min ] < ] ] 1000000000 min ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter a [ lambda1 [ reduce [ map [ map [ filter c [ partial1 b < ] ] [ partial0 2 * ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ slice [ slice a b c ] [ strlen e ] f ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ filter [ range 1 b ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ filter [ range 1 b ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ deref [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ / [ len [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] 2 ] [ len [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] ]
[ - [ reduce [ slice a b [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ reverse [ digits [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ + [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ > [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ map [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] [ partial1 b * ] ]
[ reduce [ filter [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ reduce [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ map [ range 0 [ + a 1 ] ] square ]
[ < [ - [ reduce [ map a [ partial1 b - ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ reduce [ map [ filter a [ partial1 b < ] ] [ partial1 c + ] ] 0 max ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ map [ range 0 [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] square ]
[ filter [ range 0 [ deref [ sort a ] [ / [ len a ] 2 ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ range 0 [ + a 1 ] ]
[ filter [ filter [ range 1 [ + a 1 ] ] [ combine ! is_prime ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] * ] ]
[ * [ reduce [ map [ range 0 [ min [ len [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] c ]
[ map a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] - ] ]
[ map [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] [ partial1 c + ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ range 0 [ min [ len [ slice a b c ] ] [ len [ slice e f g ] ] ] ] [ lambda1 [ if [ < [ deref [ slice a b c ] arg1 ] [ deref [ slice e f g ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ slice [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] b [ reduce [ slice [ sort c ] 0 d ] 0 + ] ]
[ reduce [ range 0 [ + [ strlen [ reduce a "" str_concat ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ filter [ slice a b [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ filter [ slice a b c ] [ partial1 [ reduce [ range 0 [ + d 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] < ] ]
[ reduce [ slice [ range 1 a ] 0 [ / [ len [ range 1 a ] ] 2 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ filter a [ partial1 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] < ] ]
[ digits [ head [ reverse a ] ] ]
[ map [ map [ digits a ] square ] square ]
[ digits [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ / [ reduce a 0 + ] [ len a ] ] ] ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce [ reverse [ digits [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ reverse c ] [ partial1 b + ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ map [ reverse c ] [ partial1 b + ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ head [ map a [ partial1 b - ] ] ]
[ reduce [ map [ range 0 [ min [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ len [ reverse b ] ] ] ] [ lambda1 [ if [ < [ deref [ slice a [ / [ len a ] 2 ] [ len a ] ] arg1 ] [ deref [ reverse b ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ slice a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] c ]
[ range 0 [ + [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - [ head b ] d ] [ - [ head b ] d ] ] ] ] ] 1 ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ digits [ head [ filter a is_prime ] ] ]
[ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len d ] ] [ deref d arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ deref [ sort [ map [ reverse a ] [ partial0 2 * ] ] ] [ / [ len [ map [ reverse a ] [ partial0 2 * ] ] ] 2 ] ]
[ digits [ reduce [ range 0 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ map [ range 0 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] ] [ partial0 2 * ] ]
[ deref [ map [ range 0 [ + a 1 ] ] square ] [ / [ len [ map [ range 0 [ + a 1 ] ] square ] ] 2 ] ]
[ < [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 1 ]
[ reduce [ range 0 [ + [ reduce [ range 0 [ + [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ filter [ filter a [ partial1 [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] > ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ filter [ filter a [ partial1 b < ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ map [ digits a ] [ partial1 [ reduce [ slice [ sort c ] 0 b ] 0 + ] - ] ]
[ map a [ partial1 b - ] ]
[ slice [ range 1 [ + a 1 ] ] [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] c ]
[ > [ reduce [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1000000000 min ] < ] ] 1000000000 min ] c ]
[ * a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] ]
[ reverse [ range 0 [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ * [ deref a [ / [ len a ] 2 ] ] [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ filter [ slice e b c ] [ combine ! is_prime ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ filter [ slice e b c ] [ combine ! is_prime ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ len [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] [ lambda1 [ == [ deref [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] arg1 ] [ deref [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ - [ - [ len [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ reduce [ range 0 [ + [ reduce [ filter [ map a [ partial1 b * ] ] [ partial0 [ reduce [ map a [ partial1 b * ] ] 1000000000 min ] < ] ] 1000000000 min ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ map a [ partial1 [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ strlen b ] ] + ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ]
[ slice a [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ]
[ map [ filter [ range 0 [ len [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] int-deref ] ]
[ reduce [ map [ range 0 [ len [ filter [ digits a ] [ partial1 b > ] ] ] ] [ lambda1 [ == [ deref [ filter [ digits a ] [ partial1 b > ] ] arg1 ] [ deref [ filter [ digits a ] [ partial1 b > ] ] [ - [ - [ len [ filter [ digits a ] [ partial1 b > ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ map [ map a [ partial0 2 * ] ] [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] * ] ]
[ filter [ slice a [ strlen b ] c ] [ lambda1 [ reduce [ map e [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ map [ map a square ] [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] + ] ]
[ filter [ map [ filter [ range 0 [ len [ slice a 0 [ / [ len a ] 2 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ slice a 0 [ / [ len a ] 2 ] ] int-deref ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reduce [ slice [ sort a ] 0 [ reduce b 0 + ] ] 0 + ]
[ reduce [ range 0 [ + [ reduce [ reverse [ digits [ deref a [ / [ len a ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ slice [ map a [ partial1 b * ] ] c [ min d e ] ]
[ + a [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ]
[ floor [ sqrt [ + [ * [ - a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] ] [ - a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] ] ] [ * [ - b [ reduce [ filter d [ partial0 [ reduce d 1000000000 min ] < ] ] 1000000000 min ] ] [ - b [ reduce [ filter d [ partial0 [ reduce d 1000000000 min ] < ] ] 1000000000 min ] ] ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reverse [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] 0 [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] ] ]
[ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] 0 max ]
[ reduce [ range 0 [ + [ strlen [ reduce a "z" str_min ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ reverse [ map a [ partial1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 b + ] ] ] ] * ] ] ]
[ map a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] * ] ]
[ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b + ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ head [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ + [ * [ - a [ reduce c 1000000000 min ] ] [ - a [ reduce c 1000000000 min ] ] ] [ * [ - b d ] [ - b d ] ] ] ]
[ reverse [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] ]
[ map [ reverse a ] [ partial1 [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] + ] ]
[ reduce [ map [ filter [ range 0 [ len [ range 0 [ + a 1 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ range 1 [ + a 1 ] ] int-deref ] ] 0 max ]
[ reduce [ filter [ slice [ range 1 a ] 0 [ / [ len [ range 1 a ] ] 2 ] ] [ partial0 [ reduce [ slice [ range 1 a ] 0 [ / [ len [ range 1 a ] ] 2 ] ] 0 max ] > ] ] 0 max ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map [ range 0 [ + [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] 1 ] ] [ partial1 b + ] ]
[ map a [ partial1 b - ] ]
[ reduce [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ partial1 b < ] ] 1000000000 min ]
[ min [ reduce [ slice [ sort a ] 0 b ] 0 + ] [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len d ] ] [ deref d arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ filter [ map a [ partial1 [ strlen b ] + ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ]
[ max [ strlen a ] [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ reduce [ slice [ sort [ digits [ reduce a 1000000000 min ] ] ] 0 b ] 0 + ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ slice b 0 [ / [ len b ] 2 ] ] square ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ map [ slice b 0 [ / [ len b ] 2 ] ] square ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ + a [ deref [ sort b ] [ / [ len b ] 2 ] ] ]
[ filter [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ]
[ deref [ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ partial0 2 * ] ] [ / [ len [ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ partial0 2 * ] ] ] 2 ] ]
[ > a [ reduce [ range 0 [ + [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ filter [ reverse [ slice a b c ] ] [ partial1 d < ] ]
[ head [ slice [ digits a ] 0 [ / [ len [ digits a ] ] 2 ] ] ]
[ digits [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter c [ partial1 b < ] ] ] ] [ deref [ filter c [ partial1 b < ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ digits [ deref a [ / [ len a ] 2 ] ] ]
[ filter [ reverse a ] [ lambda1 [ reduce [ map [ slice b 0 [ / [ len b ] 2 ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ reverse [ filter c [ partial1 b < ] ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ reverse [ filter c [ partial1 b < ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ slice a [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] d ]
[ filter [ range 0 [ + [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ map [ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial0 2 * ] ] [ partial0 2 * ] ]
[ map [ filter [ filter a is_prime ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 2 * ] ]
[ reverse [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ]
[ filter a [ lambda1 [ reduce [ map [ digits [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ map [ map [ digits a ] square ] square ]
[ is_sorted [ reverse [ filter a [ partial1 b < ] ] ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reverse [ filter [ slice a b c ] [ lambda1 [ reduce [ map d [ partial0 arg1 == ] ] false || ] ] ] ]
[ * a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ min [ head [ slice a [ / [ len a ] 2 ] [ len a ] ] ] b ]
[ slice [ digits [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] [ / [ len [ digits [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] ] 2 ] [ len [ digits [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] ] ]
[ range 1 [ head a ] ]
[ range 0 [ + [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ] ]
[ reduce [ slice [ reverse [ sort [ digits [ head a ] ] ] ] 0 b ] 0 + ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ]
[ min [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] b ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ range 0 [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ range 0 [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ min [ strlen a ] b ]
[ reduce [ digits [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ - [ reduce [ filter a [ partial1 b < ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ is_sorted [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] ]
[ reduce [ range 0 [ + [ reduce [ slice [ reverse [ sort [ range 0 [ + a 1 ] ] ] ] 0 b ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ reduce [ range 0 [ + [ reduce [ range 0 [ + [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ head [ filter a [ partial1 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] < ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ reduce [ range 0 [ + [ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ reduce [ reverse [ digits d ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ - b [ reduce [ reverse [ digits d ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] ] ] ] ]
[ slice [ reverse a ] [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ]
[ head [ slice a b [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] c ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ slice d b c ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ slice d b c ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ len [ range 0 [ reduce a 1000000000 min ] ] ] ] [ lambda1 [ == [ deref [ range 0 [ reduce a 1000000000 min ] ] arg1 ] [ deref [ range 0 [ reduce a 1000000000 min ] ] [ - [ - [ len [ range 0 [ reduce a 1000000000 min ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ digits [ reduce [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial0 [ reduce [ slice a 0 [ / [ len a ] 2 ] ] 1000000000 min ] < ] ] 1000000000 min ] ]
[ reduce [ map [ range 0 [ min [ len [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] [ len b ] ] ] [ lambda1 [ if [ < [ deref [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ range 0 [ + [ deref [ sort [ range 1 [ + a 1 ] ] ] [ / [ len [ range 1 [ + a 1 ] ] ] 2 ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ filter [ filter [ digits a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ]
[ reduce [ slice [ map a square ] [ / [ len [ map a square ] ] 2 ] [ len [ map a square ] ] ] 1000000000 min ]
[ filter [ reverse [ reverse a ] ] [ partial1 b > ] ]
[ reduce [ reverse [ digits [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ - [ reduce d 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] [ - b [ - [ reduce d 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] ] ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ * [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] c ]
[ reduce [ map [ range 0 [ min [ len [ reverse a ] ] [ len [ range 0 b ] ] ] ] [ lambda1 [ if [ > [ deref [ reverse a ] arg1 ] [ deref [ range 0 b ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] b ] c ]
[ reduce [ slice [ reverse a ] 0 [ / [ len [ reverse a ] ] 2 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ filter a [ partial1 [ reduce [ slice b 0 [ / [ len b ] 2 ] ] 0 max ] < ] ]
[ map a [ partial1 b - ] ]
[ digits [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ]
[ - [ reduce [ slice [ reverse a ] b c ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] * ] ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ + [ * [ - a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] ] [ - a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] ] ] [ * [ - b [ reduce [ filter d [ partial0 [ reduce d 1000000000 min ] < ] ] 1000000000 min ] ] [ - b [ reduce [ filter d [ partial0 [ reduce d 1000000000 min ] < ] ] 1000000000 min ] ] ] ]
[ digits [ reduce [ map [ range 0 [ min [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ len b ] ] ] [ lambda1 [ if [ < [ deref [ slice a [ / [ len a ] 2 ] [ len a ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ reduce [ map [ range 0 [ min [ len [ filter a [ partial1 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] > ] ] ] [ len c ] ] ] [ lambda1 [ if [ < [ deref [ filter a [ partial1 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] > ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ range 0 [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ reduce [ range 0 [ + [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ reduce [ slice [ sort d ] 0 e ] 0 + ] ] [ - b [ reduce [ slice [ sort d ] 0 e ] 0 + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map c [ partial1 b + ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ map c [ partial1 b + ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ deref [ sort [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ] [ / [ len [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ] 2 ] ]
[ filter [ range 1 [ + a 1 ] ] [ partial1 b < ] ]
[ is_sorted [ slice [ reverse a ] b c ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ range 0 [ + [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ filter [ reverse [ reverse a ] ] [ combine ! is_prime ] ]
[ reduce [ range 0 [ + [ reduce [ filter [ range 1 a ] [ partial0 [ reduce [ range 1 a ] 0 max ] > ] ] 0 max ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ reverse [ range 1 [ reduce a 1000000000 min ] ] ]
[ digits [ strlen a ] ]
[ map a [ partial1 b - ] ]
[ range 0 [ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ]
[ reduce [ map [ range 0 [ min [ len [ reverse a ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ reverse a ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ map [ digits [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] ] [ partial0 2 * ] ]
[ map a [ partial1 [ reduce [ slice [ sort [ reverse c ] ] 0 b ] 0 + ] + ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ reduce [ filter [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 2 * ] ] [ partial0 [ reduce [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 2 * ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ digits [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ deref [ sort a ] [ / [ len a ] 2 ] ] ] ]
[ filter [ range 1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] ] [ combine ! is_prime ] ]
[ reverse [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] ]
[ range 0 [ + [ min a [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] b ] ] 1 ] ]
[ map a [ partial1 [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ < [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] + ] ]
[ range 0 [ deref [ slice a [ / [ len a ] 2 ] [ len a ] ] [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] ] ]
[ reduce [ reverse [ digits [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ digits b ] ] ] [ deref [ digits b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ max a [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ deref [ filter [ reverse a ] [ partial1 b < ] ] [ / [ len [ filter [ reverse a ] [ partial1 b < ] ] ] 2 ] ]
[ - [ reduce [ slice [ reverse a ] b c ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ filter [ map a [ partial1 b + ] ] [ lambda1 [ reduce [ map [ reverse c ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ filter [ range 0 [ len [ reverse b ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ reverse b ] int-deref ] ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map [ filter [ range 0 [ len [ reverse b ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ reverse b ] int-deref ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ head [ filter a [ lambda1 [ reduce [ map [ filter b [ combine ! is_prime ] ] [ partial0 arg1 == ] ] false || ] ] ] ]
[ map [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] square ] [ partial0 2 * ] ]
[ reduce [ reverse [ digits [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter b is_prime ] ] ] [ deref [ filter b is_prime ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ deref [ map [ digits a ] [ partial0 2 * ] ] [ / [ len [ map [ digits a ] [ partial0 2 * ] ] ] 2 ] ]
[ map a [ partial1 b - ] ]
[ is_sorted [ slice [ reverse a ] b c ] ]
[ filter a [ lambda1 [ reduce [ map [ filter [ range 0 [ + c 1 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ slice a b [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ]
[ reduce [ map a [ partial1 [ deref b [ / [ len b ] 2 ] ] - ] ] 0 max ]
[ reverse [ digits [ deref [ sort a ] [ / [ len a ] 2 ] ] ] ]
[ reverse [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] ]
[ < [ min a [ reduce b 0 max ] ] 1 ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] + ] ] ] ]
[ head [ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial0 2 * ] ] ]
[ deref [ map [ filter a [ partial1 b > ] ] [ partial1 c * ] ] [ / [ len [ map [ filter a [ partial1 b > ] ] [ partial1 c * ] ] ] 2 ] ]
[ filter [ filter a [ partial1 b < ] ] [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len d ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ] < ] ]
[ digits [ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ head [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] ]
[ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] > ] ]
[ range 0 [ + [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ - [ reduce d 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] [ - b [ - [ reduce d 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] ] ] 1 ] ]
[ * a [ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ < [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ slice a [ strlen b ] [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] c ] ]
[ map a [ partial1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] * ] ]
[ reduce [ slice [ reverse [ sort [ digits [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ] ] 0 c ] 0 + ]
[ reduce [ filter [ slice a b c ] [ combine ! is_prime ] ] 0 max ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ len [ map a [ partial0 2 * ] ] ]
[ map [ map [ filter a [ partial1 b > ] ] square ] [ partial0 2 * ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ digits b ] ] ] [ deref [ digits b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ filter a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] > ] ]
[ reduce [ map [ range 0 [ min [ len [ reverse [ digits a ] ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ reverse [ digits a ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ reverse [ digits [ reduce [ filter [ filter a [ partial1 b > ] ] [ partial0 [ reduce [ filter a [ partial1 b > ] ] 0 max ] > ] ] 0 max ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ digits [ head a ] ]
[ map [ filter [ range 0 [ len [ slice [ range 0 a ] [ / [ len [ range 0 a ] ] 2 ] [ len [ range 0 a ] ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ slice [ range 0 a ] [ / [ len [ range 0 a ] ] 2 ] [ len [ range 0 a ] ] ] int-deref ] ]
[ head [ map a [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] * ] ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter a [ lambda1 [ reduce [ map [ range 0 [ + [ + c b ] 1 ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ slice a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ]
[ head [ map a [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] * ] ] ]
[ reverse [ range 0 [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ]
[ head [ filter [ range 1 a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ range 1 [ reduce [ slice [ reverse [ sort a ] ] 0 [ head b ] ] 0 + ] ]
[ digits [ head a ] ]
[ head [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c + ] ] ]
[ reduce [ map [ range 0 [ len [ map [ filter [ range 0 [ len [ filter a [ combine ! is_prime ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ filter a [ combine ! is_prime ] ] int-deref ] ] ] ] [ lambda1 [ == [ deref [ map [ filter [ range 0 [ len [ filter a [ combine ! is_prime ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ filter a [ combine ! is_prime ] ] int-deref ] ] arg1 ] [ deref [ map [ filter [ range 0 [ len [ filter a [ combine ! is_prime ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ filter a [ combine ! is_prime ] ] int-deref ] ] [ - [ - [ len [ map [ filter [ range 0 [ len [ filter a [ combine ! is_prime ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ]
[ filter a [ partial1 [ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] > ] ]
[ reduce [ filter [ map a [ partial1 b - ] ] [ partial0 [ reduce [ map a [ partial1 b - ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ min a [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] ]
[ reduce [ range 0 [ + [ max a [ + c b ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ reduce [ filter [ filter [ reverse a ] [ combine ! is_prime ] ] [ partial0 [ reduce [ filter [ reverse a ] [ combine ! is_prime ] ] 0 max ] > ] ] 0 max ]
[ reduce [ filter [ map a [ partial1 [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] [ partial0 [ reduce [ map a [ partial1 [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] 0 max ] > ] ] 0 max ]
[ map [ map a [ partial1 [ reduce b 0 + ] + ] ] [ partial0 2 * ] ]
[ reduce [ slice [ sort a ] 0 [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ digits [ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ digits [ head a ] ]
[ filter [ slice a b c ] [ lambda1 [ reduce [ map [ slice d 0 [ / [ len d ] 2 ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ head [ filter a [ partial1 b > ] ] ]
[ is_sorted [ filter a [ partial1 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] > ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] < ] ]
[ map [ reverse a ] [ partial1 [ strlen b ] + ] ]
[ reduce [ slice [ sort a ] 0 [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ reduce [ filter [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 [ reduce [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 max ] > ] ] 0 max ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ < [ reduce [ slice [ reverse [ sort [ digits a ] ] ] 0 b ] 0 + ] 1 ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ is_sorted [ slice [ reverse a ] b c ] ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce [ reverse [ digits [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 + ]
[ map a [ partial1 [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] + ] ]
[ reduce [ range 0 [ + [ len [ reverse a ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ filter [ reverse a ] [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ]
[ > [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ head d ] ] [ - b [ head d ] ] ] ] ] ] ] f ]
[ floor [ sqrt [ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] ] ] ] ]
[ reduce [ map [ range 0 [ min [ len [ filter a [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] > ] ] ] [ len d ] ] ] [ lambda1 [ if [ < [ deref [ filter a [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] > ] ] arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ]
[ deref [ sort [ map a [ partial1 [ head b ] * ] ] ] [ / [ len [ map a [ partial1 [ head b ] * ] ] ] 2 ] ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ floor [ sqrt [ + [ * [ - a [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ] [ - a [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ] ] [ * [ - b [ head d ] ] [ - b [ head d ] ] ] ] ] ]
[ digits [ strlen a ] ]
[ range 1 [ head [ slice a 0 [ / [ len a ] 2 ] ] ] ]
[ reverse [ range 0 [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ reverse [ filter c [ partial1 b < ] ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ reverse [ filter c [ partial1 b < ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ filter [ range 0 [ len [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] int-deref ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ map [ filter [ range 0 [ len [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] int-deref ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ - [ reduce [ filter a [ partial1 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] < ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ map [ slice a b c ] [ partial1 [ reduce e 1000000000 min ] + ] ]
[ digits [ strlen [ reduce a "z" str_min ] ] ]
[ map [ digits [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ] [ partial1 b * ] ]
[ * a [ reduce [ reverse [ digits [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] b ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ range 1 [ reduce [ map [ range 0 [ min [ len [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ is_sorted [ slice [ reverse a ] b c ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ + [ * [ - [ + a b ] d ] [ - [ max a b ] d ] ] [ * [ - c e ] [ - c e ] ] ]
[ - [ reduce [ slice a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reverse [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ slice a [ deref [ sort b ] [ / [ len b ] 2 ] ] [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ map [ digits a ] [ partial1 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] * ] ]
[ filter [ slice [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] 0 [ / [ len [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] ] 2 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ slice [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ head c ] d ]
[ slice [ filter a [ partial1 b < ] ] c [ reduce d 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len e ] ] [ deref e arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ min a [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ map [ map [ range 1 a ] [ partial1 b * ] ] [ partial1 c * ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ filter [ map a [ partial0 2 * ] ] [ partial0 [ reduce [ map a [ partial0 2 * ] ] 0 max ] > ] ] 0 max ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ range 0 [ + [ max a b ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ map [ filter [ digits a ] [ combine ! is_prime ] ] square ]
[ floor [ sqrt [ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ filter a [ partial1 [ head [ map c [ partial1 b - ] ] ] < ] ]
[ range 0 a ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reverse [ range 1 [ + [ deref a [ / [ len a ] 2 ] ] 1 ] ] ]
[ reduce [ map a [ partial1 [ deref b [ / [ len b ] 2 ] ] * ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ range 0 [ + [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ reduce [ slice [ reverse [ sort [ filter a is_prime ] ] ] 0 b ] 0 + ]
[ head [ range 1 [ + [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] ]
[ range 1 [ + [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] 1 ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ filter [ map a [ partial1 b * ] ] [ partial0 [ reduce [ map a [ partial1 b * ] ] 1000000000 min ] < ] ] 1000000000 min ] ]
[ + [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] b ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ filter [ filter a [ partial1 b > ] ] [ partial0 [ reduce [ filter a [ partial1 b > ] ] 1000000000 min ] < ] ] 1000000000 min ] ]
[ digits [ strlen a ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map c [ partial1 [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] - ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map c [ partial1 [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] - ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ digits [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ]
[ reduce [ filter [ range 1 [ + a 1 ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] 0 max ]
[ head [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c + ] ] ]
[ reduce [ reverse [ digits [ deref [ range 1 [ + a 1 ] ] [ / [ len [ range 1 [ + a 1 ] ] ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ reverse [ digits [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ digits [ head [ slice a b c ] ] ]
[ filter a [ partial1 [ strlen b ] > ] ]
[ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ range 1 [ strlen [ reduce a "" str_max ] ] ]
[ range 1 [ + a 1 ] ]
[ slice [ filter a [ partial1 b < ] ] 0 [ / [ len [ filter a [ partial1 b < ] ] ] 2 ] ]
[ reduce [ map a square ] 0 + ]
[ filter [ range 0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ combine ! is_prime ] ]
[ reverse [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial1 b - ] ] ]
[ filter a [ partial1 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] > ] ]
[ filter [ filter a [ partial1 b > ] ] [ partial1 [ deref [ sort c ] [ / [ len c ] 2 ] ] > ] ]
[ slice [ map [ filter a [ partial1 b < ] ] square ] 0 [ / [ len [ map [ filter a [ partial1 b < ] ] square ] ] 2 ] ]
[ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len [ digits b ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ digits b ] arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ digits [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ slice [ reverse [ reverse a ] ] 0 [ / [ len [ reverse [ reverse a ] ] ] 2 ] ]
[ + [ * [ - a [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] c ] ] [ - a [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] c ] ] ] [ * [ - b [ + d e ] ] [ - b [ + d e ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ filter [ slice [ range 1 a ] [ / [ len [ range 1 a ] ] 2 ] [ len [ range 1 a ] ] ] [ partial0 [ reduce [ slice [ range 1 a ] [ / [ len [ range 1 a ] ] 2 ] [ len [ range 1 a ] ] ] 0 max ] > ] ] 0 max ]
[ range 0 [ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ]
[ reverse [ map [ filter a [ partial1 b < ] ] square ] ]
[ range 0 [ reduce [ range 0 [ + [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ]
[ filter [ map [ slice a b c ] [ partial1 e + ] ] [ partial1 f > ] ]
[ filter [ map [ filter [ range 0 [ len [ reverse a ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ reverse a ] int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ range 0 [ len [ slice a [ head b ] c ] ] ] [ lambda1 [ == [ deref [ slice a [ head b ] c ] arg1 ] [ deref [ slice a [ head b ] c ] [ - [ - [ len [ slice a [ head b ] c ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ]
[ slice [ slice a b c ] 0 [ / [ len [ slice a b c ] ] 2 ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ head [ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial0 2 * ] ] ]
[ reduce [ range 0 [ + [ reduce [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ slice [ reverse [ filter a [ partial1 b > ] ] ] [ / [ len [ reverse [ filter a [ partial1 b > ] ] ] ] 2 ] [ len [ reverse [ filter a [ partial1 b > ] ] ] ] ]
[ range 0 [ + a 1 ] ]
[ range 0 [ + a 1 ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ is_sorted [ slice [ reverse a ] b c ] ]
[ filter [ slice [ reverse a ] 0 [ / [ len [ reverse a ] ] 2 ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ + [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ]
[ reduce [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] 1000000000 min ]
[ reduce [ map [ range 0 [ len [ filter [ map a [ partial1 b - ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] ] [ lambda1 [ == [ deref [ filter [ map a [ partial1 b - ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] arg1 ] [ deref [ filter [ map a [ partial1 b - ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ - [ - [ len [ filter [ map a [ partial1 b - ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ deref [ sort [ map [ reverse a ] [ partial0 2 * ] ] ] [ / [ len [ map [ reverse a ] [ partial0 2 * ] ] ] 2 ] ]
[ range 1 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ filter [ slice a 0 [ / [ len a ] 2 ] ] [ lambda1 [ reduce [ map [ map b [ partial0 2 * ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ deref [ sort [ digits [ max a b ] ] ] [ / [ len [ digits [ max a b ] ] ] 2 ] ]
[ reduce [ filter a [ partial1 [ strlen b ] > ] ] 0 max ]
[ filter [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] [ partial1 d < ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ is_sorted [ filter a [ partial1 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] > ] ] ]
[ + [ * [ - a [ reduce [ map [ range 0 [ min [ len d ] [ len e ] ] ] [ lambda1 [ if [ < [ deref d arg1 ] [ deref e arg1 ] ] 1 0 ] ] ] 0 + ] ] [ - a [ reduce [ map [ range 0 [ min [ len d ] [ len e ] ] ] [ lambda1 [ if [ < [ deref d arg1 ] [ deref e arg1 ] ] 1 0 ] ] ] 0 + ] ] ] [ * [ - [ reduce [ slice [ sort c ] 0 b ] 0 + ] f ] [ - [ reduce [ slice [ sort c ] 0 b ] 0 + ] f ] ] ]
[ head [ slice a 0 [ / [ len a ] 2 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ filter [ slice [ range 1 a ] 0 [ / [ len [ range 1 a ] ] 2 ] ] [ partial0 [ reduce [ slice [ range 1 a ] 0 [ / [ len [ range 1 a ] ] 2 ] ] 0 max ] > ] ] 0 max ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] ]
[ reverse [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter [ slice d b c ] [ partial1 d < ] ] ] ] [ deref [ filter [ slice d b c ] [ partial1 d < ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] [ reduce [ range 0 [ + e 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ] [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] [ reduce [ range 0 [ + e 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ +
[ reverse [ range 0 [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ]
[ head [ slice [ digits a ] 0 [ / [ len [ digits a ] ] 2 ] ] ]
[ filter [ map [ filter a [ partial1 b < ] ] [ partial0 2 * ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ map [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 [ reduce b 0 max ] + ] ]
[ range 0 [ + [ deref [ sort [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] ] [ / [ len [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] ] 2 ] ] 1 ] ]
[ filter [ map [ filter [ range 0 [ len [ reverse a ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ reverse a ] int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ slice [ reverse [ filter a [ partial1 b > ] ] ] [ / [ len [ reverse [ filter a [ partial1 b > ] ] ] ] 2 ] [ len [ reverse [ filter a [ partial1 b > ] ] ] ] ]
[ slice [ filter a [ combine ! is_prime ] ] [ / [ len [ filter a [ combine ! is_prime ] ] ] 2 ] [ len [ filter a [ combine ! is_prime ] ] ] ]
[ head [ map [ slice a 0 [ / [ len a ] 2 ] ] square ] ]
[ filter [ slice a b c ] [ partial1 [ strlen d ] > ] ]
[ map [ reverse [ filter a [ combine ! is_prime ] ] ] square ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ digits [ strlen [ reduce a "z" str_min ] ] ]
[ / [ reduce [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 0 + ] [ len [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] ]
[ is_sorted [ map a [ partial1 [ strlen b ] * ] ] ]
[ reduce [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] square ] 1000000000 min ]
[ digits [ min a [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ]
[ * a [ reduce [ reverse [ digits [ strlen b ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ filter [ reverse a ] [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ range 0 [ len [ map [ slice a b c ] [ partial1 d * ] ] ] ] [ lambda1 [ == [ deref [ map [ slice a b c ] [ partial1 d * ] ] arg1 ] [ deref [ map [ slice a b c ] [ partial1 d * ] ] [ - [ - [ len [ map [ slice a b c ] [ partial1 d * ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ map [ filter [ range 0 [ len [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] b c ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] b c ] int-deref ] ]
[ map [ filter [ map a [ partial1 b * ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] square ]
[ is_sorted [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ combine ! is_prime ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ range 1 [ + [ reduce [ reverse [ digits [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ]
[ map [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 2 * ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ head [ slice [ filter a [ partial1 b > ] ] c d ] ]
[ reverse [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ]
[ reduce [ reverse [ digits [ reduce [ reverse [ digits [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ digits [ reduce [ map [ range 0 [ min [ len [ reverse a ] ] [ len b ] ] ] [ lambda1 [ if [ < [ deref [ reverse a ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ range 1 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ slice d b c ] ] ] [ deref [ slice d b c ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ reduce [ digits [ max a b ] ] 0 max ]
[ > [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ filter a [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ digits b ] ] ] [ deref [ digits b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] > ] ]
[ head [ map [ map a [ partial1 b - ] ] [ partial0 2 * ] ] ]
[ reduce [ slice a 0 [ / [ len a ] 2 ] ] 1000000000 min ]
[ reverse [ slice [ map a square ] 0 [ / [ len [ map a square ] ] 2 ] ] ]
[ head [ slice a [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] c ] ]
[ filter [ map [ filter [ range 0 [ len [ reverse a ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ reverse a ] int-deref ] ] is_prime ]
[ reduce [ slice [ reverse [ sort [ slice a b c ] ] ] 0 [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] d ] ] 0 + ]
[ reduce [ map [ slice a b c ] [ partial0 2 * ] ] 0 max ]
[ digits [ head [ map a [ partial1 b * ] ] ] ]
[ reverse [ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ]
[ map [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial1 b + ] ]
[ filter a [ partial1 [ reduce [ slice [ reverse [ sort c ] ] 0 [ head b ] ] 0 + ] < ] ]
[ map [ range 0 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] ] [ partial0 2 * ] ]
[ reduce [ map [ range 0 [ len [ map a [ partial1 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] - ] ] ] ] [ lambda1 [ == [ deref [ map a [ partial1 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] - ] ] arg1 ] [ deref [ map a [ partial1 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] - ] ] [ - [ - [ len [ map a [ partial1 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ >
[ filter [ map [ digits a ] [ partial0 2 * ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ filter [ filter [ range 0 a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ filter [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ combine ! is_prime ] ]
[ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ is_sorted [ slice [ reverse a ] b c ] ]
[ reduce [ filter [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 b - ] ] [ partial0 [ reduce [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 b - ] ] 0 max ] > ] ] 0 max ]
[ reduce [ reverse [ digits [ reduce [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1000000000 min ] < ] ] 1000000000 min ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ <= [ head [ filter a [ partial1 b < ] ] ] 0 ]
[ deref [ sort [ filter a [ partial1 [ reduce b 1000000000 min ] < ] ] ] [ / [ len [ filter a [ partial1 [ reduce b 1000000000 min ] < ] ] ] 2 ] ]
[ max [ reduce [ slice [ sort a ] 0 b ] 0 + ] [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len d ] ] [ deref d arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter b [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] ] [ deref [ filter b [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ filter [ digits [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] [ lambda1 [ reduce [ map f [ partial0 arg1 == ] ] false || ] ] ]
[ map [ filter a [ partial1 [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ > [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] > ] ] [ partial1 e * ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] * ] ] ] ] ]
[ reduce [ map a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] - ] ] 0 max ]
[ floor [ sqrt [ + [ * [ - [ reduce [ slice [ sort a ] 0 b ] 0 + ] d ] [ - [ reduce [ slice [ sort a ] 0 b ] 0 + ] d ] ] [ * [ - c [ strlen e ] ] [ - c [ strlen e ] ] ] ] ] ]
[ reduce [ reverse [ digits [ reduce [ filter [ filter a [ partial1 b > ] ] [ partial0 [ reduce [ filter a [ partial1 b > ] ] 0 max ] > ] ] 0 max ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ slice [ filter [ reverse a ] [ partial1 b > ] ] [ / [ len [ filter [ reverse a ] [ partial1 b > ] ] ] 2 ] [ len [ filter [ reverse a ] [ partial1 b > ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ filter [ filter a is_prime ] [ partial0 [ reduce [ filter a is_prime ] 1000000000 min ] < ] ] 1000000000 min ] ]
[ filter [ reverse [ filter a [ partial1 b < ] ] ] [ partial1 c < ] ]
[ digits [ reduce [ slice [ sort a ] 0 b ] 0 + ] ]
[ map [ map a square ] [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] * ] ]
[ map [ filter a [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] > ] ] [ partial0 2 * ] ]
[ digits [ head [ reverse a ] ] ]
[ reduce [ reverse [ digits [ deref [ map a [ partial0 2 * ] ] [ / [ len [ map a [ partial0 2 * ] ] ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ floor [ sqrt [ + [ * [ - a [ min d e ] ] [ - a [ min d e ] ] ] [ * [ - [ reduce [ slice [ sort c ] 0 b ] 0 + ] f ] [ - [ reduce [ slice [ sort c ] 0 b ] 0 + ] f ] ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ reduce [ reverse [ map a square ] ] 0 max ]
[ slice a b [ * c d ] ]
[ filter a [ lambda1 [ reduce [ map [ filter c [ lambda1 [ reduce [ map [ range 0 [ + b 1 ] ] [ partial0 arg1 == ] ] false || ] ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ map [ range 1 a ] [ partial1 b + ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ reduce [ filter [ slice a b [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] [ partial0 [ reduce [ slice a b [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] 0 max ] > ] ] 0 max ]
[ map [ range 1 [ + [ * a b ] 1 ] ] square ]
[ reduce [ map [ filter [ range 0 [ len [ reverse a ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ reverse a ] int-deref ] ] 0 max ]
[ floor [ sqrt [ + [ * [ - [ strlen a ] c ] [ - [ strlen a ] c ] ] [ * [ - b [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] d ] ] [ - b [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] d ] ] ] ] ] ]
[ reduce [ slice [ reverse [ sort [ filter [ range 1 a ] [ combine ! is_prime ] ] ] ] 0 b ] 0 + ]
[ map [ slice a b c ] [ partial0 2 * ] ]
[ map a [ partial1 [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] + ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ filter [ map [ filter [ range 0 [ len c ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 c int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ filter [ map [ filter [ range 0 [ len c ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 c int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ range 0 [ + [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ reduce [ slice [ reverse [ sort d ] ] 0 e ] 0 + ] ] [ - b [ reduce [ slice [ reverse [ sort d ] ] 0 e ] 0 + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ reduce [ map [ slice d b c ] [ partial0 arg1 == ] ] false || ] ] ]
[ is_sorted [ map a [ partial1 b * ] ] ]
[ reduce [ reverse [ digits [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ digits b ] ] ] [ deref [ digits b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter [ slice a [ head b ] c ] is_prime ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ slice d b c ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ slice d b c ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ slice [ reverse [ sort [ slice a b c ] ] ] 0 [ reduce [ range 0 [ + d 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] 0 + ]
[ reduce [ filter a [ lambda1 [ reduce [ map [ filter c [ partial1 b < ] ] [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len d ] ] [ deref d arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ + [ * [ - [ strlen a ] c ] [ - [ strlen a ] c ] ] [ * [ - b [ deref d [ / [ len d ] 2 ] ] ] [ - b [ deref d [ / [ len d ] 2 ] ] ] ] ]
[ map [ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] square ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reverse [ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ partial1 b + ] ] ]
[ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ reduce [ map [ digits b ] [ partial0 arg1 == ] ] false || ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ filter [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ partial1 b < ] ]
[ reduce [ filter a [ lambda1 [ reduce [ map [ filter c [ partial1 b < ] ] [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len d ] ] [ deref d arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ head [ map a [ partial1 [ + c b ] * ] ] ]
[ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b - ] ]
[ filter [ filter a [ lambda1 [ reduce [ map [ range 1 [ + b 1 ] ] [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ len a ] ]
[ map [ slice [ range 1 [ + a 1 ] ] [ / [ len [ range 1 [ + a 1 ] ] ] 2 ] [ len [ range 1 [ + a 1 ] ] ] ] [ partial0 2 * ] ]
[ reduce [ filter [ map [ reverse a ] square ] [ partial0 [ reduce [ map [ reverse a ] square ] 0 max ] > ] ] 0 max ]
[ filter a [ partial1 [ strlen b ] > ] ]
[ reduce [ filter [ filter [ filter a [ partial1 b < ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] [ partial0 [ reduce [ filter [ filter a [ partial1 b < ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ reduce [ range 0 [ + [ strlen [ reduce a "z" str_min ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ reduce [ filter [ range 1 [ + a 1 ] ] [ partial1 b > ] ] 0 max ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ range 0 [ len [ range 1 [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ] ] [ lambda1 [ == [ deref [ range 1 [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] arg1 ] [ deref [ range 1 [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] [ - [ - [ len [ range 1 [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [
[ slice [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] c d ]
[ - [ reduce [ map a [ partial1 b * ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ floor [ sqrt [ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] ] ] ] ]
[ max a [ reduce [ map [ range 0 [ min [ len d ] [ len [ filter c [ partial1 b < ] ] ] ] ] [ lambda1 [ if [ < [ deref d arg1 ] [ deref [ filter c [ partial1 b < ] ] arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ reverse [ filter [ filter a is_prime ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ is_sorted [ map [ filter a [ combine ! is_prime ] ] [ partial0 2 * ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ map [ range 0 [ min [ len a ] [ len [ filter c [ partial1 b > ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ filter c [ partial1 b > ] ] arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ map a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ slice [ sort c ] 0 b ] 0 + ] ] * ] ]
[ filter [ reverse [ filter a [ partial1 b < ] ] ] [ combine ! is_prime ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ filter [ slice e b c ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ filter [ slice e b c ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ map a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] * ] ]
[ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len [ slice a b c ] ] [ len e ] ] ] [ lambda1 [ if [ > [ deref [ slice a b c ] arg1 ] [ deref e arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ head [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c + ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ digits [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] ]
[ is_sorted [ slice [ reverse a ] b c ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ slice d b c ] [ partial0 2 * ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map [ slice d b c ] [ partial0 2 * ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ reverse [ reverse a ] ] [ combine ! is_prime ] ]
[ range 0 [ + a 1 ] ]
[ filter [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reduce [ filter [ digits a ] [ partial0 [ reduce [ digits a ] 1000000000 min ] < ] ] 1000000000 min ]
[ floor [ sqrt [ + [ * [ - [ deref a [ / [ len a ] 2 ] ] c ] [ - [ deref a [ / [ len a ] 2 ] ] c ] ] [ * [ - b [ * d e ] ] [ - b [ * d e ] ] ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ reverse [ digits [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ slice d b c ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ slice d b c ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ slice a [ strlen b ] c ] [ combine ! is_prime ] ]
[ filter [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ deref [ sort [ reverse a ] ] [ / [ len [ reverse a ] ] 2 ] ] ]
[ map [ filter [ filter a is_prime ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c - ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ slice [ sort [ reverse a ] ] 0 [ strlen b ] ] 0 + ]
[ reduce [ reverse [ digits [ reduce [ range 0 [ + [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ floor [ sqrt [ + [ * [ - a [ min d e ] ] [ - a [ min d e ] ] ] [ * [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] f ] [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] f ] ] ] ] ]
[ map [ reverse a ] [ partial1 [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] + ] ]
[ reduce [ filter [ map [ digits a ] [ partial1 b + ] ] [ partial0 [ reduce [ map [ digits a ] [ partial1 b + ] ] 0 max ] > ] ] 0 max ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] * ] ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ reduce [ reverse [ digits [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - [ deref [ sort b ] [ / [ len b ] 2 ] ] d ] [ - [ deref [ sort b ] [ / [ len b ] 2 ] ] d ] ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ range 0 [ + a 1 ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ filter a [ lambda1 [ reduce [ map [ slice [ reverse b ] 0 [ / [ len [ reverse b ] ] 2 ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ filter a [ partial1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] > ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ range 0 [ + [ + a b ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ reverse [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ]
[ * [ min a b ] [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] c ] ]
[ map [ slice a b c ] [ partial1 [ head e ] + ] ]
[ map [ map a [ partial1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] * ] ] square ]
[ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 [ deref [ sort c ] [ / [ len c ] 2 ] ] * ] ]
[ reduce [ slice [ map a [ partial0 2 * ] ] 0 [ / [ len [ map a [ partial0 2 * ] ] ] 2 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ > [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ reduce [ slice [ sort a ] 0 [ reduce [ slice [ sort c ] 0 b ] 0 + ] ] 0 + ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ map a [ partial1 [ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] + ] ]
[ range 0 [ + a 1 ] ]
[ slice [ reverse [ reverse a ] ] 0 [ / [ len [ reverse [ reverse a ] ] ] 2 ] ]
[ slice [ map a [ partial1 b + ] ] c [ head d ] ]
[ reverse [ map [ filter [ range 0 [ len [ slice a 0 [ / [ len a ] 2 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ slice a 0 [ / [ len a ] 2 ] ] int-deref ] ] ]
[ reverse [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ map [ reverse a ] [ partial1 [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] + ] ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ reverse [ digits [ reduce [ range 1 a ] 0 max ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ digits [ head a ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ + [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] [ reduce [ slice [ sort c ] 0 b ] 0 + ] ]
[ reduce [ map [ range 0 [ len [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] is_prime ] ] ] [ lambda1 [ == [ deref [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] is_prime ] arg1 ] [ deref [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] is_prime ] [ - [ - [ len [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] is_prime ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ reverse [ range 1 [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ]
[ reverse [ filter [ reverse a ] [ partial1 b > ] ] ]
[ deref [ map [ filter a is_prime ] [ partial1 b * ] ] [ / [ len [ map [ filter a is_prime ] [ partial1 b * ] ] ] 2 ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ range 0 [ + [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ reduce [ reverse [ digits d ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ - b [ reduce [ reverse [ digits d ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ map [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ partial1 b - ] ]
[ map [ map [ digits a ] square ] square ]
[ head [ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial0 2 * ] ] ]
[ digits [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ + [ * [ - [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] c ] [ - [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] c ] ] [ * [ - b [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] d ] [ - b [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] d ] ] ]
[ slice a [ deref [ sort b ] [ / [ len b ] 2 ] ] c ]
[ map a [ partial1 b - ] ]
[ map [ reverse a ] [ partial1 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] * ] ]
[ reduce [ slice [ sort a ] 0 [ reduce [ slice b [ / [ len b ] 2 ] [ len b ] ] 1000000000 min ] ] 0 + ]
[ digits [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce a 0 max ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ filter [ slice d b c ] [ lambda1 [ reduce [ map d [ partial0 arg1 == ] ] false || ] ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ filter [ slice d b c ] [ lambda1 [ reduce [ map d [ partial0 arg1 == ] ] false || ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ slice [ sort [ digits a ] ] 0 b ] 0 + ] ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ * a [ max c b ] ]
[ filter [ slice a b [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ digits [ reduce [ map [ range 0 [ min [ len [ slice a 0 [ / [ len a ] 2 ] ] ] [ len b ] ] ] [ lambda1 [ if [ < [ deref [ slice a 0 [ / [ len a ] 2 ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ reduce [ slice [ reverse [ sort [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ] ] 0 d ] 0 + ]
[ filter [ filter [ range 0 a ] [ combine ! is_prime ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ filter a [ partial1 [ reduce [ reverse [ digits [ reduce c 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] < ] ]
[ map [ digits [ deref [ sort a ] [ / [ len a ] 2 ] ] ] [ partial0 2 * ] ]
[ digits [ strlen a ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ max [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] c ] ]
[ map [ digits [ deref [ sort a ] [ / [ len a ] 2 ] ] ] [ partial0 2 * ] ]
[ min a [ strlen [ reduce [ map [ str_split b " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ]
[ reduce [ filter [ filter [ map a square ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ reduce [ filter [ map a square ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] b ] ] 0 + ]
[ reverse [ slice a [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] c ] ]
[ floor [ sqrt [ + [ * [ - [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ] [ - [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ] ] [ * [ - c [ deref e [ / [ len e ] 2 ] ] ] [ - c [ deref e [ / [ len e ] 2 ] ] ] ] ] ] ]
[ slice a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] [ len d ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ slice [ sort [ slice [ range 1 a ] [ / [ len [ range 1 a ] ] 2 ] [ len [ range 1 a ] ] ] ] 0 b ] 0 + ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ filter [ slice a 0 [ / [ len a ] 2 ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ range 0 [ + a 1 ] ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ reverse [ digits [ + [ * [ - a [ head c ] ] [ - a [ head c ] ] ] [ * [ - b d ] [ - b d ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ range 0 [ len [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] [ lambda1 [ == [ deref [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] arg1 ] [ deref [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ - [ - [ len [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ + [ * [ - a [ max c d ] ] [ - a [ max c d ] ] ] [ * [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g i ] [ - g i ] ] ] ] [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g i ] [ - g i ] ] ] ] ] ]
[ range 0 [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ head [ slice a 0 [ / [ len a ] 2 ] ] ]
[ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len [ filter a [ partial1 b < ] ] ] [ len c ] ] ] [ lambda1 [ if [ > [ deref [ filter a [ partial1 b < ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ reduce [ reverse [ digits [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ reduce [ range 0 [ + d 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] [ - b [ reduce [ range 0 [ + d 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] ] ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter [ range 1 [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] [ partial1 c > ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ reduce [ slice [ reverse [ sort [ digits [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ] ] 0 c ] 0 + ]
[ map [ map a [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] + ] ] [ partial0 2 * ] ]
[ filter [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] 1 ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ filter [ range 1 [ + a 1 ] ] [ partial0 [ reduce [ range 1 [ + a 1 ] ] 0 max ] > ] ] 0 max ] ]
[ + [ * [ - a [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ] [ - a [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ] ] [ * [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g i ] [ - g i ] ] ] ] [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g i ] [ - g i ] ] ] ] ] ]
[ reduce [ filter [ slice [ reverse a ] b c ] [ partial0 [ reduce [ slice [ reverse a ] b c ] 0 max ] > ] ] 0 max ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len a ] [ len [ map c [ partial1 b - ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ map c [ partial1 b - ] ] arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ range 0 [ + [ reduce [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial0 [ reduce [ slice a [ / [ len a ] 2 ] [ len a ] ] 1000000000 min ] < ] ] 1000000000 min ] 1 ] ]
[ deref [ sort [ map [ reverse a ] [ partial0 2 * ] ] ] [ / [ len [ map [ reverse a ] [ partial0 2 * ] ] ] 2 ] ]
[ reverse [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ]
[ map [ reverse a ] [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] * ] ]
[ reduce [ filter [ filter a is_prime ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ range 0 [ + [ strlen [ reduce a "z" str_min ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ head [ map [ slice a 0 [ / [ len a ] 2 ] ] square ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map [ map [ filter [ range 0 [ len [ slice a 0 [ / [ len a ] 2 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ slice a 0 [ / [ len a ] 2 ] ] int-deref ] ] [ partial0 2 * ] ]
[ filter [ map [ range 1 a ] [ partial0 2 * ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ range 0 [ + a 1 ] ]
[ map a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] - ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ head [ slice a 0 [ / [ len a ] 2 ] ] ] ]
[ map [ filter [ range 0 [ len [ slice a b [ * c d ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ slice a b [ * c d ] ] int-deref ] ]
[ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ slice e f c ] ] ] [ deref [ slice e f c ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ map [ filter [ range 0 [ len [ slice [ slice a b c ] [ / [ len [ slice a b c ] ] 2 ] [ len [ slice a b c ] ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ slice [ slice a b c ] [ / [ len [ slice a b c ] ] 2 ] [ len [ slice a b c ] ] ] int-deref ] ]
[ filter [ reverse [ range 0 [ + a 1 ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ + [ * [ - a c ] [ - a c ] ] [ * [ - [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] d ] [ - [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] d ] ] ]
[ len [ filter a [ partial1 [ deref b [ / [ len b ] 2 ] ] < ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ reverse [ digits [ reduce a 0 max ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ head [ map a [ partial1 [ strlen b ] * ] ] ]
[ reduce [ filter [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c > ] ] [ partial0 [ reduce [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c > ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ slice [ map a [ partial1 b - ] ] 0 [ / [ len [ map a [ partial1 b - ] ] ] 2 ] ]
[ reduce [ map [ range 0 [ min [ len [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] ] [ len c ] ] ] [ lambda1 [ if [ < [ deref [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ / [ reduce a 0 + ] [ len a ] ] * ] ] ] ] ]
[ > [ deref [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ / [ len [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] 2 ] ] 1 ]
[ reduce [ map [ range 0 [ len [ slice a [ head b ] c ] ] ] [ lambda1 [ == [ deref [ slice a [ head b ] c ] arg1 ] [ deref [ slice a [ head b ] c ] [ - [ - [ len [ slice a [ head b ] c ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ filter [ reverse a ] [ lambda1 [ reduce [ map [ slice e b c ] [ partial0 arg1 == ] ] false || ] ] ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ map [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] square ]
[ range 0 [ + a 1 ] ]
[ slice [ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b + ] ] 0 [ / [ len [ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b + ] ] ] 2 ] ]
[ - [ reduce [ digits [ max a b ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ range 0 [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ min [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ reverse [ digits [ deref a [ / [ len a ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map a [ partial1 b - ] ]
[ filter a [ lambda1 [ reduce [ map [ digits [ reduce [ slice [ reverse [ sort c ] ] 0 b ] 0 + ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ floor [ sqrt [ + [ * [ - [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] [ - [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] ] [ * [ - [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] d ] [ - [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] d ] ] ] ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ filter [ map [ range 1 a ] [ partial0 2 * ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ range 0 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ digits b ] ] ] [ deref [ digits b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ reduce [ map [ range 0 [ len [ digits [ reduce a 1000000000 min ] ] ] ] [ lambda1 [ == [ deref [ digits [ reduce a 1000000000 min ] ] arg1 ] [ deref [ digits [ reduce a 1000000000 min ] ] [ - [ - [ len [ digits [ reduce a 1000000000 min ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ reduce [ reverse [ digits [ reduce [ range 0 [ + [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ slice [ reverse [ sort [ range 1 [ + a 1 ] ] ] ] 0 b ] 0 + ] ]
[ min [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ] [ min c b ] ]
[ head [ slice [ slice a b c ] [ / [ len [ slice a b c ] ] 2 ] [ len [ slice a b c ] ] ] ]
[ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ strlen a ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ digits [ reduce [ map [ range 0 [ min [ len [ reverse a ] ] [ len b ] ] ] [ lambda1 [ if [ < [ deref [ reverse a ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ map [ filter [ range 0 [ len [ digits [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ digits [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] int-deref ] ]
[ reduce [ filter [ range 0 a ] [ partial0 [ reduce [ range 0 a ] 0 max ] > ] ] 0 max ]
[ + [ * [ - [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] [ - [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] ] [ * [ - b [ - [ reduce d 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] [ - b [ - [ reduce d 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] ] ]
[ - [ reduce [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b < ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ slice a [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] d ]
[ reduce [ reverse [ digits [ reduce [ reverse [ digits [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter [ reverse a ] [ partial1 [ head b ] > ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] + ] ] ] ]
[ filter [ filter [ filter a [ partial1 b > ] ] [ partial1 c > ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ reduce [ reverse [ digits [ reduce [ filter [ map a [ partial1 b * ] ] [ partial0 [ reduce [ map a [ partial1 b * ] ] 0 max ] > ] ] 0 max ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map [ map a [ partial1 b * ] ] [ partial1 [ reduce [ filter c [ partial0 [ reduce c 0 max ] > ] ] 0 max ] - ] ]
[ reverse [ map a [ partial1 b * ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ reverse [ slice [ slice a b c ] 0 [ / [ len [ slice a b c ] ] 2 ] ] ]
[ slice [ range 0 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] ] [ / [ len [ range 0 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] ] ] 2 ] [ len [ range 0 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] ] ] ]
[ map [ map [ filter a [ partial1 b > ] ] [ partial1 c - ] ] [ partial0 2 * ] ]
[ deref [ map [ digits a ] [ partial0 2 * ] ] [ / [ len [ map [ digits a ] [ partial0 2 * ] ] ] 2 ] ]
[ floor [ sqrt [ + [ * [ - [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] c ] [ - [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] c ] ] [ * [ - b [ reduce [ range 0 [ + d 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] [ - b [ reduce [ filter d [ partial0 [ reduce d 1000000000 min ] < ] ] 1000000000 min ] ] ] ] ] ]
[ map [ map a [ partial1 b * ] ] [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len d ] ] [ deref d arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] * ] ]
[ map [ filter [ range 0 [ len [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c * ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c * ] ] int-deref ] ]
[ reduce [ range 0 [ + [ reduce [ reverse a ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ max a [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ]
[ map a [ partial1 b - ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ map [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] square ] [ partial1 c - ] ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ + [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] b ]
[ digits [ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ map [ slice a b c ] [ partial1 [ max d e ] - ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map [ filter [ range 0 [ len [ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ partial1 b * ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ partial1 b * ] ] int-deref ] ]
[ filter [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] is_prime ] [ partial1 b < ] ]
[ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ reduce d 0 max ] ] [ - b [ reduce d 0 max ] ] ] ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ floor [ sqrt [ + [ * [ - a [ + [ * [ - f c ] [ - f c ] ] [ * [ - g d ] [ - g d ] ] ] ] [ - a [ + [ * [ - f c ] [ - f c ] ] [ * [ - g d ] [ - g d ] ] ] ] ] [ * [ - b [ reduce [ filter h [ partial0 [ reduce h 0 max ] > ] ] 0 max ] ] [ - b [ reduce [ filter h [ partial0 [ reduce h 0 max ] > ] ] 0 max ] ] ] ] ] ]
[ reverse [ slice a 0 [ / [ len a ] 2 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ slice [ range 0 [ + a 1 ] ] [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] c ]
[ + a [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ map [ range 0 [ min [ len [ reverse a ] ] [ len b ] ] ] [ lambda1 [ if [ < [ deref [ reverse a ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ * [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] c ]
[ range 0 [ + [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 max ] 1 ] ]
[ filter [ filter [ filter a [ partial1 b > ] ] [ partial1 c > ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ reduce [ filter [ map [ reverse a ] square ] [ partial0 [ reduce [ map [ reverse a ] square ] 0 max ] > ] ] 0 max ]
[ slice [ slice a 0 [ / [ len a ] 2 ] ] [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] d ]
[ map [ filter a [ partial1 b < ] ] [ partial1 [ - [ reduce c 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] - ] ]
[ filter [ reverse a ] [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ slice a [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] [ reduce c 0 + ] ]
[ map [ reverse [ range 0 [ + a 1 ] ] ] [ partial0 2 * ] ]
[ reduce [ slice [ sort a ] 0 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] 0 + ]
[ reverse [ map [ filter a [ combine ! is_prime ] ] square ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ reduce [ range 0 [ + [ reduce [ range 0 [ + [ * a b ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 [ reduce [ slice [ sort c ] 0 b ] 0 + ] < ] ]
[ max a [ reduce [ slice [ reverse [ sort d ] ] 0 [ min c b ] ] 0 + ] ]
[ slice [ slice [ map a square ] b c ] 0 [ / [ len [ slice [ map a square ] b c ] ] 2 ] ]
[ range 0 [ + [ reduce [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial0 [ reduce [ slice a [ / [ len a ] 2 ] [ len a ] ] 1000000000 min ] < ] ] 1000000000 min ] 1 ] ]
[ reduce [ range 0 [ + [ reduce [ range 0 [ + [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ digits [ strlen a ] ]
[ reduce [ filter [ filter [ reverse a ] [ combine ! is_prime ] ] [ partial0 [ reduce [ filter [ reverse a ] [ combine ! is_prime ] ] 0 max ] > ] ] 0 max ]
[ len [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ combine ! is_prime ] ] ]
[ filter [ filter a [ partial1 b > ] ] [ partial1 [ - [ reduce c 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] > ] ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ map [ reverse b ] [ partial0 2 * ] ] ] ] [ deref [ map [ reverse b ] [ partial0 2 * ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ range 1 [ head a ] ] 0 + ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ reverse [ slice e b c ] ] ] ] [ deref [ reverse [ slice e b c ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ max [ reduce [ filter a is_prime ] 1000000000 min ] b ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ >= [ reduce [ slice [ sort [ slice a 0 [ / [ len a ] 2 ] ] ] 0 b ] 0 + ] 1 ]
[ map [ map [ filter [ range 0 [ len [ slice a 0 [ / [ len a ] 2 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ slice a 0 [ / [ len a ] 2 ] ] int-deref ] ] square ]
[ head [ slice [ slice a b c ] [ / [ len [ slice a b c ] ] 2 ] [ len [ slice a b c ] ] ] ]
[ deref [ range 0 [ max a b ] ] [ / [ len [ range 0 [ max a b ] ] ] 2 ] ]
[ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ reduce [ map [ slice d b c ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ reverse [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] b ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ head [ filter a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] > ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ slice a 0 [ / [ len a ] 2 ] ] 1000000000 min ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ range 0 [ reduce [ slice [ reverse [ sort a ] ] 0 [ head b ] ] 0 + ] ]
[ - [ reduce [ map [ filter a [ partial1 b < ] ] square ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ filter [ map [ reverse a ] square ] [ partial0 [ reduce [ map [ reverse a ] square ] 0 max ] > ] ] 0 max ]
[ reduce [ range 0 [ + [ + [ * [ - a c ] [ - a c ] ] [ * [ - [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] d ] [ - [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] d ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ range 1 [ + [ reduce [ reverse [ digits [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ]
[ floor [ sqrt [ + [ * [ - a [ reduce [ filter d [ partial0 [ reduce d 1000000000 min ] < ] ] 1000000000 min ] ] [ - a [ reduce [ filter d [ partial0 [ reduce d 1000000000 min ] < ] ] 1000000000 min ] ] ] [ * [ - [ max c b ] e ] [ - [ max c b ] e ] ] ] ] ]
[ range 0 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ slice e b c ] ] ] [ deref [ slice e b c ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ map [ map [ filter [ range 0 [ len [ slice a 0 [ / [ len a ] 2 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ slice a 0 [ / [ len a ] 2 ] ] int-deref ] ] square ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ range 0 [ - [ reduce [ range 0 [ + a 1 ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ filter [ slice [ reverse a ] [ / [ len [ reverse a ] ] 2 ] [ len [ reverse a ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ < [ max a [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] ] c ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ map [ range 0 [ min [ len [ slice a b c ] ] [ len d ] ] ] [ lambda1 [ if [ > [ deref [ slice a b c ] arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ filter [ range 0 [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len [ reverse a ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ reverse a ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ filter [ filter a [ lambda1 [ reduce [ map [ range 0 b ] [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ]
[ len [ digits [ deref a [ / [ len a ] 2 ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ filter [ range 0 [ len [ map a [ partial1 b - ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ map a [ partial1 b - ] ] int-deref ] ] 0 max ]
[ reduce [ reverse [ digits [ floor [ sqrt [ + [ * [ - a [ max c d ] ] [ - a [ max c d ] ] ] [ * [ - b e ] [ - b e ] ] ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ + [ reduce [ filter [ filter a [ partial1 b > ] ] [ partial0 [ reduce [ filter a [ partial1 b > ] ] 0 max ] > ] ] 0 max ] c ]
[ floor [ sqrt [ + [ * [ - [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] d ] [ - [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] d ] ] [ * [ - c [ deref e [ / [ len e ] 2 ] ] ] [ - c [ deref e [ / [ len e ] 2 ] ] ] ] ] ] ]
[ reduce [ reverse [ range 1 a ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ < [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ slice [ reverse [ range 1 [ + a 1 ] ] ] 0 [ / [ len [ reverse [ range 1 [ + a 1 ] ] ] ] 2 ] ]
[ map [ slice [ slice a b c ] [ / [ len [ slice a b c ] ] 2 ] [ len [ slice a b c ] ] ] [ partial1 e - ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ head [ map a [ partial1 [ reduce [ slice [ reverse [ sort c ] ] 0 b ] 0 + ] - ] ] ]
[ filter [ reverse [ filter a [ partial1 b < ] ] ] [ partial1 c < ] ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ reverse [ digits [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 max ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ slice [ sort a ] 0 [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ]
[ slice a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ map [ range 0 [ min [ len a ] [ len [ reverse b ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ reverse b ] arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ digits [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ digits [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter a [ partial1 [ len [ filter b [ combine ! is_prime ] ] ] > ] ]
[ > [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] ]
[ map [ map a [ partial1 b * ] ] [ partial1 [ - [ reduce c 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] * ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ reduce [ slice a 0 [ / [ len a ] 2 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ slice e b c ] ] ] [ deref [ slice e b c ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ filter [ map [ range 0 a ] [ partial1 b - ] ] [ partial0 [ reduce [ map [ range 0 a ] [ partial1 b - ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map [ digits a ] [ partial1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] - ] ]
[ is_sorted [ slice [ reverse a ] b c ] ]
[ deref [ filter a [ lambda1 [ reduce [ map [ slice b [ / [ len b ] 2 ] [ len b ] ] [ partial0 arg1 == ] ] false || ] ] ] [ / [ len [ filter a [ lambda1 [ reduce [ map [ slice b [ / [ len b ] 2 ] [ len b ] ] [ partial0 arg1 == ] ] false || ] ] ] ] 2 ] [ len [ filter a [ lambda1 [ reduce [ map [ slice b [ / [ len b ] 2 ] [ len b ] ] [ partial0 arg1 == ] ] false || ] ] ] ] ]
[ filter [ map a [ partial1 b - ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ reduce [ map [ range 0 [ min [ len [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] ] [ len [ range 1 [ + b 1 ] ] ] ] ] [ lambda1 [ if [ > [ deref [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] arg1 ] [ deref [ range 1 [ + b 1 ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ deref [ sort [ slice a [ strlen b ] c ] ] [ / [ len [ slice a [ strlen b ] c ] ] 2 ] ]
[ deref [ sort [ range 0 [ deref a [ / [ len a ] 2 ] ] ] ] [ / [ len [ range 0 [ deref a [ / [ len a ] 2 ] ] ] ] 2 ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ is_sorted [ slice [ slice a b c ] 0 [ / [ len [ slice a b c ] ] 2 ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ filter [ range 0 [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] [ partial1 c < ] ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce [ digits b ] 0 + ] ] 0 + ]
[ len [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] ]
[ filter [ slice a [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] c ] [ lambda1 [ reduce [ map d [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ range 0 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ map b [ partial0 2 * ] ] ] ] [ deref [ map b [ partial0 2 * ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ reduce [ reverse [ digits [ reduce [ range 0 [ + [ * a b ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ digits [ strlen a ] ]
[ map [ digits [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] ] [ partial0 2 * ] ]
[ min a [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ + c b ] ] ]
[ filter a [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] > ] ]
[ filter a [ lambda1 [ reduce [ map [ filter [ slice d b c ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ filter [ filter [ filter a [ combine ! is_prime ] ] [ partial1 b < ] ] [ partial0 [ reduce [ filter [ filter a [ combine ! is_prime ] ] [ partial1 b < ] ] 0 max ] > ] ] 0 max ]
[ digits [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] ]
[ filter [ map a [ partial1 b * ] ] [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] > ] ]
[ + [ * [ - a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] ] [ - a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] ] ] [ * [ - b [ head d ] ] [ - b [ head d ] ] ] ]
[ head [ slice [ digits a ] 0 [ / [ len [ digits a ] ] 2 ] ] ]
[ filter [ slice [ digits a ] [ / [ len [ digits a ] ] 2 ] [ len [ digits a ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ range 0 [ len [ digits [ reduce a 1000000000 min ] ] ] ] [ lambda1 [ == [ deref [ digits [ reduce a 1000000000 min ] ] arg1 ] [ deref [ digits [ reduce a 1000000000 min ] ] [ - [ - [ len [ digits [ reduce a 1000000000 min ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ reduce [ filter [ filter [ range 0 a ] [ combine ! is_prime ] ] [ partial0 [ reduce [ filter [ range 0 a ] [ combine ! is_prime ] ] 0 max ] > ] ] 0 max ]
[ + [ * [ - a [ min c d ] ] [ - a [ min c d ] ] ] [ * [ - b [ reduce [ filter e [ partial0 [ reduce e 1000000000 min ] < ] ] 1000000000 min ] ] [ - b [ reduce [ filter e [ partial0 [ reduce e 1000000000 min ] < ] ] 1000000000 min ] ] ] ]
[ reduce [ range 0 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ reverse b ] ] ] [ deref [ reverse b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ reverse [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ map [ range 0 [ len [ range 1 [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ] ] [ lambda1 [ == [ deref [ range 1 [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] arg1 ] [ deref [ range 1 [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] [ - [ - [ len [ range 1 [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [
[ map [ slice [ slice a b c ] 0 [ / [ len [ slice a b c ] ] 2 ] ] square ]
[ slice [ reverse [ range 1 [ + a 1 ] ] ] [ / [ len [ reverse [ range 1 [ + a 1 ] ] ] ] 2 ] [ len [ reverse [ range 1 [ + a 1 ] ] ] ] ]
[ range 0 [ + [ reduce a 0 + ] b ] ]
[ is_sorted [ filter a [ partial1 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] > ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ slice [ reverse [ sort [ slice a b c ] ] ] 0 [ reduce [ range 0 [ + d 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] 0 + ]
[ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] ] ]
[ filter [ filter a is_prime ] [ partial1 [ reduce [ slice [ sort c ] 0 b ] 0 + ] < ] ]
[ slice a [ head b ] [ + [ * [ - f c ] [ - f c ] ] [ * [ - g d ] [ - g d ] ] ] ]
[ map [ map [ digits a ] square ] [ partial1 b * ] ]
[ map a [ partial1 b - ] ]
[ < [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] [ reduce [ range 0 [ + f 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ filter [ reverse [ reverse a ] ] [ combine ! is_prime ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ - [ reduce [ filter a [ partial1 b < ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ slice a b [ reduce [ slice [ sort c ] 0 [ deref [ sort d ] [ / [ len d ] 2 ] ] ] 0 + ] ]
[ filter [ slice [ slice a b c ] [ / [ len [ slice a b c ] ] 2 ] [ len [ slice a b c ] ] ] [ lambda1 [ reduce [ map d [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ slice [ sort [ filter a [ partial1 b < ] ] ] 0 [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] 0 + ]
[ reduce [ map [ range 0 [ len [ map [ slice a b c ] [ partial1 d * ] ] ] ] [ lambda1 [ == [ deref [ map [ slice a b c ] [ partial1 d * ] ] arg1 ] [ deref [ map [ slice a b c ] [ partial1 d * ] ] [ - [ - [ len [ map [ slice a b c ] [ partial1 d * ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ >= [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ min a [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] ]
[ map [ filter a [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] > ] ] [ partial0 2 * ] ]
[ range 0 [ floor [ sqrt [ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] ] ] ] ] ] ]
[ filter [ filter [ range 1 a ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ map [ digits a ] [ partial1 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] - ] ]
[ digits [ reduce [ slice [ sort a ] 0 b ] 0 + ] ]
[ >= [ min a [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] b ] ] 0 ]
[ map [ map [ slice a 0 [ / [ len a ] 2 ] ] square ] [ partial0 2 * ] ]
[ deref [ range 0 [ deref [ sort a ] [ / [ len a ] 2 ] ] ] [ / [ len [ range 0 [ deref [ sort a ] [ / [ len a ] 2 ] ] ] ] 2 ] ]
[ reduce [ range 0 [ + [ reduce [ digits a ] 0 max ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ filter a [ lambda1 [ reduce [ map [ filter c [ partial1 [ head b ] > ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ floor [ sqrt [ + [ * [ - a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len d ] ] [ deref d arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] [ - a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len d ] ] [ deref d arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ] [ * [ - b [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 e + ] ] ] ] ] [ - b [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 e + ] ] ] ] ] ] ] ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ reduce [ reverse [ digits [ max [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] c ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ floor [ sqrt [ + [ * [ - [ + a b ] d ] [ - [ + a b ] d ] ] [ * [ - c [ head e ] ] [ - c [ head e ] ] ] ] ] ]
[ slice a b [ * c d ] ]
[ - [ reduce [ slice [ slice a b c ] 0 [ / [ len [ slice a b c ] ] 2 ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ deref [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ / [ len [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] ] 2 ] ] ]
[ reduce [ map a [ partial0 2 * ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter b [ combine ! is_prime ] ] ] ] [ deref [ filter b [ combine ! is_prime ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reverse [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] square ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ max [ reduce [ map [ range 0 [ min [ len a ] [ len [ slice e b c ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ slice e b c ] arg1 ] ] 1 0 ] ] ] 0 + ] f ]
[ reverse [ slice a 0 [ / [ len a ] 2 ] ] ]
[ + [ * [ - a [ reduce [ map [ range 0 [ min [ len c ] [ len d ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ] ] [ - a [ reduce [ map [ range 0 [ min [ len c ] [ len d ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ] ] ] [ * [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g i ] [ - g i ] ] ] ] [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g i ] [ - g i ] ] ] ] ]
[ < [ min a b ] [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ slice a b [ + [ * [ - f c ] [ - f c ] ] [ * [ - g d ] [ - g d ] ] ] ]
[ map [ reverse a ] [ partial1 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] * ] ]
[ filter [ map [ slice a 0 [ / [ len a ] 2 ] ] square ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ filter a [ lambda1 [ reduce [ map [ filter c [ partial1 [ len b ] < ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ slice a 0 [ / [ len a ] 2 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ map b [ partial0 2 * ] ] ] ] [ deref [ map b [ partial0 2 * ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ + [ * [ - [ + a b ] d ] [ - [ + a b ] d ] ] [ * [ - c e ] [ - c e ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ range 0 [ + [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ + [ * [ - [ + a b ] d ] [ - [ + a b ] d ] ] [ * [ - c [ reduce [ filter e [ partial0 [ reduce e 0 max ] > ] ] 0 max ] ] [ - c [ reduce [ filter e [ partial0 [ reduce e 0 max ] > ] ] 0 max ] ] ] ]
[ range 0 [ + a 1 ] ]
[ + a [ reduce [ reverse [ digits [ reduce [ slice [ reverse [ sort c ] ] 0 b ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ map [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] [ partial1 b * ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ deref [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ / [ len [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] 2 ] ]
[ map [ map a [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] + ] ] square ]
[ map [ filter a [ partial1 b > ] ] [ partial1 [ strlen c ] - ] ]
[ filter [ reverse [ reverse a ] ] [ partial1 b > ] ]
[ digits [ strlen a ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ reduce [ slice [ map a [ partial1 b * ] ] [ / [ len [ map a [ partial1 b * ] ] ] 2 ] [ len [ map a [ partial1 b * ] ] ] ] 0 max ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ map a square ] square ] 0 max ]
[ map [ filter [ range 0 [ len [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] int-deref ] ]
[ filter a [ lambda1 [ reduce [ map [ filter d [ partial1 [ + c b ] < ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ slice a b [ * c d ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ]
[ filter [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] square ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ slice [ map a square ] [ strlen b ] c ]
[ filter [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ >= [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ slice [ filter [ reverse a ] [ partial1 b > ] ] [ / [ len [ filter [ reverse a ] [ partial1 b > ] ] ] 2 ] [ len [ filter [ reverse a ] [ partial1 b > ] ] ] ]
[ filter [ slice [ reverse a ] b c ] [ partial1 e < ] ]
[ reduce [ slice [ sort [ reverse [ range 1 a ] ] ] 0 b ] 0 + ]
[ reduce [ reverse [ digits [ reduce [ slice [ sort a ] 0 [ reduce d 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ >= [ reduce [ map a square ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ range 0 [ strlen [ reduce a "" str_concat ] ] ]
[ map [ map a [ partial1 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] * ] ] [ partial0 2 * ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ head [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] ]
[ reduce [ slice [ reverse [ sort [ digits [ reduce a 1000000000 min ] ] ] ] 0 b ] 0 + ]
[ filter [ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] is_prime ]
[ - [ reduce [ slice a b [ reduce [ slice [ sort c ] 0 d ] 0 + ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ map [ reverse a ] [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] - ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ slice a [ / [ len a ] 2 ] [ len a ] ] 0 max ] ]
[ reduce [ slice [ sort [ map a [ partial1 b - ] ] ] 0 [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 + ]
[ min [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 d + ] ] ] ] ]
[ reduce [ map [ range 0 [ min [ len [ map a [ partial1 b + ] ] ] [ len c ] ] ] [ lambda1 [ if [ < [ deref [ map a [ partial1 b + ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ max [ - [ reduce [ slice a b c ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] d ]
[ reduce [ map [ range 0 [ len [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 2 * ] ] ] ] [ lambda1 [ == [ deref [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 2 * ] ] arg1 ] [ deref [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 2 * ] ] [ - [ - [ len [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 2 * ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ < [ deref [ reverse a ] [ / [ len [ reverse a ] ] 2 ] ] 1 ]
[ reduce [ range 0 [ + [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ map a [ partial1 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] - ] ]
[ map [ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial0 2 * ] ] [ partial0 2 * ] ]
[ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter [ filter a [ partial1 b > ] ] [ lambda1 [ reduce [ map [ filter c [ partial1 d > ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ digits [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ]
[ reduce [ map [ range 0 [ len [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] is_prime ] ] ] [ lambda1 [ == [ deref [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] is_prime ] arg1 ] [ deref [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] is_prime ] [ - [ - [ len [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] is_prime ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ - [ reduce [ slice [ reverse a ] b c ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ filter [ reverse [ filter a [ partial1 b < ] ] ] [ partial1 c > ] ]
[ map [ map a [ partial1 b - ] ] [ partial1 c * ] ]
[ - [ reduce [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] < ] ]
[ is_sorted [ filter [ slice a b c ] [ lambda1 [ reduce [ map d [ partial0 arg1 == ] ] false || ] ] ] ]
[ + [ * [ - [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] c ] [ - [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] c ] ] [ * [ - [ deref [ sort b ] [ / [ len b ] 2 ] ] d ] [ - [ deref [ sort b ] [ / [ len b ] 2 ] ] d ] ] ]
[ map [ map a [ partial1 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] - ] ] [ partial0 2 * ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ digits [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] ]
[ map [ map a [ partial1 b - ] ] [ partial1 c * ] ]
[ * a [ strlen b ] ]
[ filter a [ partial1 [ reduce [ slice b 0 [ / [ len b ] 2 ] ] 0 max ] < ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ range 0 [ deref b [ / [ len b ] 2 ] ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ range 0 [ deref b [ / [ len b ] 2 ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ reverse [ filter a is_prime ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ range 0 [ + a 1 ] ]
[ floor [ sqrt [ + [ * [ - [ - [ reduce [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] [ - [ - [ reduce [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] ] [ * [ - b d ] [ - b d ] ] ] ] ]
[ deref [ filter [ reverse a ] [ partial1 b < ] ] [ / [ len [ filter [ reverse a ] [ partial1 b < ] ] ] 2 ] ]
[ - [ reduce [ range 1 [ head a ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ reverse c ] ] ] [ deref [ reverse c ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ reverse [ filter c [ partial1 b < ] ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ reverse [ filter c [ partial1 b < ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len [ reverse b ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ reverse b ] arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ - [ reduce [ range 0 [ min a b ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ head [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c + ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ filter [ range 0 [ len [ filter b [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ filter b [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] int-deref ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ map [ filter [ range 0 [ len [ filter b [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ filter b [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] int-deref ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ reverse [ reverse a ] ] [ partial1 b > ] ]
[ reduce [ range 1 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ + [ * [ - [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] g ] [ - [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] g ] ] [ * [ - f [ deref h [ / [ len h ] 2 ] ] ] [ - f [ deref h [ / [ len h ] 2 ] ] ] ] ]
[ * a [ reduce [ slice [ reverse [ sort [ slice c 0 [ / [ len c ] 2 ] ] ] ] 0 b ] 0 + ] ]
[ filter [ slice [ reverse a ] 0 [ / [ len [ reverse a ] ] 2 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ head [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ map [ filter [ range 0 [ len [ digits [ reduce a 1000000000 min ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ digits [ reduce a 1000000000 min ] ] int-deref ] ]
[ filter a [ partial1 [ strlen b ] > ] ]
[ deref [ sort [ map [ reverse a ] [ partial0 2 * ] ] ] [ / [ len [ map [ reverse a ] [ partial0 2 * ] ] ] 2 ] ]
[ digits [ head a ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ slice a [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] [ reduce [ map [ range 0 [ min [ len c ] [ len d ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ map [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] square ] [ partial0 2 * ] ]
[ slice [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] c [ len d ] ]
[ map [ range 0 [ + a 1 ] ] [ partial1 b - ] ]
[ < [ - [ reduce [ range 1 a ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ]
[ reduce [ range 0 [ + [ max [ head a ] b ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ is_sorted [ map a [ partial1 b * ] ] ]
[ filter [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] 0 [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ slice [ filter [ filter a [ partial1 b < ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] 0 [ / [ len [ filter [ filter a [ partial1 b < ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] 2 ] ]
[ reduce [ slice [ sort a ] 0 [ reduce [ slice [ sort [ filter c [ combine ! is_prime ] ] ] 0 b ] 0 + ] ] 0 + ]
[ range 0 [ + [ head [ filter a [ partial1 b < ] ] ] 1 ] ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ head [ digits b ] ] ] 0 + ]
[ len [ filter [ filter a [ partial1 b < ] ] [ partial1 c > ] ] ]
[ map [ filter a [ lambda1 [ reduce [ map [ map c [ partial1 b + ] ] [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c + ] ]
[ deref [ range 1 [ + [ * a b ] 1 ] ] [ / [ len [ range 1 [ + [ * a b ] 1 ] ] ] 2 ] ]
[ reduce [ slice [ reverse [ sort [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] 0 [ / [ reduce c 0 + ] [ len c ] ] ] 0 + ]
[ reduce [ range 0 [ + [ min a [ reduce [ slice [ sort c ] 0 b ] 0 + ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ head [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ reduce [ filter [ filter a [ partial1 [ / [ reduce b 0 + ] [ len b ] ] < ] ] [ partial0 [ reduce [ filter a [ partial1 [ / [ reduce b 0 + ] [ len b ] ] < ] ] 0 max ] > ] ] 0 max ]
[ reduce [ filter [ filter [ digits a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 [ reduce [ filter [ digits a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ digits [ - [ reduce [ range 1 a ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ filter [ range 0 [ + [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] is_prime ]
[ slice a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ]
[ map a [ partial1 b - ] ]
[ reduce [ map [ range 0 [ len [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] ] ] [ lambda1 [ == [ deref [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] arg1 ] [ deref [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] [ - [ - [ len [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ digits [ reduce [ range 0 a ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ filter [ slice [ digits a ] 0 [ / [ len [ digits a ] ] 2 ] ] [ partial1 b < ] ]
[ + [ * [ - [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] [ - [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] ] [ * [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ map [ range 0 [ min [ len a ] [ len [ filter c [ partial1 b < ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ filter c [ partial1 b < ] ] arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ reduce [ map [ slice a b c ] square ] 1000000000 min ]
[ map [ filter [ range 0 [ len [ slice [ filter a is_prime ] 0 [ / [ len [ filter a is_prime ] ] 2 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ slice [ filter a is_prime ] 0 [ / [ len [ filter a is_prime ] ] 2 ] ] int-deref ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] b [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ]
[ slice a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ]
[ slice a [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] b ] c ]
[ reduce [ slice [ sort a ] 0 [ reduce [ slice [ sort c ] 0 b ] 0 + ] ] 0 + ]
[ reverse [ map [ filter [ range 0 [ len [ slice a 0 [ / [ len a ] 2 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ slice a 0 [ / [ len a ] 2 ] ] int-deref ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ * a [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] ]
[ reverse [ digits [ deref [ sort a ] [ / [ len a ] 2 ] ] ] ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ deref [ sort [ map c [ partial1 b + ] ] ] [ / [ len [ map c [ partial1 b + ] ] ] 2 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ floor [ sqrt [ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] ] ] ] ]
[ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len a ] [ len [ range 0 b ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ range 0 b ] arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ is_sorted [ reverse [ filter a [ partial1 b < ] ] ] ]
[ > a [ reduce [ slice e b c ] 0 max ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len [ map a [ partial1 b - ] ] ] [ len [ digits c ] ] ] ] [ lambda1 [ if [ > [ deref [ map a [ partial1 b - ] ] arg1 ] [ deref [ digits c ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len [ filter [ reverse a ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] [ len b ] ] ] [ lambda1 [ if [ < [ deref [ filter [ reverse a ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ is_sorted [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] square ] ]
[ max a [ + c b ] ]
[ * a [ head b ] ]
[ filter [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ]
[ filter [ filter [ filter a [ partial1 b < ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial1 c > ] ]
[ filter [ filter [ filter a [ partial1 b < ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] is_prime ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ deref [ reverse [ filter a [ partial1 b > ] ] ] [ / [ len [ reverse [ filter a [ partial1 b > ] ] ] ] 2 ] ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ head [ digits b ] ] ] 0 + ]
[ digits [ strlen [ reduce a "z" str_min ] ] ]
[ digits [ head [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ] ]
[ reverse [ map a [ partial1 [ reduce [ slice [ reverse [ sort c ] ] 0 b ] 0 + ] + ] ] ]
[ is_sorted [ filter [ filter a [ combine ! is_prime ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ slice a [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] c ]
[ is_sorted [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 b + ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ reduce [ slice [ sort [ map [ filter a [ partial1 b < ] ] [ partial1 c - ] ] ] 0 d ] 0 + ]
[ digits [ strlen [ reduce a "z" str_min ] ] ]
[ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 c + ] ] ] ] + ] ]
[ is_sorted [ map a [ partial1 [ strlen b ] * ] ] ]
[ range 0 [ reduce [ range 0 a ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ filter [ map [ filter [ range 0 [ len [ range 1 [ + a 1 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ range 1 [ + a 1 ] ] int-deref ] ] is_prime ]
[ filter [ filter [ filter a [ partial1 b < ] ] [ combine ! is_prime ] ] [ partial1 c < ] ]
[ reduce [ map a [ partial1 b + ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ map c [ partial1 d + ] ] ] ] [ deref [ map c [ partial1 d + ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reverse [ slice a 0 [ / [ len a ] 2 ] ] ]
[ reverse [ map [ map a [ partial1 b * ] ] [ partial1 c + ] ] ]
[ - [ reduce [ slice [ reverse a ] b c ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reverse [ digits [ deref [ sort a ] [ / [ len a ] 2 ] ] ] ]
[ reverse [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reverse [ slice [ map a [ partial1 b + ] ] 0 [ / [ len [ map a [ partial1 b + ] ] ] 2 ] ] ]
[ map [ filter [ filter a is_prime ] is_prime ] square ]
[ reduce [ filter [ map [ reverse a ] square ] [ partial0 [ reduce [ map [ reverse a ] square ] 0 max ] > ] ] 0 max ]
[ map [ filter [ range 0 [ len [ digits [ reduce a 1000000000 min ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ digits [ reduce a 1000000000 min ] ] int-deref ] ]
[ filter [ slice [ reverse a ] b c ] [ partial1 d < ] ]
[ filter [ reverse a ] [ partial1 [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] > ] ]
[ range 0 [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ reverse [ slice [ range 1 [ + a 1 ] ] 0 [ / [ len [ range 1 [ + a 1 ] ] ] 2 ] ] ]
[ filter [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ range 0 [ min [ len [ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ partial1 b - ] ] ] [ len c ] ] ] [ lambda1 [ if [ > [ deref [ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ partial1 b - ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ max [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] * ] ] ] ] ]
[ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ slice [ filter [ reverse a ] is_prime ] 0 [ / [ len [ filter [ reverse a ] is_prime ] ] 2 ] ]
[ reduce [ map [ map a [ partial1 b + ] ] square ] 0 + ]
[ reduce [ slice a [ / [ len a ] 2 ] [ len a ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ map c [ partial1 b - ] ] ] ] [ deref [ map c [ partial1 b - ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ map [ digits [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] [ partial1 c - ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ]
[ digits [ head [ filter a is_prime ] ] ]
[ reduce [ range 0 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ slice d b c ] ] ] [ deref [ slice d b c ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ max [ strlen [ reduce a "" str_concat ] ] b ]
[ map [ digits [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ] [ partial1 b * ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ]
[ deref [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c * ] ] [ / [ len [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] ] 2 ] ]
[ reduce [ filter [ filter a [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] < ] ] [ partial0 [ reduce [ filter a [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] < ] ] 0 max ] > ] ] 0 max ]
[ / [ reduce [ range 0 [ + [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] 1 ] ] 0 + ] [ len [ range 0 [ + [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] 1 ] ] ] ]
[ reverse [ slice a 0 [ / [ len a ] 2 ] ] ]
[ is_sorted [ map a [ partial1 b * ] ] ]
[ filter [ filter [ slice a b c ] is_prime ] [ lambda1 [ reduce [ map e [ partial0 arg1 == ] ] false || ] ] ]
[ slice [ filter [ range 0 a ] [ partial1 b < ] ] 0 [ / [ len [ filter [ range 0 a ] [ partial1 b < ] ] ] 2 ] ]
[ + [ * [ - a e ] [ - a e ] ] [ * [ - [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ > [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] f ] [ - [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ > [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] f ] ] ]
[ slice [ slice [ filter a [ partial1 b > ] ] c d ] 0 [ / [ len [ slice [ filter a [ partial1 b > ] ] c d ] ] 2 ] ]
[ map [ map a [ partial1 b + ] ] [ partial1 [ - [ reduce c 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] * ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ slice [ reverse [ sort [ digits [ head a ] ] ] ] 0 b ] 0 + ]
[ filter [ filter a [ combine ! is_prime ] ] [ partial1 [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] > ] ]
[ reverse [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] ]
[ > [ reduce [ slice a b c ] 1000000000 min ] 0 ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ slice [ reverse [ sort [ range 1 [ + a 1 ] ] ] ] 0 b ] 0 + ] ]
[ range 1 [ reduce [ reverse a ] 0 max ] ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] b ] ] 0 + ]
[ filter [ filter a [ partial1 b < ] ] [ partial1 c > ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ deref [ reverse a ] [ / [ len [ reverse a ] ] 2 ] ] ]
[ reduce [ map [ range 0 [ min [ len [ slice [ reverse a ] b c ] ] [ len d ] ] ] [ lambda1 [ if [ > [ deref [ slice [ reverse a ] b c ] arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ filter [ range 1 a ] [ lambda1 [ reduce [ map [ slice e b c ] [ partial0 arg1 == ] ] false || ] ] ]
[ slice [ map [ filter a [ partial1 b > ] ] square ] 0 [ / [ len [ map [ filter a [ partial1 b > ] ] square ] ] 2 ] ]
[ filter [ reverse [ range 1 [ + a 1 ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reduce [ range 0 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ slice d b c ] ] ] [ deref [ slice d b c ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ digits b ] ] ] [ deref [ digits b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ filter [ slice [ slice a b c ] 0 [ / [ len [ slice a b c ] ] 2 ] ] [ partial1 d > ] ]
[ reduce [ map [ range 0 [ len [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] [ lambda1 [ == [ deref [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] arg1 ] [ deref [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ - [ - [ len [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ reduce [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ partial1 b < ] ] 0 max ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ slice [ reverse [ sort a ] ] 0 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 b + ] ] ] ] ] 0 + ] ]
[ map [ filter a [ partial1 b < ] ] [ partial1 [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] + ] ]
[ filter [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ partial1 b < ] ]
[ head [ map [ map a [ partial1 b - ] ] [ partial0 2 * ] ] ]
[ range 0 [ + [ reduce [ range 0 [ + [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] 1 ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ map b square ] ] ] [ deref [ map b square ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ head [ slice [ digits a ] 0 [ / [ len [ digits a ] ] 2 ] ] ]
[ reduce [ slice [ reverse [ sort [ range 0 a ] ] ] 0 [ deref b [ / [ len b ] 2 ] ] ] 0 + ]
[ filter [ slice [ filter a is_prime ] 0 [ / [ len [ filter a is_prime ] ] 2 ] ] [ partial1 b < ] ]
[ map [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] square ]
[ map [ filter a [ partial1 [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] b ] > ] ] square ]
[ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] square ]
[ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 [ reduce [ filter c [ partial0 [ reduce c 1000000000 min ] < ] ] 1000000000 min ] - ] ]
[ head [ map [ map a [ partial1 b - ] ] [ partial0 2 * ] ] ]
[ - [ reduce [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ <= [ deref a [ / [ len a ] 2 ] ] 0 ]
[ - [ reduce [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ slice [ map a square ] [ / [ len [ map a square ] ] 2 ] [ len [ map a square ] ] ]
[ map [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ] [ partial0 2 * ] ]
[ range 0 [ strlen [ reduce a "" str_concat ] ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ range 1 [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ]
[ map [ range 1 a ] [ partial1 b + ] ]
[ + a [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ < [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ map [ range 0 [ min [ len a ] [ len [ map c [ partial1 b * ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map c [ partial1 b * ] ] arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ min [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] [ strlen b ] ]
[ reduce [ slice [ sort a ] 0 [ + [ * [ - g c ] [ - g c ] ] [ * [ - b [ reduce [ slice [ sort d ] 0 e ] 0 + ] ] [ - b [ reduce [ slice [ sort d ] 0 e ] 0 + ] ] ] ] ] 0 + ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ range 0 [ + [ head a ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ reduce [ map [ map a [ partial1 b + ] ] [ partial0 2 * ] ] 0 max ]
[ reduce [ filter [ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ partial1 b + ] ] [ partial0 [ reduce [ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ partial1 b + ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ + [ * [ - [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] [ - [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] ] [ * [ - b [ - [ reduce d 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] [ - b [ - [ reduce d 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] ] ]
[ - [ reduce [ slice [ reverse a ] b c ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ filter a [ lambda1 [ reduce [ map [ filter c [ partial1 [ head b ] < ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ deref [ range 0 [ deref [ sort a ] [ / [ len a ] 2 ] ] ] [ / [ len [ range 0 [ deref [ sort a ] [ / [ len a ] 2 ] ] ] ] 2 ] ]
[ is_sorted [ slice [ reverse a ] b c ] ]
[ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] [ reduce [ slice [ sort e ] 0 f ] 0 + ] ] [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] [ reduce [ slice [ sort e ] 0 f ] 0 + ] ] ] ]
[ map [ filter a [ partial1 b < ] ] [ partial1 [ reduce [ slice [ sort c ] 0 d ] 0 + ] * ] ]
[ deref [ sort [ range 0 [ + [ / [ reduce a 0 + ] [ len a ] ] 1 ] ] ] [ / [ len [ range 0 [ + [ / [ reduce a 0 + ] [ len a ] ] 1 ] ] ] 2 ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ range 0 [ deref [ sort a ] [ / [ len a ] 2 ] ] ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce [ reverse [ digits [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 + ]
[ floor [ sqrt [ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce [ slice [ sort c ] 0 b ] 0 + ] [ reduce [ filter e [ partial0 [ reduce e 1000000000 min ] < ] ] 1000000000 min ] ] [ - [ reduce [ slice [ sort c ] 0 b ] 0 + ] [ reduce [ filter e [ partial0 [ reduce e 1000000000 min ] < ] ] 1000000000 min ] ] ] ] ] ]
[ filter [ reverse [ filter a [ partial1 b > ] ] ] [ partial1 c > ] ]
[ head [ map a [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] + ] ] ]
[ reduce [ map [ range 0 [ min [ len [ range 0 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] ] [ len d ] ] ] [ lambda1 [ if [ > [ deref [ range 0 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ map [ slice a b c ] [ partial1 [ reduce [ map [ range 0 [ min [ len d ] [ len e ] ] ] [ lambda1 [ if [ > [ deref d arg1 ] [ deref e arg1 ] ] 1 0 ] ] ] 0 + ] - ] ]
[ reduce [ reverse [ digits [ reduce [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1000000000 min ] < ] ] 1000000000 min ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ > [ + a [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 b + ] ] ] ] ] c ]
[ filter a [ lambda1 [ reduce [ map [ slice [ reverse b ] [ / [ len [ reverse b ] ] 2 ] [ len [ reverse b ] ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ filter [ filter a [ lambda1 [ reduce [ map [ map [ filter [ range 0 [ len b ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 b int-deref ] ] [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ]
[ filter [ slice a b c ] [ partial1 [ min d e ] < ] ]
[ map a [ partial1 [ + c b ] * ] ]
[ slice [ map a [ partial1 b - ] ] c d ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ reduce [ reverse [ digits [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter c [ partial1 b < ] ] ] ] [ deref [ filter c [ partial1 b < ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ filter [ map a [ partial1 b + ] ] [ partial0 [ reduce [ map a [ partial1 b + ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ filter a [ lambda1 [ reduce [ map [ slice d b c ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ reverse [ digits [ reduce [ reverse [ digits [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ slice [ sort [ digits a ] ] 0 [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 + ]
[ + [ * [ - a [ strlen c ] ] [ - a [ strlen c ] ] ] [ * [ - b [ head d ] ] [ - b [ strlen d ] ] ] ]
[ - [ reduce [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ * a [ reduce [ range 0 [ + [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ reverse [ range 1 [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter [ digits b ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] ] [ deref [ filter [ digits b ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ range 1 b ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ range 1 b ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ head [ map a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] + ] ] ]
[ reverse [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ reduce [ range 0 [ + [ deref [ sort [ range 1 [ + a 1 ] ] ] [ / [ len [ range 1 [ + a 1 ] ] ] 2 ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ map [ map [ map a [ partial1 b - ] ] [ partial0 2 * ] ] square ]
[ map [ map [ map a [ partial1 b - ] ] square ] [ partial0 2 * ] ]
[ floor [ sqrt [ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ range 0 b ] ] ] [ deref [ range 0 b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ range 0 b ] ] ] [ deref [ range 0 b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] ] ] ] ] ]
[ filter [ map [ digits a ] [ partial0 2 * ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ + [ * [ - [ deref [ sort a ] [ / [ len a ] 2 ] ] c ] [ - [ deref [ sort a ] [ / [ len a ] 2 ] ] c ] ] [ * [ - b [ reduce [ slice [ sort d ] 0 e ] 0 + ] ] [ - b [ reduce [ slice [ sort d ] 0 e ] 0 + ] ] ] ]
[ deref [ sort [ map [ range 0 [ + a 1 ] ] square ] ] [ / [ len [ map [ range 0 [ + a 1 ] ] square ] ] 2 ] ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ head [ digits b ] ] ] 0 + ]
[ digits [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ reverse [ digits [ reduce a 0 max ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ range 1 [ reduce [ range 0 [ + [ * a b ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ range 0 [ + a 1 ] ]
[ slice [ filter [ reverse a ] is_prime ] 0 [ / [ len [ filter [ reverse a ] is_prime ] ] 2 ] ]
[ filter [ range 1 [ + [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] 1 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ map d [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] - ] ] ] ] [ deref [ map d [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] - ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ reverse [ filter [ range 1 [ + a 1 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ map [ range 0 [ min [ len [ map [ map a square ] [ partial1 b - ] ] ] [ len c ] ] ] [ lambda1 [ if [ > [ deref [ map [ map a square ] [ partial1 b - ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ reverse [ reverse a ] ] [ partial1 b > ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ head [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] ]
[ - [ reduce [ range 1 [ + [ deref a [ / [ len a ] 2 ] ] 1 ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ slice a [ - [ reduce c 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] [ reduce d 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ digits [ deref a [ / [ len a ] 2 ] ] ]
[ filter [ slice [ range 1 a ] [ / [ len [ range 1 a ] ] 2 ] [ len [ range 1 a ] ] ] [ partial1 b < ] ]
[ < [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ map b square ] ] ] [ deref [ map b square ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ digits b ] ] ] [ deref [ digits b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ deref [ sort [ map a [ partial1 b - ] ] ] [ / [ len [ map a [ partial1 b - ] ] ] 2 ] ] ]
[ reduce [ slice [ reverse [ sort [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] 0 [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ] 0 + ]
[ map [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 b > ] ] [ partial1 c - ] ]
[ map a [ partial1 b - ] ]
[ digits [ - [ reduce [ map a [ partial1 b - ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ reduce [ range 0 [ + [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ reduce [ filter d [ partial0 [ reduce d 0 max ] > ] ] 0 max ] ] [ - b [ reduce [ filter d [ partial0 [ reduce d 0 max ] > ] ] 0 max ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ filter [ filter a is_prime ] [ partial1 [ deref b [ / [ len b ] 2 ] ] > ] ]
[ deref [ sort [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] [ / [ len [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] 2 ] ]
[ reduce [ map [ range 0 [ min [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ len [ filter b [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] ] ] [ lambda1 [ if [ < [ deref [ slice a [ / [ len a ] 2 ] [ len a ] ] arg1 ] [ deref [ filter b [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ digits [ head a ] ]
[ map [ filter a [ partial1 b > ] ] [ partial1 [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] + ] ]
[ map [ slice [ map a square ] 0 [ / [ len [ map a square ] ] 2 ] ] [ partial1 b + ] ]
[ filter [ slice a b c ] [ lambda1 [ reduce [ map d [ partial0 arg1 == ] ] false || ] ] ]
[ deref [ sort [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] [ / [ len [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] 2 ] ]
[ floor [ sqrt [ + [ * [ - [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] [ - [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] ] [ * [ - b [ strlen d ] ] [ - b [ strlen d ] ] ] ] ] ]
[ < [ deref [ sort [ map a [ partial1 b + ] ] ] [ / [ len [ map a [ partial1 b + ] ] ] 2 ] ] 1 ]
[ floor [ sqrt [ + [ * [ - [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] g ] [ - [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] g ] ] [ * [ - f h ] [ - f h ] ] ] ] ]
[ reduce [ map [ range 0 [ len [ filter a [ partial1 [ + c b ] < ] ] ] ] [ lambda1 [ == [ deref [ filter a [ partial1 [ + c b ] < ] ] arg1 ] [ deref [ filter a [ partial1 [ + c b ] < ] ] [ - [ - [ len [ filter a [ partial1 [ + c b ] < ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ reduce [ range 0 [ + [ reduce [ slice [ sort a ] 0 b ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ + [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ] [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] ]
[ floor [ sqrt [ + [ * [ - a [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ] [ - a [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ] ] [ * [ - [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] e ] [ - [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] e ] ] ] ] ]
[ map [ range 0 a ] [ partial0 2 * ] ]
[ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ reverse c ] ] ] [ deref [ reverse c ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ filter [ filter a [ lambda1 [ reduce [ map [ range 1 [ + b 1 ] ] [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ]
[ range 0 [ + [ reduce [ filter [ digits a ] [ partial0 [ reduce [ digits a ] 1000000000 min ] < ] ] 1000000000 min ] 1 ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ floor [ sqrt [ + [ * [ - a [ reduce [ slice [ sort c ] 0 d ] 0 + ] ] [ - a [ reduce [ slice [ sort c ] 0 d ] 0 + ] ] ] [ * [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g i ] [ - g i ] ] ] ] [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g i ] [ - g i ] ] ] ] ] ] ] ]
[ slice a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce [ map b [ partial0 2 * ] ] 1000000000 min ] ] 0 + ]
[ range 1 [ + [ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ]
[ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ]
[ reduce [ map [ range 0 [ len [ range 1 [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ] ] [ lambda1 [ == [ deref [ range 1 [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] arg1 ] [ deref [ range 1 [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] [ - [ - [ len [ range 1 [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ map [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial1 c * ] ]
[ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] 1 ] ]
[ map [ map [ reverse a ] square ] [ partial0 2 * ] ]
[ reduce [ slice [ sort [ map [ filter [ range 0 [ len [ filter a [ partial1 b < ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ filter a [ partial1 b < ] ] int-deref ] ] ] 0 c ] 0 + ]
[ filter [ map [ map a [ partial1 b + ] ] [ partial1 c + ] ] [ combine ! is_prime ] ]
[ + [ * [ - [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] [ - [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] ] [ * [ - d e ] [ - d e ] ] ]
[ map [ map a [ partial1 b + ] ] [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len d ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ] - ] ]
[ reduce [ range 0 [ + [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ min d e ] ] [ - b [ min d e ] ] ] ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ slice [ slice a b c ] [ reduce [ reverse [ digits d ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] f ]
[ map [ slice [ digits a ] [ / [ len [ digits a ] ] 2 ] [ len [ digits a ] ] ] [ partial0 2 * ] ]
[ map a [ partial1 b - ] ]
[ > [ / [ reduce [ digits a ] 0 + ] [ len [ digits a ] ] ] b ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ + a [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] ]
[ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ + d e ] ] [ - b [ + d e ] ] ] ]
[ len [ map [ filter a [ partial1 b < ] ] [ partial1 c * ] ] ]
[ slice [ digits [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] 0 [ / [ len [ digits [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] ] 2 ] ]
[ + a [ reduce [ slice e b c ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len e ] ] [ deref e arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ digits [ reduce [ map [ range 0 [ min [ len [ slice a b c ] ] [ len e ] ] ] [ lambda1 [ if [ > [ deref [ slice a b c ] arg1 ] [ deref e arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ map [ digits [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ] [ partial0 2 * ] ]
[ min [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] [ reduce b 1000000000 min ] ]
[ digits [ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ reduce [ digits [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len f ] ] [ deref f arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ map [ range 1 a ] [ partial1 [ deref b [ / [ len b ] 2 ] ] - ] ]
[ filter [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b < ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ filter a [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] > ] ]
[ reverse [ filter [ reverse a ] [ combine ! is_prime ] ] ]
[ reduce [ map [ range 0 [ len [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] ] ] [ lambda1 [ == [ deref [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] arg1 ] [ deref [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] [ - [ - [ len [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ filter [ reverse [ filter a [ partial1 b < ] ] ] [ partial1 c < ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ head [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ map [ map [ filter [ range 0 [ len [ filter a [ partial1 b < ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ filter a [ partial1 b < ] ] int-deref ] ] [ partial1 c * ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ slice [ reverse b ] 0 [ / [ len [ reverse b ] ] 2 ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ slice [ reverse b ] 0 [ / [ len [ reverse b ] ] 2 ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ deref [ sort [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] square ] ] [ / [ len [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] square ] ] 2 ] ]
[ filter [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ digits [ strlen a ] ]
[ reduce [ reverse [ digits [ deref [ sort [ range 0 a ] ] [ / [ len [ range 0 a ] ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ digits [ + [ * [ - a c ] [ - a c ] ] [ * [ - [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] d ] [ - [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] d ] ] ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ min a [ reduce [ range 0 [ + [ max c b ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ - [ reduce [ range 1 [ + [ * a b ] 1 ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ map [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ combine ! is_prime ] ] [ partial1 c * ] ]
[ slice [ slice a 0 [ / [ len a ] 2 ] ] [ head b ] c ]
[ filter [ filter [ filter a [ partial1 b > ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ combine ! is_prime ] ]
[ reduce [ range 0 [ + [ + [ * [ - a c ] [ - a c ] ] [ * [ - [ head b ] d ] [ - [ head b ] d ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ reduce [ slice [ sort [ map a [ partial1 b - ] ] ] 0 [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ] 0 + ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ reverse [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ slice [ digits [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] 0 [ / [ len [ digits [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] ] 2 ] ]
[ reduce [ reverse [ digits [ deref a [ / [ len a ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ is_sorted [ map [ filter a [ partial1 b < ] ] [ partial1 c + ] ] ]
[ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1000000000 min ]
[ reduce [ slice [ sort a ] 0 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ]
[ head [ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial0 2 * ] ] ]
[ digits [ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ strlen a ]
[ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] d ] [ - [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] d ] ] ] ] ] ]
[ slice [ filter [ reverse a ] [ partial1 b > ] ] [ / [ len [ filter [ reverse a ] [ partial1 b > ] ] ] 2 ] [ len [ filter [ reverse a ] [ partial1 b > ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ slice a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] [ - [ reduce c 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ reduce [ map [ range 0 [ min [ len [ filter a [ partial1 b < ] ] ] [ len [ map c [ partial1 d * ] ] ] ] ] [ lambda1 [ if [ < [ deref [ filter a [ partial1 b < ] ] arg1 ] [ deref [ map c [ partial1 d * ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ filter [ digits a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter d [ lambda1 [ reduce [ map [ filter c [ partial1 b < ] ] [ partial0 arg1 == ] ] false || ] ] ] ] ] [ deref [ filter d [ lambda1 [ reduce [ map [ filter c [ partial1 b < ] ] [ partial0 arg1 == ] ] false || ] ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ filter a [ lambda1 [ reduce [ map [ range 0 b ] [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ + [ * [ - [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] [ - [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] ] [ * [ - b [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] d ] ] [ - b [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] d ] ] ] ]
[ reduce [ range 0 [ + [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1000000000 min ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ * [ head a ] b ]
[ filter a [ partial1 [ strlen b ] > ] ]
[ map [ filter [ range 0 [ len [ range 0 [ deref [ sort a ] [ / [ len a ] 2 ] ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ range 0 [ deref [ sort a ] [ / [ len a ] 2 ] ] ] int-deref ] ]
[ range 1 [ reduce [ filter [ filter a [ partial1 b < ] ] [ partial0 [ reduce [ filter a [ partial1 b < ] ] 0 max ] > ] ] 0 max ] ]
[ digits [ strlen a ] ]
[ filter [ slice a 0 [ / [ len a ] 2 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ filter [ slice [ range 1 a ] [ / [ len [ range 1 a ] ] 2 ] [ len [ range 1 a ] ] ] [ partial1 b < ] ]
[ reduce [ reverse [ digits [ deref [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ / [ len [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter [ range 1 [ + [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] 1 ] ] [ lambda1 [ reduce [ map f [ partial0 arg1 == ] ] false || ] ] ]
[ reverse [ map [ map a square ] [ partial0 2 * ] ] ]
[ slice a [ deref [ sort b ] [ / [ len b ] 2 ] ] [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ]
[ map [ digits [ max a b ] ] square ]
[ range 0 [ + [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 1 ] ]
[ reduce [ map [ range 0 [ min [ len [ reverse a ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ reverse a ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ floor [ sqrt [ + [ * [ - [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] d ] [ - [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] d ] ] [ * [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e
[ head [ filter [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial1 b < ] ] ]
[ * a [ reduce [ filter [ slice d b c ] [ partial0 [ reduce [ slice d b c ] 0 max ] > ] ] 0 max ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ digits [ strlen [ reduce a "z" str_min ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ range 0 [ min [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ len [ range 1 [ + b 1 ] ] ] ] ] [ lambda1 [ if [ > [ deref [ slice a [ / [ len a ] 2 ] [ len a ] ] arg1 ] [ deref [ range 1 [ + b 1 ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ slice [ map a [ partial1 b * ] ] [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] c ] d ]
[ len [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b > ] ] ]
[ digits [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter c [ partial1 b > ] ] ] ] [ deref [ filter c [ partial1 b > ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ reduce [ slice [ reverse [ sort [ map a [ partial1 [ reduce b 1000000000 min ] * ] ] ] ] 0 c ] 0 + ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ map [ filter a [ lambda1 [ reduce [ map [ map c [ partial1 b - ] ] [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ]
[ filter a [ partial1 [ reduce [ slice [ reverse [ sort c ] ] 0 [ head b ] ] 0 + ] < ] ]
[ filter a [ lambda1 [ reduce [ map [ slice d b [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] c ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ slice a [ deref [ sort b ] [ / [ len b ] 2 ] ] c ]
[ map [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 b - ] ]
[ reduce [ filter [ map [ reverse a ] square ] [ partial0 [ reduce [ map [ reverse a ] square ] 0 max ] > ] ] 0 max ]
[ reduce [ filter [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c > ] ] [ partial0 [ reduce [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c > ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ - [ reduce [ digits [ reduce a 1000000000 min ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ - [ reduce [ range 0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ filter [ digits a ] [ partial1 [ reduce [ slice [ reverse [ sort c ] ] 0 b ] 0 + ] < ] ]
[ map [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 2 * ] ]
[ reduce [ map [ range 0 [ min [ len [ reverse [ digits a ] ] ] [ len b ] ] ] [ lambda1 [ if [ < [ deref [ reverse [ digits a ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] < ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ reduce [ filter [ slice a b [ reduce c 0 max ] ] [ partial0 [ reduce [ slice a b [ reduce c 0 max ] ] 0 max ] > ] ] 0 max ]
[ reduce [ map [ range 0 [ len [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c - ] ] ] ] [ lambda1 [ == [ deref [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c - ] ] arg1 ] [ deref [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c - ] ] [ - [ - [ len [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c - ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ slice [ reverse [ reverse a ] ] 0 [ / [ len [ reverse [ reverse a ] ] ] 2 ] ]
[ reverse [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] ]
[ reduce [ reverse [ digits [ reduce [ slice [ sort [ digits a ] ] 0 b ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map [ range 1 [ + [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] 1 ] ] [ partial1 b * ] ]
[ head [ digits [ min a b ] ] ]
[ filter [ map [ filter a [ partial1 b < ] ] square ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ map [ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b + ] ] [ partial1 c + ] ]
[ map a [ partial1 b - ] ]
[ reduce [ map [ slice a b c ] [ partial0 2 * ] ] 0 max ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ - [ reduce [ map a [ partial1 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] - ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ deref [ digits [ reduce a 1000000000 min ] ] [ / [ len [ digits [ reduce a 1000000000 min ] ] ] 2 ] ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ + [ * [ - [ reduce a 0 max ] c ] [ - [ reduce a 0 max ] c ] ] [ * [ - [ reduce b 0 max ] d ] [ - [ reduce b 0 max ] d ] ] ]
[ reduce [ filter a [ partial1 [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] b ] < ] ] 0 + ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map [ map [ digits a ] square ] [ partial1 b * ] ]
[ reduce [ map a [ partial0 2 * ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ head [ digits [ min a b ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ slice [ reverse [ sort [ range 1 [ + a 1 ] ] ] ] 0 b ] 0 + ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ filter [ filter a [ partial1 b > ] ] [ partial0 [ reduce [ filter a [ partial1 b > ] ] 1000000000 min ] < ] ] 1000000000 min ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ map a [ partial1 b - ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] 0 + ] ]
[ reduce [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 b < ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ filter [ range 1 [ + a 1 ] ] [ partial0 [ reduce [ range 1 [ + a 1 ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ - [ reduce [ digits [ max a b ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ / [ reduce [ range 0 [ + [ * a b ] 1 ] ] 0 + ] [ len [ range 0 [ + [ * a b ] 1 ] ] ] ]
[ range 0 [ + a 1 ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ reduce [ range 0 [ + [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ reduce [ filter [ slice [ reverse a ] b c ] [ partial0 [ reduce [ slice [ reverse a ] b c ] 0 max ] > ] ] 0 max ]
[ filter [ slice [ digits a ] [ / [ len [ digits a ] ] 2 ] [ len [ digits a ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ filter [ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reduce [ reverse [ digits [ reduce [ range 0 [ + [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ * [ head [ map a [ partial0 2 * ] ] ] b ]
[ reduce [ reverse [ filter a [ partial1 b < ] ] ] 0 + ]
[ reverse [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] d ] ] [ - b [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] d ] ] ] ]
[ reduce [ reverse [ digits [ + [ * [ - a c ] [ - a c ] ] [ * [ - [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 b + ] ] ] ] d ] [ - [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 b + ] ] ] ] d ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ partial1 [ reduce b 1000000000 min ] * ] ]
[ slice [ filter a [ partial1 b < ] ] c [ reduce [ filter d [ partial0 [ reduce d 1000000000 min ] < ] ] 1000000000 min ] ]
[ digits [ strlen a ] ]
[ filter [ slice a b [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] [ lambda1 [ reduce [ map d [ partial0 arg1 == ] ] false || ] ] ]
[ range 0 [ + a 1 ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ range 1 [ + [ reduce [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ is_sorted [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ combine ! is_prime ] ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter d [ lambda1 [ reduce [ map [ slice d b c ] [ partial0 arg1 == ] ] false || ] ] ] ] ] [ deref [ filter d [ lambda1 [ reduce [ map [ slice d b c ] [ partial0 arg1 == ] ] false || ] ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ * a [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] ]
[ digits [ reduce [ range 0 [ + [ reduce a 0 max ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ slice [ reverse [ map a [ partial1 b - ] ] ] 0 [ / [ len [ reverse [ map a [ partial1 b - ] ] ] ] 2 ] ]
[ min [ reduce [ range 0 [ + [ deref a [ / [ len a ] 2 ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] b ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] + ] ] ] ]
[ min [ reduce [ map [ range 0 [ min [ len a ] [ len [ map b [ partial0 2 * ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ map b [ partial0 2 * ] ] arg1 ] ] 1 0 ] ] ] 0 + ] d ]
[ slice [ reverse a ] [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ]
[ max [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ reduce [ reverse [ digits [ floor [ sqrt [ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] ] ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reverse [ slice [ filter a [ partial1 b < ] ] [ / [ len [ filter a [ partial1 b < ] ] ] 2 ] [ len [ filter a [ partial1 b < ] ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ map [ reverse a ] [ partial1 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] * ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ digits [ head [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ] ]
[ range 0 [ + a 1 ] ]
[ deref [ sort [ map [ reverse a ] [ partial0 2 * ] ] ] [ / [ len [ map [ reverse a ] [ partial0 2 * ] ] ] 2 ] ]
[ filter a [ lambda1 [ reduce [ map [ filter c [ partial1 [ head b ] > ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ map a [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len [ filter b is_prime ] ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref [ filter b is_prime ] arg1 ] ] 1 0 ] ] ] 0 + ] * ] ]
[ floor [ sqrt [ + [ * [ - a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] ] [ - a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] ] ] [ * [ - b [ reduce d 1000000000 min ] ] [ - b [ reduce d 1000000000 min ] ] ] ] ] ]
[ reduce [ range 0 [ + [ max a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ reverse [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ range 0 [ + [ reduce [ range 0 [ + [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ reverse [ filter c [ partial1 b < ] ] ] ] ] [ deref [ reverse [ filter c [ partial1 b < ] ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] [ len c ] ] ] [ lambda1 [ if [ > [ deref [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ deref [ sort [ map [ reverse a ] [ partial0 2 * ] ] ] [ / [ len [ map [ reverse a ] [ partial0 2 * ] ] ] 2 ] ]
[ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map [ map c [ partial1 d - ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ filter [ filter a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] > ] ] is_prime ]
[ digits [ reduce [ slice [ sort [ slice a b c ] ] 0 e ] 0 + ] ]
[ map [ map [ filter [ range 0 [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ slice a [ / [ len a ] 2 ] [ len a ] ] int-deref ] ] square ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ filter [ map [ filter [ range 0 [ len [ map a [ partial1 b - ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ map a [ partial1 b - ] ] int-deref ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ slice a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] [ reduce c 1000000000 min ] ]
[ range 1 [ len a ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ filter [ reverse [ filter a is_prime ] ] is_prime ]
[ range 0 [ strlen [ reduce a "" str_concat ] ] ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] + ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ deref [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ / [ len [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] 2 ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ / [ reduce a 0 + ] [ len a ] ] * ] ] ] ] ]
[ reduce [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 b < ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ map [ reverse a ] [ partial1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] + ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ + [ * [ - a d ] [ - a d ] ] [ * [ - [ min c b ] e ] [ - [ min c b ] e ] ] ] ]
[ range 1 [ strlen [ reduce a "" str_max ] ] ]
[ reduce [ reverse [ filter a [ partial1 b < ] ] ] 0 + ]
[ + [ * [ - [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] d ] [ - [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] d ] ] [ * [ - c [ reduce [ reverse [ digits e ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ - c [ reduce [ reverse [ digits e ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] ]
[ reduce [ filter [ map [ range 0 a ] [ partial1 b - ] ] [ partial0 [ reduce [ map [ range 0 a ] [ partial1 b - ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ reduce [ slice [ range 1 [ + a 1 ] ] [ / [ len [ range 1 [ + a 1 ] ] ] 2 ] [ len [ range 1 [ + a 1 ] ] ] ] 0 + ]
[ filter [ filter a [ lambda1 [ reduce [ map [ slice b [ / [ len b ] 2 ] [ len b ] ] [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ]
[ * a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ map [ range 0 [ min [ len [ map a [ partial1 b + ] ] ] [ len c ] ] ] [ lambda1 [ if [ > [ deref [ map a [ partial1 b + ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ head [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ reverse [ digits [ reduce a 0 max ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ digits [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] ] 0 + ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ digits [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter c [ partial1 b > ] ] ] ] [ deref [ filter c [ partial1 b > ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ + [ * [ - [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] [ - [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] ] [ * [ - b [ - [ reduce d 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] [ - b [ - [ reduce d 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reverse [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] ]
[ reduce [ reverse [ digits [ reduce [ range 1 [ + a 1 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ slice [ reverse [ range 1 a ] ] [ / [ len [ reverse [ range 1 a ] ] ] 2 ] [ len [ reverse [ range 1 a ] ] ] ]
[ deref [ sort [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] ]
[ filter a [ lambda1 [ reduce [ map [ reverse [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter [ reverse b ] [ combine ! is_prime ] ] ] ] [ deref [ filter [ reverse b ] [ combine ! is_prime ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ > [ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ filter [ range 0 [ len b ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 b int-deref ] ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map [ filter [ range 0 [ len b ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 b int-deref ] ] arg1 ] ] 1 0 ] ] ] 0 + ] c ]
[ + a [ deref [ sort b ] [ / [ len b ] 2 ] ] ]
[ <= a [ head b ] ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ floor [ sqrt [ + [ * [ - a [ reduce [ slice [ sort c ] 0 d ] 0 + ] ] [ - a [ reduce [ slice [ sort c ] 0 d ] 0 + ] ] ] [ * [ - b [ reduce [ filter e [ partial0 [ reduce e 0 max ] > ] ] 0 max ] ] [ - b [ reduce [ filter e [ partial0 [ reduce e 0 max ] > ] ] 0 max ] ] ] ] ] ]
[ filter [ reverse a ] [ partial1 [ reduce [ slice [ sort c ] 0 b ] 0 + ] < ] ]
[ < [ deref [ sort [ reverse a ] ] [ / [ len [ reverse a ] ] 2 ] ] b ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] * ] ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ map [ map [ filter [ range 0 [ len [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] int-deref ] ] [ partial1 c * ] ]
[ filter [ range 0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ combine ! is_prime ] ]
[ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reverse [ filter [ map a [ partial1 b - ] ] [ partial1 c < ] ] ]
[ digits [ head a ] ]
[ floor [ sqrt [ + [ * [ - [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] [ - [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] ] [ * [ - b [ reduce [ slice [ sort d ] 0 e ] 0 + ] ] [ - b [ reduce [ slice [ sort d ] 0 e ] 0 + ] ] ] ] ] ]
[ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] [ head d ] ] [ - [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] [ head d ] ] ] ] ] ]
[ + [ reduce a 0 max ] [ reduce c 0 max ] ]
[ map [ filter [ range 0 [ len [ range 1 [ + a 1 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ range 1 [ + a 1 ] ] int-deref ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ map [ range 0 [ min [ len a ] [ len [ reverse b ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ reverse b ] arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ floor [ sqrt [ + [ * [ - a [ min c d ] ] [ - a [ min c d ] ] ] [ * [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g i ] [ - g i ] ] ] ] [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g i ] [ - g i ] ] ] ] ] ] ] ]
[ deref [ map [ digits a ] [ partial0 2 * ] ] [ / [ len [ map [ digits a ] [ partial0 2 * ] ] ] 2 ] ]
[ filter [ map [ filter [ range 0 [ len [ filter a [ partial1 b > ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ filter a [ partial1 b > ] ] int-deref ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reduce [ slice [ reverse [ sort [ map a [ partial1 [ * c b ] - ] ] ] ] 0 d ] 0 + ]
[ map [ slice [ slice a b c ] e f ] [ partial0 2 * ] ]
[ reverse [ map a [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] + ] ] ]
[ filter [ range 1 [ + a 1 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ filter a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] > ] ]
[ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 [ strlen c ] + ] ]
[ reduce [ map [ range 0 [ min [ len [ map [ digits a ] square ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ map [ digits a ] square ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] 0 [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] ] [ partial1 b < ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ floor [ sqrt [ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce [ map [ range 0 [ min [ len c ] [ len [ digits b ] ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref [ digits b ] arg1 ] ] 1 0 ] ] ] 0 + ] e ] [ - [ reduce [ map [ range 0 [ min [ len c ] [ len [ digits b ] ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref [ digits b ] arg1 ] ] 1 0 ] ] ] 0 + ] e ] ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ head [ digits b ] ] ] 0 + ]
[ floor [ sqrt [ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] e ] [ - [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] e ] ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] + ] ] ] ]
[ map [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] square ]
[ < [ reduce [ range 0 [ + [ / [ reduce a 0 + ] [ len a ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] b ]
[ reduce [ slice [ map a [ partial1 b * ] ] [ / [ len [ map a [ partial1 b * ] ] ] 2 ] [ len [ map a [ partial1 b * ] ] ] ] 0 max ]
[ reduce [ range 0 [ + [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ reduce [ slice [ reverse [ sort d ] ] 0 e ] 0 + ] ] [ - b [ reduce [ slice [ reverse [ sort d ] ] 0 e ] 0 + ] ] ] ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ slice a [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter [ filter a [ lambda1 [ reduce [ map [ slice b 0 [ / [ len b ] 2 ] ] [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ slice [ sort a ] 0 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ]
[ reduce [ slice [ sort [ map a [ partial1 b - ] ] ] 0 [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 + ]
[ floor [ sqrt [ + [ * [ - a [ max d e ] ] [ - a [ max d e ] ] ] [ * [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] f ] [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] f ] ] ] ] ]
[ + [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 max ]
[ + [ * [ - [ + a b ] d ] [ - [ + a b ] d ] ] [ * [ - c [ head e ] ] [ - c [ head e ] ] ] ]
[ filter [ digits a ] [ partial1 [ / [ reduce b 0 + ] [ len b ] ] < ] ]
[ filter [ reverse a ] [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ reverse c ] ] ] [ deref [ reverse c ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ range 0 [ + [ reduce [ slice a [ / [ len a ] 2 ] [ len a ] ] 1000000000 min ] 1 ] ]
[ reduce [ filter [ map [ reverse a ] square ] [ partial0 [ reduce [ map [ reverse a ] square ] 0 max ] > ] ] 0 max ]
[ map [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial1 [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ > [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] - ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reverse [ map a [ partial1 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] + ] ] ]
[ reduce [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 b < ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ reduce [ digits [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len f ] ] [ deref f arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ map [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial0 2 * ] ] [ partial0 2 * ] ]
[ reduce [ digits [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ] 1000000000 min ]
[ reduce [ range 0 [ + [ strlen [ reduce a "z" str_min ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ digits [ strlen [ reduce a "z" str_min ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ head [ slice a b c ] ] ]
[ + [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ] [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] ]
[ - [ reduce [ filter a [ partial1 [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ < [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] > ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ map [ slice [ map a square ] [ / [ len [ map a square ] ] 2 ] [ len [ map a square ] ] ] [ partial0 2 * ] ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] ] 0 + ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ max [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ * [ min a b ] [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] c ] ]
[ filter a [ lambda1 [ reduce [ map [ slice d b c ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ slice a 0 [ / [ len a ] 2 ] ] 1000000000 min ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ filter [ reverse a ] [ partial1 [ deref b [ / [ len b ] 2 ] ] > ] ]
[ digits [ strlen a ] ]
[ digits [ reduce [ map [ range 0 [ min [ len [ reverse a ] ] [ len b ] ] ] [ lambda1 [ if [ < [ deref [ reverse a ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ filter [ map a [ partial1 [ deref b [ / [ len b ] 2 ] ] * ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ range 0 [ len [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ] ] ] [ lambda1 [ == [ deref [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ] arg1 ] [ deref [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ] [ - [ - [ len [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ - [ reduce [ filter [ map a [ partial1 b - ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ reverse c ] [ partial1 b + ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ map [ reverse c ] [ partial1 b + ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ - [ reduce [ range 1 a ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ digits [ strlen a ] ]
[ range 0 [ + a 1 ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ] ]
[ max [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter b [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] ] [ deref [ filter b [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] c ]
[ map [ range 0 [ max a b ] ] square ]
[ filter [ slice [ range 0 [ + a 1 ] ] [ / [ len [ range 0 [ + a 1 ] ] ] 2 ] [ len [ range 0 [ + a 1 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ range 1 [ reduce [ slice [ reverse [ sort [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] 0 b ] 0 + ] ]
[ filter [ reverse [ reverse a ] ] [ combine ! is_prime ] ]
[ max [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] [ deref [ sort f ] [ / [ len f ] 2 ] ] ]
[ / [ reduce [ map [ digits a ] [ partial1 b + ] ] 0 + ] [ len [ map [ digits a ] [ partial1 b + ] ] ] ]
[ floor [ sqrt [ + [ * [ - a [ min c d ] ] [ - a [ min c d ] ] ] [ * [ - b [ floor [ sqrt [ + [ * [ - f h ] [ - f h ] ] [ * [ - g i ] [ - g i ] ] ] ] ] ] [ - b [ floor [ sqrt [ + [ * [ - f h ] [ - f h ] ] [ * [ - g i ] [ - g i ] ] ] ] ] ] ] ] ] ]
[ map [ filter [ range 0 [ len [ map [ slice a 0 [ / [ len a ] 2 ] ] square ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ map [ slice a 0 [ / [ len a ] 2 ] ] square ] int-deref ] ]
[ filter [ reverse a ] [ partial1 [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 b + ] ] ] ] > ] ]
[ + [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] b ]
[ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ reverse [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ min [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] b ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ digits [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ digits [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ map a [ partial1 [ strlen [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] - ] ]
[ + [ * [ - a [ strlen d ] ] [ - a [ strlen d ] ] ] [ * [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] ] ]
[ map [ range 1 [ + [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] 1 ] ] [ partial0 2 * ] ]
[ reduce [ map [ range 0 [ len [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] ] ] [ lambda1 [ == [ deref [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] arg1 ] [ deref [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] [ - [ - [ len [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ reduce [ range 0 [ + [ + [ * [ - a c ] [ - a c ] ] [ * [ - [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] d ] [ - [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] d ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ filter [ map a square ] [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] > ] ]
[ filter [ reverse a ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ digits [ - [ reduce [ slice a b c ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ digits [ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] ] ] ]
[ filter [ digits a ] [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] > ] ]
[ map a [ partial1 [ max d [ reduce [ slice [ sort c ] 0 b ] 0 + ] ] + ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ reverse [ digits [ reduce [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ reverse [ digits [ / [ reduce a 0 + ] [ len a ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map [ slice [ filter a [ partial1 b < ] ] c d ] square ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ filter b is_prime ] [ partial0 2 * ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ map [ filter b is_prime ] [ partial0 2 * ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ map [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 b > ] ] [ partial1 c - ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ slice [ sort a ] 0 [ reduce [ map c [ partial1 b - ] ] 0 max ] ] 0 + ]
[ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 b + ] ] ] ] > ] ]
[ reduce [ slice [ sort [ reverse [ range 1 [ + a 1 ] ] ] ] 0 b ] 0 + ]
[ reverse [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ range 0 [ min a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] ] ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ range 0 [ reduce [ filter [ map a [ partial0 2 * ] ] [ partial0 [ reduce [ map a [ partial0 2 * ] ] 0 max ] > ] ] 0 max ] ]
[ filter [ slice [ reverse a ] [ / [ len [ reverse a ] ] 2 ] [ len [ reverse a ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ slice [ reverse [ map a [ partial1 b * ] ] ] c d ]
[ reduce [ slice [ sort [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] ] 0 c ] 0 + ]
[ reduce [ slice [ reverse [ sort [ filter a [ partial1 b > ] ] ] ] 0 [ max c d ] ] 0 + ]
[ map a [ partial1 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] - ] ]
[ reduce [ slice [ sort [ filter a [ partial1 b > ] ] ] 0 [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ] 0 + ]
[ * a [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ filter [ digits [ reduce a 0 max ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reduce [ filter [ digits a ] [ partial0 [ reduce [ digits a ] 0 max ] > ] ] 0 max ]
[ filter [ map a [ partial1 b - ] ] [ partial1 [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] > ] ]
[ reduce [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial0 [ reduce [ slice a 0 [ / [ len a ] 2 ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ digits [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce a 0 max ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ reverse [ digits [ reduce a 0 max ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b - ] ]
[ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] < ] ]
[ range 1 [ + [ deref [ reverse a ] [ / [ len [ reverse a ] ] 2 ] ] 1 ] ]
[ reduce [ reverse [ digits [ min [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] f ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ slice [ reverse [ sort [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] 0 c ] 0 + ] ]
[ < [ min a [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] c ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter [ slice d b c ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] ] [ deref [ filter [ slice d b c ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ map [ map a [ partial1 b - ] ] [ partial1 [ - [ reduce c 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] * ] ]
[ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len [ range 1 [ + a 1 ] ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ range 1 [ + a 1 ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ deref [ sort [ reverse a ] ] [ / [ len [ reverse a ] ] 2 ] ] ]
[ filter a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ + c b ] ] > ] ]
[ reduce [ filter [ range 1 [ + a 1 ] ] [ partial0 [ reduce [ range 1 [ + a 1 ] ] 0 max ] > ] ] 0 max ]
[ filter [ filter [ filter a [ partial1 b > ] ] [ combine ! is_prime ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reduce [ range 0 [ + [ reduce [ reverse a ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ deref [ sort [ slice [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ / [ len [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ] 2 ] [ len [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ] ] 2 ] [ len [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ] ] ] [ / [ len [ slice [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ / [ len [ map [ filter [ range 0 [ len a ]
[ slice [ range 0 [ + a 1 ] ] [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] c ]
[ reduce [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] 1000000000 min ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ reduce [ map [ range 0 [ min [ len [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c - ] ] ] [ len d ] ] ] [ lambda1 [ if [ < [ deref [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c - ] ] arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ deref [ sort [ range 0 [ + a 1 ] ] ] [ / [ len [ range 0 [ + a 1 ] ] ] 2 ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ deref [ sort [ reverse a ] ] [ / [ len [ reverse a ] ] 2 ] ] ]
[ filter [ filter [ filter a [ partial1 b < ] ] is_prime ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ]
[ map a [ partial1 b - ] ]
[ filter [ reverse [ reverse a ] ] [ partial1 b < ] ]
[ is_sorted [ reverse [ filter a [ partial1 b < ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ map a [ partial1 b - ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ filter b [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 2 * ] ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ map [ filter b [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 2 * ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ map [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial1 b + ] ] [ partial0 2 * ] ]
[ deref [ sort [ range 1 [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ] ] [ / [ len [ range 1 [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ] ] 2 ] ]
[ map [ filter a [ partial1 b > ] ] [ partial1 [ head c ] - ] ]
[ + [ * [ - [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] d ] [ - [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] d ] ] [ * [ - c [ reduce e 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len f ] ] [ deref f arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] [ - c [ reduce e 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len f ] ] [ deref f arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ] ]
[ slice [ map a [ partial0 2 * ] ] b [ deref [ sort c ] [ / [ len c ] 2 ] ] ]
[ len [ filter [ map a square ] [ partial1 b < ] ] ]
[ map [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] [ partial0 2 * ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ filter [ range 0 [ len [ slice b [ / [ len b ] 2 ] [ len b ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ slice b [ / [ len b ] 2 ] [ len b ] ] int-deref ] ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map [ filter [ range 0 [ len [ slice b [ / [ len b ] 2 ] [ len b ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ slice b [ / [ len b ] 2 ] [ len b ] ] int-deref ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len [ filter [ range 0 [ + a 1 ] ] [ combine ! is_prime ] ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ filter [ range 0 [ + a 1 ] ] [ combine ! is_prime ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ reverse c ] ] ] [ deref [ reverse c ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ map [ range 0 [ len [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] ] ] [ lambda1 [ == [ deref [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] arg1 ] [ deref [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] [ - [ - [ len [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ digits [ deref [ sort [ filter a [ combine ! is_prime ] ] ] [ / [ len [ filter a [ combine ! is_prime ] ] ] 2 ] ] ]
[ reduce [ map [ range 0 [ len [ filter [ digits a ] [ partial1 b > ] ] ] ] [ lambda1 [ == [ deref [ filter [ digits a ] [ partial1 b > ] ] arg1 ] [ deref [ filter [ digits a ] [ partial1 b > ] ] [ - [ - [ len [ filter [ digits a ] [ partial1 b > ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ reduce [ filter [ digits a ] [ partial0 [ reduce [ digits a ] 1000000000 min ] < ] ] 1000000000 min ]
[ reduce [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] is_prime ] 1000000000 min ]
[ filter [ digits a ] [ partial1 [ / [ reduce b 0 + ] [ len b ] ] < ] ]
[ filter [ range 0 [ + [ + a b ] 1 ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ]
[ range 1 [ reduce [ reverse [ digits [ deref [ sort a ] [ / [ len a ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ map [ map [ filter a [ partial1 b > ] ] square ] [ partial0 2 * ] ]
[ reduce [ slice [ reverse [ sort [ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial0 2 * ] ] ] ] 0 b ] 0 + ]
[ filter a [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ digits b ] ] ] [ deref [ digits b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] > ] ]
[ filter [ map [ filter [ range 0 [ len [ reverse a ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ reverse a ] int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ filter [ slice [ digits a ] 0 [ / [ len [ digits a ] ] 2 ] ] [ partial1 b < ] ]
[ >= a [ head b ] ]
[ reduce [ map [ digits a ] [ partial1 b * ] ] 0 + ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ filter [ map [ filter [ range 0 [ len [ reverse a ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ reverse a ] int-deref ] ] [ partial1 b < ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ filter [ map a [ partial1 b + ] ] [ partial0 [ reduce [ map a [ partial1 b + ] ] 1000000000 min ] < ] ] 1000000000 min ] ]
[ digits [ reduce [ slice [ sort a ] 0 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 + ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ deref [ sort [ range 0 [ + [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] 1 ] ] ] [ / [ len [ range 0 [ + [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] 1 ] ] ] 2 ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ filter [ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] square ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ map [ range 1 [ + [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] 1 ] ] [ partial0 2 * ] ]
[ deref [ sort [ filter [ range 0 [ + a 1 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] [ / [ len [ filter [ range 0 [ + a 1 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] 2 ] ]
[ digits [ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] + ] ] ] ]
[ map [ map [ filter [ range 0 [ len [ slice a 0 [ / [ len a ] 2 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ slice a 0 [ / [ len a ] 2 ] ] int-deref ] ] square ]
[ range 0 [ deref [ sort a ] [ / [ len a ] 2 ] ] ]
[ map [ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] square ] [ partial1 b + ] ]
[ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] + ] ]
[ slice [ digits [ len a ] ] [ / [ len [ digits [ len a ] ] ] 2 ] [ len [ digits [ len a ] ] ] ]
[ is_sorted [ slice a b [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ filter [ filter [ filter a [ partial1 b < ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial1 c < ] ]
[ reduce [ slice [ sort a ] 0 [ reduce [ reverse [ digits [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 + ]
[ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ digits [ strlen a ] ]
[ reduce [ slice [ sort [ slice a 0 [ / [ len a ] 2 ] ] ] 0 [ strlen b ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len [ map [ map a square ] [ partial1 b - ] ] ] [ len c ] ] ] [ lambda1 [ if [ > [ deref [ map [ map a square ] [ partial1 b - ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ map [ slice a b c ] [ partial1 [ reduce [ map [ range 0 [ min [ len d ] [ len e ] ] ] [ lambda1 [ if [ < [ deref d arg1 ] [ deref e arg1 ] ] 1 0 ] ] ] 0 + ] * ] ]
[ reduce [ slice [ sort [ filter [ range 0 [ + a 1 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] 0 c ] 0 + ]
[ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] d ] [ - [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] d ] ] ] ] ]
[ range 0 [ + [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] 1 ] ]
[ reduce [ slice [ reverse [ sort [ map a [ partial1 b * ] ] ] ] 0 [ + c d ] ] 0 + ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ filter [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] square ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ < [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 b + ] ] ] ] ]
[ map a [ partial1 [ min c [ reduce b 0 max ] ] + ] ]
[ range 1 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ slice d b c ] ] ] [ deref [ slice d b c ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] < ] ]
[ head [ map a [ partial1 [ + c b ] * ] ] ]
[ digits [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter c [ partial1 b > ] ] ] ] [ deref [ filter c [ partial1 b > ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ filter [ filter a [ lambda1 [ reduce [ map [ digits b ] [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ]
[ reduce [ range 0 [ + [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ reduce [ slice [ sort d ] 0 e ] 0 + ] ] [ - b [ reduce [ slice [ sort d ] 0 e ] 0 + ] ] ] ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] [ head b ] c ]
[ reduce [ reverse [ digits [ deref [ sort [ map a square ] ] [ / [ len [ map a square ] ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ range 0 [ + [ reduce [ range 0 [ + [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ reduce [ slice [ reverse [ sort [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] 0 [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] c ] ] 0 + ]
[ reduce [ reverse [ digits [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ + [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] b ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reverse [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ reverse [ digits [ reduce [ range 0 [ + [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter [ range 0 [ + [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ slice [ sort a ] 0 [ reduce [ slice [ reverse [ sort c ] ] 0 b ] 0 + ] ] 0 + ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ map [ map [ map a square ] [ partial0 2 * ] ] square ]
[ reduce [ filter a [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] < ] ] 0 max ]
[ reduce [ map [ range 0 [ len [ slice a [ head b ] c ] ] ] [ lambda1 [ == [ deref [ slice a [ head b ] c ] arg1 ] [ deref [ slice a [ head b ] c ] [ - [ - [ len [ slice a [ head b ] c ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ filter [ map [ reverse a ] square ] [ partial0 [ reduce [ map [ reverse a ] square ] 0 max ] > ] ] 0 max ]
[ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ head [ filter a [ partial1 [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ < [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] < ] ] ]
[ map [ filter [ filter a [ partial1 b > ] ] [ combine ! is_prime ] ] [ partial0 2 * ] ]
[ is_sorted [ map a [ partial1 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] + ] ] ]
[ reduce [ slice [ sort [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] ] 0 c ] 0 + ]
[ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ reduce [ map [ slice e b c ] [ partial0 arg1 == ] ] false || ] ] ]
[ filter [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ]
[ - [ reduce [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ filter [ digits a ] [ partial0 [ reduce [ digits a ] 1000000000 min ] < ] ] 1000000000 min ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ map [ reverse b ] square ] ] ] [ deref [ map [ reverse b ] square ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ + [ * [ - a [ strlen d ] ] [ - a [ strlen d ] ] ] [ * [ - [ reduce [ slice [ sort c ] 0 b ] 0 + ] e ] [ - [ reduce [ slice [ sort c ] 0 b ] 0 + ] e ] ] ]
[ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ slice d e c ] ] ] [ deref [ slice d e c ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ reverse [ digits [ reduce [ slice [ sort [ slice a 0 [ / [ len a ] 2 ] ] ] 0 b ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ * [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ]
[ reduce [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c - ] ] 1000000000 min ]
[ min [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] [ min c b ] ]
[ + a [ max c [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 b + ] ] ] ] ] ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ filter [ map [ reverse a ] square ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ filter a [ lambda1 [ reduce [ map [ digits [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ slice a 0 [ / [ len a ] 2 ] ] 1000000000 min ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] + ] ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ]
[ map [ map a [ partial1 [ min c b ] - ] ] [ partial0 2 * ] ]
[ map [ range 0 [ + [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] 1 ] ] square ]
[ reverse [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] ]
[ reduce [ map [ range 0 [ min [ len [ reverse [ slice a b c ] ] ] [ len d ] ] ] [ lambda1 [ if [ > [ deref [ reverse [ slice a b c ] ] arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ range 0 [ + [ deref [ map a [ partial1 b - ] ] [ / [ len [ map a [ partial1 b - ] ] ] 2 ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ reduce [ map [ range 0 [ min [ len [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] ] [ len c ] ] ] [ lambda1 [ if [ < [ deref [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ range 0 [ + [ - [ reduce [ reverse a ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ digits [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ slice d b c ] ] ] [ deref [ slice d b c ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ reduce [ map [ range 0 [ len [ map [ slice a b c ] [ partial0 2 * ] ] ] ] [ lambda1 [ == [ deref [ map [ slice a b c ] [ partial0 2 * ] ] arg1 ] [ deref [ map [ slice a b c ] [ partial0 2 * ] ] [ - [ - [ len [ map [ slice a b c ] [ partial0 2 * ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ map [ map [ range 1 [ + a 1 ] ] square ] [ partial0 2 * ] ]
[ range 1 [ + [ reduce [ range 0 [ + [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] 1 ] ]
[ filter [ map [ map a [ partial1 b - ] ] [ partial1 c * ] ] [ partial1 d > ] ]
[ floor [ sqrt [ + [ * [ - a [ reduce [ slice [ sort c ] 0 d ] 0 + ] ] [ - a [ reduce [ slice [ sort c ] 0 d ] 0 + ] ] ] [ * [ - b [ strlen e ] ] [ - b [ strlen e ] ] ] ] ] ]
[ digits [ strlen a ] ]
[ map [ map [ slice a 0 [ / [ len a ] 2 ] ] square ] [ partial1 b + ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ digits [ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ digits [ strlen a ] ]
[ + [ * [ - a [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 c * ] ] ] ] ] ] [ - a [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 c * ] ] ] ] ] ] ] [ * [ - b [ reduce d 0 max ] ] [ - b [ reduce d 0 max ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ * a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ digits b ] ] ] [ deref [ digits b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ reduce [ range 0 [ + [ reduce [ slice [ sort a ] 0 [ reduce b 0 max ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ digits [ strlen [ reduce a "z" str_min ] ] ]
[ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 [ head b ] < ] ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ digits [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - [ head b ] d ] [ - [ head b ] d ] ] ] ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ deref [ reverse a ] [ / [ len [ reverse a ] ] 2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ range 1 [ + a 1 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ slice [ reverse [ reverse a ] ] 0 [ / [ len [ reverse [ reverse a ] ] ] 2 ] ]
[ * a [ reduce [ range 0 [ + [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ reduce [ filter [ map [ map a [ partial1 b * ] ] [ partial1 c * ] ] [ partial0 [ reduce [ map [ map a [ partial1 b * ] ] [ partial1 c * ] ] 0 max ] > ] ] 0 max ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter [ slice d b c ] [ partial1 d < ] ] ] ] [ deref [ filter [ slice d b c ] [ partial1 d < ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ digits [ - [ reduce [ map a [ partial1 b + ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ slice a [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] [ reduce [ map [ range 0 [ min [ len d ] [ len e ] ] ] [ lambda1 [ if [ > [ deref d arg1 ] [ deref e arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ reduce [ slice a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ] 0 max ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ reduce [ slice [ sort a ] 0 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] ] 0 + ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ map [ range 1 [ max a b ] ] square ]
[ map [ filter [ range 0 [ len [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] int-deref ] ]
[ reduce [ map [ range 0 [ len [ slice [ range 1 a ] b c ] ] ] [ lambda1 [ == [ deref [ slice [ range 1 a ] b c ] arg1 ] [ deref [ slice [ range 1 a ] b c ] [ - [ - [ len [ range 1 a ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ digits [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce a 0 max ] ] ]
[ slice a [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map [ digits a ] [ partial1 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] + ] ]
[ + [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ reverse [ filter [ filter a [ combine ! is_prime ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ reverse [ digits [ deref a [ / [ len a ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map [ map [ filter a [ partial1 b > ] ] [ partial1 c - ] ] [ partial0 2 * ] ]
[ slice [ reverse [ filter a [ combine ! is_prime ] ] ] b c ]
[ slice [ slice [ filter a [ partial1 b < ] ] c d ] [ / [ len [ slice [ filter a [ partial1 b < ] ] c d ] ] 2 ] [ len [ slice [ filter a [ partial1 b < ] ] c d ] ] ]
[ digits [ reduce [ map [ range 0 [ min [ len a ] [ len [ map b square ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map b square ] arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ reduce [ range 0 [ + [ reduce [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ digits [ reduce [ range 0 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ deref [ filter a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] < ] ] [ / [ len [ filter a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] < ] ] ] 2 ] ]
[ filter [ filter a [ lambda1 [ reduce [ map [ map c [ partial1 b + ] ] [ partial0 arg1 == ] ] false || ] ] ] [ partial1 d > ] ]
[ reduce [ slice a b c ] 1000000000 min ]
[ len [ range 1 [ + [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] 1 ] ] ]
[ * a [ reduce [ reverse [ digits [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ reverse [ digits [ / [ reduce a 0 + ] [ len a ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ min [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] [ strlen b ] ]
[ map a [ partial1 [ deref b [ / [ len b ] 2 ] ] * ] ]
[ len [ slice a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] c ] ]
[ + [ reduce [ slice a 0 [ / [ len a ] 2 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] c ]
[ reduce [ map [ range 0 [ len [ map [ slice a b c ] [ partial0 2 * ] ] ] ] [ lambda1 [ == [ deref [ map [ slice a b c ] [ partial0 2 * ] ] arg1 ] [ deref [ map [ slice a b c ] [ partial0 2 * ] ] [ - [ - [ len [ map [ slice a b c ] [ partial0 2 * ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ max a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ digits b ] ] ] [ deref [ digits b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len d ] ] [ deref d arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] * ] ]
[ filter [ reverse [ reverse a ] ] [ partial1 b < ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ slice d b c ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ slice d b c ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ filter a [ partial1 b < ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ - [ reduce [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ filter [ map [ map a [ partial1 b + ] ] square ] [ partial1 c < ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ slice [ sort [ slice a b c ] ] 0 e ] 0 + ] ]
[ reduce [ map a [ partial1 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] * ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len [ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] square ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] square ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ slice [ sort a ] 0 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ]
[ deref [ sort [ filter a [ combine ! is_prime ] ] ] [ / [ len [ filter a [ combine ! is_prime ] ] ] 2 ] ]
[ map a [ partial1 [ - [ reduce [ filter b [ combine ! is_prime ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] - ] ]
[ filter a [ lambda1 [ reduce [ map [ slice d b c ] [ partial0 arg1 == ] ] false || ] ] ]
[ map [ range 1 a ] [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] * ] ]
[ reduce [ range 0 [ + [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ reduce [ slice [ sort [ slice a 0 [ / [ len a ] 2 ] ] ] 0 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 + ]
[ > [ min a b ] [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] c ] ]
[ map [ map [ filter a [ partial1 b > ] ] square ] [ partial0 2 * ] ]
[ reduce [ reverse [ digits [ head [ map a square ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ + [ * [ - a e ] [ - a e ] ] [ * [ - [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ < [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] f ] [ - [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ < [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] f ] ] ]
[ map [ slice [ slice a b c ] [ / [ len [ slice a b c ] ] 2 ] [ len [ slice a b c ] ] ] square ]
[ map [ filter [ range 0 [ len [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] int-deref ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ slice [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ deref c [ / [ len c ] 2 ] ] d ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map [ filter a [ partial1 b < ] ] [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len d ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ] - ] ]
[ map [ slice a b [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ] square ]
[ floor [ sqrt [ + [ * [ - a [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 d + ] ] ] ] ] [ - a [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 d + ] ] ] ] ] ] [ * [ - [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] e ] [ - [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] e ] ] ] ] ]
[ filter [ filter a [ partial1 [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] > ] ] [ combine ! is_prime ] ]
[ + [ * [ - a [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 d + ] ] ] ] ] [ - a [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 d + ] ] ] ] ] ] [ * [ - [ max c b ] e ] [ - [ max c b ] e ] ] ]
[ reverse [ range 1 [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ range 1 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ range 1 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ >= [ reduce [ range 0 [ + [ max a b ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] 1 ]
[ head [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ filter [ filter a is_prime ] [ partial1 [ reduce [ slice [ sort c ] 0 b ] 0 + ] < ] ]
[ head [ map a [ partial1 b - ] ] ]
[ is_sorted [ filter a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] > ] ] ]
[ deref [ map [ digits a ] [ partial0 2 * ] ] [ / [ len [ map [ digits a ] [ partial0 2 * ] ] ] 2 ] ]
[ reverse [ map [ filter a [ partial1 b < ] ] [ partial1 c + ] ] ]
[ map a [ partial1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] - ] ]
[ reduce [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] 0 [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] ] 1000000000 min ]
[ map [ map [ map a [ partial1 b - ] ] [ partial0 2 * ] ] [ partial1 c - ] ]
[ is_sorted [ filter [ range 0 a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ map [ digits [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ] [ partial0 2 * ] ]
[ slice a [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] c ]
[ max a [ min c b ] ]
[ reverse [ map [ slice a b c ] [ partial1 e * ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ * a [ reduce [ reverse [ digits [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ filter [ slice a b c ] [ partial1 [ floor [ sqrt [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] ] < ] ]
[ reduce [ filter [ filter a is_prime ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1000000000 min ]
[ + [ * [ - a c ] [ - a c ] ] [ * [ - [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] d ] [ - [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] d ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ slice [ sort a ] 0 [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ]
[ filter [ digits [ reduce a 1000000000 min ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ * a [ reduce [ reverse [ digits [ strlen b ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ range 0 [ + [ min a b ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ reduce [ slice [ reverse [ sort [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] ] 0 [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] 0 + ]
[ filter a [ partial1 [ reduce [ range 0 [ + [ deref [ sort b ] [ / [ len b ] 2 ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] > ] ]
[ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] < ] ]
[ floor [ sqrt [ + [ * [ - a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len d ] ] [ deref d arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] [ - a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len d ] ] [ deref d arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ] [ * [ - b [ reduce [ range 0 [ + e 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] [ - b [ reduce [ range 0 [ + e 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [
[ reduce [ filter [ map [ map a [ partial1 b * ] ] [ partial1 c * ] ] [ partial0 [ reduce [ map [ map a [ partial1 b * ] ] [ partial1 c * ] ] 0 max ] > ] ] 0 max ]
[ * a [ reduce [ reverse [ digits [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ range 0 [ + [ reduce [ slice [ sort a ] 0 b ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ map [ range 0 [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] square ]
[ min [ / [ reduce a 0 + ] [ len a ] ] [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ reduce [ filter [ slice [ range 1 a ] 0 [ / [ len [ range 1 a ] ] 2 ] ] [ partial0 [ reduce [ slice [ range 1 a ] 0 [ / [ len [ range 1 a ] ] 2 ] ] 0 max ] > ] ] 0 max ]
[ range 1 [ + [ deref [ reverse a ] [ / [ len [ reverse a ] ] 2 ] ] 1 ] ]
[ reverse [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] ]
[ deref [ sort [ range 0 [ + [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] 1 ] ] ] [ / [ len [ range 0 [ + [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] 1 ] ] ] 2 ] ]
[ slice [ slice a 0 [ / [ len a ] 2 ] ] [ reduce b 1000000000 min ] c ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ deref [ sort [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] ] [ / [ len [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] ] 2 ] ]
[ reverse [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ reverse [ digits [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ digits [ strlen a ] ]
[ map [ filter [ range 0 [ + a 1 ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] square ]
[ map [ map [ filter [ range 0 [ len [ digits a ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ digits a ] int-deref ] ] [ partial0 2 * ] ]
[ > [ - [ reduce [ range 1 a ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] b ]
[ is_sorted [ filter a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] > ] ] ]
[ reduce [ map [ range 0 [ min [ len [ slice a b c ] ] [ len [ digits e ] ] ] ] [ lambda1 [ if [ > [ deref [ slice a b c ] arg1 ] [ deref [ digits e ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ filter [ range 0 [ len [ reverse b ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ reverse b ] int-deref ] ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ map [ filter [ range 0 [ len [ reverse b ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ reverse b ] int-deref ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] + ] ] ] ]
[ reduce [ range 0 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ digits b ] ] ] [ deref [ digits b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ digits [ strlen a ] ]
[ reduce [ slice [ reverse [ sort [ slice a b [ + [ * [ - f c ] [ - f c ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] 0 g ] 0 + ]
[ slice [ map a [ partial1 b - ] ] 0 [ / [ len [ map a [ partial1 b - ] ] ] 2 ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] + ] ] ] ]
[ reduce [ range 0 [ + [ reduce [ filter a [ partial1 b > ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ reverse [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ]
[ filter [ reverse a ] [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ]
[ > [ reduce [ reverse [ digits [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ]
[ filter a [ partial1 [ strlen b ] > ] ]
[ filter [ digits [ deref [ sort a ] [ / [ len a ] 2 ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ digits [ reduce [ reverse [ digits [ reduce a 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ map [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 2 * ] ]
[ filter [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ reverse [ slice d b c ] ] ] ] [ deref [ reverse [ slice d b c ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ + [ * [ - a [ strlen c ] ] [ - a [ strlen c ] ] ] [ * [ - b [ reduce [ slice [ reverse [ sort d ] ] 0 e ] 0 + ] ] [ - b [ reduce [ slice [ reverse [ sort d ] ] 0 e ] 0 + ] ] ] ]
[ filter a [ partial1 [ deref b [ / [ len b ] 2 ] ] < ] ]
[ map [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ] [ partial0 2 * ] ]
[ reduce [ map [ range 0 [ min [ len [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] [ len b ] ] ] [ lambda1 [ if [ < [ deref [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ digits a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ slice [ reverse [ sort [ range 0 [ + [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] 1 ] ] ] ] 0 b ] 0 + ]
[ filter [ range 0 [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] [ partial1 c < ] ]
[ map [ filter [ range 0 [ len [ map [ reverse a ] [ partial1 b + ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ map [ reverse a ] [ partial1 b + ] ] int-deref ] ]
[ len [ map [ slice a b c ] [ partial1 e - ] ] ]
[ reduce [ map [ range 0 [ len [ slice a [ head b ] c ] ] ] [ lambda1 [ == [ deref [ slice a [ head b ] c ] arg1 ] [ deref [ slice a [ head b ] c ] [ - [ - [ len [ slice a [ head b ] c ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ map a [ partial1 b - ] ]
[ reduce [ reverse [ digits [ * a [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b < ] ]
[ reverse [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] ]
[ filter [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] [ partial1 d > ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ filter [ reverse a ] [ lambda1 [ reduce [ map [ slice b [ / [ len b ] 2 ] [ len b ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ deref [ map [ map a [ partial0 2 * ] ] [ partial1 b - ] ] [ / [ len [ map [ map a [ partial0 2 * ] ] [ partial1 b - ] ] ] 2 ] ]
[ filter [ slice [ slice a 0 [ / [ len a ] 2 ] ] 0 [ / [ len [ slice a 0 [ / [ len a ] 2 ] ] ] 2 ] ] [ combine ! is_prime ] ]
[ slice [ reverse [ reverse a ] ] 0 [ / [ len [ reverse [ reverse a ] ] ] 2 ] ]
[ filter [ map a [ partial1 b - ] ] [ partial1 [ reduce [ filter c [ partial0 [ reduce c 1000000000 min ] < ] ] 1000000000 min ] < ] ]
[ reduce [ range 0 [ + [ - [ reduce [ reverse a ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ deref [ map [ filter [ range 0 [ len [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] int-deref ] ] [ / [ len [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] ] 2 ] [ len [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] ] ] 2 ] ]
[ reduce [ map [ filter [ range 0 [ len [ map a [ partial1 b - ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ map a [ partial1 b - ] ] int-deref ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ filter [ digits [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] [ lambda1 [ reduce [ map f [ partial0 arg1 == ] ] false || ] ] ]
[ slice [ slice [ map a square ] b c ] [ / [ len [ slice [ map a square ] b c ] ] 2 ] [ len [ slice [ map a square ] b c ] ] ]
[ reduce [ reverse [ digits [ reduce [ slice [ reverse [ sort [ filter a [ partial1 b > ] ] ] ] 0 c ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ is_sorted [ map [ map a square ] [ partial1 b + ] ] ]
[ reduce [ slice [ sort a ] 0 [ reduce [ filter c [ partial1 b < ] ] 0 max ] ] 0 + ]
[ reverse [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ reduce [ slice [ reverse [ sort [ map a [ partial1 [ * c b ] + ] ] ] ] 0 c ] 0 + ]
[ range 0 [ + a 1 ] ]
[ filter a [ partial1 [ min c [ strlen b ] ] > ] ]
[ filter [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial0 2 * ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ map a [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len [ filter b is_prime ] ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref [ filter b is_prime ] arg1 ] ] 1 0 ] ] ] 0 + ] * ] ]
[ map [ map [ digits a ] square ] square ]
[ filter a [ partial1 [ strlen b ] > ] ]
[ reduce [ range 0 [ + [ min a [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ + [ * [ - a c ] [ - a c ] ] [ * [ - [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] d ] [ - [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] d ] ] ]
[ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] d ] [ - [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] d ] ] ] ] ]
[ digits [ deref a [ / [ len a ] 2 ] ] ]
[ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] d ] [ - [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] d ] ] ] ] ]
[ map [ map [ filter a [ partial1 b < ] ] [ partial0 2 * ] ] [ partial0 2 * ] ]
[ is_sorted [ slice [ reverse a ] b c ] ]
[ reduce [ slice [ sort [ map [ filter [ range 0 [ len [ slice a b c ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ slice a b c ] int-deref ] ] ] 0 d ] 0 + ]
[ + [ * [ - [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] g ] [ - [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] g ] ] [ * [ - f [ deref h [ / [ len h ] 2 ] ] ] [ - f [ deref h [ / [ len h ] 2 ] ] ] ] ]
[ - [ reduce [ slice [ reverse a ] b c ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ digits [ strlen [ reduce a "z" str_min ] ] ]
[ filter a [ partial1 [ max c [ len b ] ] < ] ]
[ reduce [ slice [ range 1 a ] [ / [ len [ range 1 a ] ] 2 ] [ len [ range 1 a ] ] ] 1000000000 min ]
[ filter [ range 0 [ + [ min a b ] 1 ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ reverse [ digits [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ filter a [ partial1 b > ] ] 0 + ] ]
[ range 1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] ]
[ + [ * [ - [ reduce [ slice [ sort a ] 0 b ] 0 + ] d ] [ - [ reduce [ slice [ sort a ] 0 b ] 0 + ] d ] ] [ * [ - c [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 e + ] ] ] ] ] [ - c [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 e + ] ] ] ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ]
[ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ]
[ + [ * [ - [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] g ] [ - [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] g ] ] [ * [ - f [ reduce [ filter h [ partial0 [ reduce h 0 max ] > ] ] 0 max ] ] [ - f [ reduce [ filter h [ partial0 [ reduce h 0 max ] > ] ] 0 max ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reverse [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] ]
[ map [ reverse [ digits a ] ] [ partial0 2 * ] ]
[ digits [ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ slice [ map a [ partial1 b - ] ] 0 [ / [ len [ map a [ partial1 b - ] ] ] 2 ] ]
[ digits [ reduce [ map [ range 0 [ min [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ len b ] ] ] [ lambda1 [ if [ < [ deref [ slice a [ / [ len a ] 2 ] [ len a ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ > [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] * ] ]
[ slice [ slice a 0 [ / [ len a ] 2 ] ] [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] c ]
[ map [ reverse [ digits a ] ] [ partial0 2 * ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ]
[ map [ slice [ slice a b c ] 0 [ / [ len [ slice a b c ] ] 2 ] ] square ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ reduce [ reverse [ digits [ reduce [ reverse [ digits [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ reverse [ digits [ head [ filter a [ partial1 b < ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ reverse [ map [ filter [ range 0 [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ slice a [ / [ len a ] 2 ] [ len a ] ] int-deref ] ] ]
[ digits [ strlen a ] ]
[ slice a b [ * c d ] ]
[ map [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial0 2 * ] ] square ]
[ - [ reduce [ range 1 [ + [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] 1 ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reverse [ map a [ partial1 b + ] ] ]
[ filter [ reverse a ] [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ]
[ reverse [ slice a b [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] c ] ] ]
[ reduce [ range 0 [ + [ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ range 0 [ + a 1 ] ]
[ min [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ] [ strlen b ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] + ] ] ] ]
[ + [ * [ - [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] c ] [ - [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] c ] ] [ * [ - b [ floor [ sqrt [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] ] [ - b [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] h ] ] ] ]
[ reduce [ map [ range 0 [ len [ map a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] + ] ] ] ] [ lambda1 [ == [ deref [ map a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] + ] ] arg1 ] [ deref [ map a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] + ] ] [ - [ - [ len [ map a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] + ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ map a [ partial1 [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 b + ] ] ] ] - ] ]
[ reduce [ filter [ map [ filter [ range 0 [ len [ slice a 0 [ / [ len a ] 2 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ slice a 0 [ / [ len a ] 2 ] ] int-deref ] ] [ partial0 [ reduce [ map [ filter [ range 0 [ len [ slice a 0 [ / [ len a ] 2 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ slice a 0 [ / [ len a ] 2 ] ] int-deref ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ digits [ min a [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ]
[ reduce [ map [ range 0 [ min [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ len [ slice d b c ] ] ] ] [ lambda1 [ if [ > [ deref [ slice a [ / [ len a ] 2 ] [ len a ] ] arg1 ] [ deref [ slice d b c ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ min [ reduce [ range 0 [ + [ head a ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] b ]
[ reduce [ slice [ sort a ] 0 [ * c b ] ] 0 + ]
[ map [ map [ map a [ partial1 b - ] ] [ partial1 c * ] ] square ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ digits [ min [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] c ] ]
[ map a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] - ] ]
[ is_sorted [ slice [ reverse a ] b c ] ]
[ head [ map a [ partial1 b - ] ] ]
[ reduce [ reverse [ digits [ reduce [ reverse [ digits [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ digits [ head [ reverse a ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ range 1 [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] ]
[ reduce [ reverse [ digits [ + a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ range 0 [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] ] ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce [ slice [ reverse [ sort c ] ] 0 [ deref b [ / [ len b ] 2 ] ] ] 0 + ] ] 0 + ]
[ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ map [ range 0 [ min [ len [ filter [ range 1 a ] [ partial1 b < ] ] ] [ len c ] ] ] [ lambda1 [ if [ > [ deref [ filter [ range 1 a ] [ partial1 b < ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ digits [ reduce [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ range 1 [ + [ reduce [ map a square ] 0 max ] 1 ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ * [ reduce [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] c ]
[ filter [ filter a [ lambda1 [ reduce [ map [ digits b ] [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ len [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] ] ] [ lambda1 [ == [ deref [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] arg1 ] [ deref [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] [ - [ - [ len [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ reduce [ map [ range 0 [ len [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] [ lambda1 [ == [ deref [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] arg1 ] [ deref [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ - [ - [ len [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ digits [ strlen a ] ]
[ reduce [ range 0 [ + [ reduce [ filter [ slice a b c ] [ partial0 [ reduce [ slice a b c ] 0 max ] > ] ] 0 max ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ head [ map [ range 0 a ] [ partial1 b + ] ] ]
[ filter [ filter [ reverse a ] [ partial1 b > ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ slice a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] [ - [ reduce d 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ slice [ reverse [ map a [ partial1 b * ] ] ] c d ]
[ reduce [ filter a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] < ] ] 0 max ]
[ map [ filter [ range 0 [ len [ map [ slice a 0 [ / [ len a ] 2 ] ] square ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ map [ slice a 0 [ / [ len a ] 2 ] ] square ] int-deref ] ]
[ filter a [ lambda1 [ reduce [ map [ slice d b c ] [ partial0 arg1 == ] ] false || ] ] ]
[ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - [ reduce b 0 + ] [ reduce d 0 max ] ] [ - [ reduce b 0 + ] [ reduce d 0 max ] ] ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map [ digits [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ] [ partial1 b * ] ]
[ digits [ * a [ strlen b ] ] ]
[ reverse [ map [ map a square ] [ partial0 2 * ] ] ]
[ + [ * [ - [ reduce [ slice [ sort a ] 0 b ] 0 + ] d ] [ - [ reduce [ slice [ sort a ] 0 b ] 0 + ] d ] ] [ * [ - c [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 e + ] ] ] ] ] [ - c [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 e + ] ] ] ] ] ] ]
[ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1000000000 min ]
[ reduce [ range 0 [ + [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ map [ slice [ map a square ] [ / [ len [ map a square ] ] 2 ] [ len [ map a square ] ] ] square ]
[ filter a [ partial1 [ head [ slice e b c ] ] > ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ reduce [ slice [ sort [ range 0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] 0 c ] 0 + ]
[ digits [ head [ reverse a ] ] ]
[ map [ map [ filter [ range 0 [ len [ map a [ partial0 2 * ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ map a [ partial0 2 * ] ] int-deref ] ] [ partial1 b * ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ slice a b [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ filter [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ]
[ filter [ filter a [ partial1 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] < ] ] [ combine ! is_prime ] ]
[ - [ reduce [ slice [ slice a b c ] 0 [ / [ len [ slice a b c ] ] 2 ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ map [ reverse [ range 0 [ + a 1 ] ] ] square ]
[ > [ reduce [ reverse [ digits [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] c ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ]
[ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ reverse c ] ] ] [ deref [ reverse c ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reverse [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] ]
[ map [ map [ reverse a ] square ] [ partial0 2 * ] ]
[ range 1 [ + [ reduce [ slice [ sort [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] 0 c ] 0 + ] 1 ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ range 0 [ + a 1 ] ]
[ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len [ digits a ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ digits a ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ deref [ map a [ partial0 2 * ] ] [ / [ len [ map a [ partial0 2 * ] ] ] 2 ] ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ slice b 0 [ / [ len b ] 2 ] ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ map [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c * ] ]
[ reduce [ range 0 [ + [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ reduce [ slice [ sort d ] 0 e ] 0 + ] ] [ - b [ reduce [ slice [ sort d ] 0 e ] 0 + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ map [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial1 b + ] ] [ partial0 2 * ] ]
[ + a [ reduce [ slice [ reverse [ sort c ] ] 0 [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map a [ partial1 [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] + ] ]
[ filter [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] [ partial1 d < ] ]
[ reduce [ reverse [ digits [ reduce [ filter [ filter a [ partial1 b > ] ] [ partial0 [ reduce [ filter a [ partial1 b > ] ] 0 max ] > ] ] 0 max ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ digits [ head a ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ filter [ map a [ partial1 b - ] ] [ partial0 [ reduce [ map a [ partial1 b - ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ len a ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ digits [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ filter a [ lambda1 [ reduce [ map [ slice d b [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ map [ range 1 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] [ partial1 c * ] ]
[ filter [ slice a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ] [ partial1 e < ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] ]
[ reverse [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] ]
[ < [ max a [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] c ]
[ digits [ * a [ strlen b ] ] ]
[ > [ reduce [ map [ range 0 [ min [ len [ reverse a ] ] [ len b ] ] ] [ lambda1 [ if [ < [ deref [ reverse a ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] c ]
[ * a [ reduce [ range 0 [ + [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ reduce [ slice [ sort [ reverse a ] ] 0 [ reduce [ slice [ sort c ] 0 b ] 0 + ] ] 0 + ]
[ filter [ filter [ range 0 [ + a 1 ] ] [ partial1 b > ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ filter [ range 0 a ] [ lambda1 [ reduce [ map [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ range 0 [ min [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ len [ reverse b ] ] ] ] [ lambda1 [ if [ < [ deref [ slice a [ / [ len a ] 2 ] [ len a ] ] arg1 ] [ deref [ reverse b ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ + a [ reduce [ reverse [ digits [ - [ reduce c 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ filter a [ lambda1 [ reduce [ map [ range 0 [ head b ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] * ] ] ] ] ]
[ reduce [ range 0 [ + [ deref [ digits a ] [ / [ len [ digits a ] ] 2 ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ reverse [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] ]
[ map [ slice a b c ] [ partial1 [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 e * ] ] ] ] ] - ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len a ] [ len [ slice e b c ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ slice e b c ] arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ * a [ reduce [ reverse [ digits [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ slice [ sort a ] 0 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] ] 0 + ]
[ head [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ * a [ + c [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] ]
[ is_sorted [ slice [ reverse a ] b c ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ min [ reduce a 1000000000 min ] [ reduce c 1000000000 min ] ]
[ digits [ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce b 0 max ] ] 0 + ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ head [ slice [ digits a ] 0 [ / [ len [ digits a ] ] 2 ] ] ]
[ filter [ map [ slice a b c ] [ partial1 d + ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ < [ + [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] b ] 1 ]
[ range 0 [ deref [ sort a ] [ / [ len a ] 2 ] ] ]
[ digits [ strlen a ] ]
[ range 1 [ + [ * a [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] ] 1 ] ]
[ reduce [ slice [ sort [ slice a b c ] ] 0 [ reduce [ range 0 [ + e 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] 0 + ]
[ filter a [ lambda1 [ reduce [ map [ map [ filter [ range 0 [ len [ filter b is_prime ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ filter b is_prime ] int-deref ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ + [ * [ - a [ strlen d ] ] [ - a [ strlen d ] ] ] [ * [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] ] ]
[ max [ - [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ]
[ reduce [ slice a b c ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter e is_prime ] ] ] [ deref [ filter e is_prime ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ len [ range 1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] ] ]
[ range 0 [ + [ reduce [ map [ range 0 [ min [ len [ slice a 0 [ / [ len a ] 2 ] ] ] [ len b ] ] ] [ lambda1 [ if [ < [ deref [ slice a 0 [ / [ len a ] 2 ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ reduce [ reverse [ digits [ reduce [ filter [ filter a [ partial1 b < ] ] [ partial0 [ reduce [ filter a [ partial1 b < ] ] 1000000000 min ] < ] ] 1000000000 min ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ len [ map a [ partial0 2 * ] ] ]
[ slice [ filter [ filter a [ combine ! is_prime ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] c d ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ range 0 [ + [ head a ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter [ filter a [ partial1 b > ] ] [ partial1 [ deref [ sort c ] [ / [ len c ] 2 ] ] > ] ]
[ reverse [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ reverse [ map b square ] ] ] ] [ deref [ reverse [ map b square ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ filter [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] [ partial1 d < ] ]
[ deref [ sort [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ] [ / [ len [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ] 2 ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ map [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial0 2 * ] ] [ partial0 2 * ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ / [ reduce a 0 + ] [ len a ] ] * ] ] ] ] ]
[ map [ range 0 [ + [ head a ] 1 ] ] [ partial1 b * ] ]
[ - [ reduce [ range 0 [ + [ max a b ] 1 ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ floor [ sqrt [ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce [ range 0 [ + [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] e ] [ - [ reduce [ range 0 [ + [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] e ] ] ] ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ reverse [ slice e b c ] ] ] ] [ deref [ reverse [ slice e b c ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ range 1 [ + [ reduce [ slice [ sort a ] 0 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 + ] 1 ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ + a [ reduce [ reverse [ digits [ deref [ sort b ] [ / [ len b ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ deref [ digits [ reduce a 1000000000 min ] ] [ / [ len [ digits [ reduce a 1000000000 min ] ] ] 2 ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ digits b ] square ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map [ digits b ] square ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] is_prime ]
[ * a [ strlen b ] ]
[ slice [ reverse [ reverse a ] ] 0 [ / [ len [ reverse [ reverse a ] ] ] 2 ] ]
[ filter a [ partial1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] > ] ]
[ < a [ len [ slice d b c ] ] ]
[ reduce [ reverse [ digits [ head [ map a square ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ slice [ sort [ slice a 0 [ / [ len a ] 2 ] ] ] 0 [ strlen b ] ] 0 + ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ filter [ map a [ partial1 [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] b ] - ] ] [ combine ! is_prime ] ]
[ floor [ sqrt [ + [ * [ - a [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ] [ - a [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ] ] [ * [ - b [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 e * ] ] ] ] ] ] [ - b [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 e * ] ] ] ] ] ] ] ] ] ]
[ - [ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ slice [ reverse [ reverse a ] ] 0 [ / [ len [ reverse [ reverse a ] ] ] 2 ] ]
[ head [ slice [ range 0 a ] [ / [ len [ range 0 a ] ] 2 ] [ len [ range 0 a ] ] ] ]
[ slice [ filter a [ partial1 b < ] ] 0 [ / [ len [ filter a [ partial1 b < ] ] ] 2 ] ]
[ map [ filter a [ partial1 b > ] ] [ partial1 [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] - ] ]
[ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ reduce [ range 0 [ + [ reduce [ filter d [ partial0 [ reduce d 0 max ] > ] ] 0 max ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ] [ - b [ reduce [ filter d [ partial0 [ reduce d 0 max ] > ] ] 0 max ] ] ] ] ] ]
[ reduce [ filter [ range 0 [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ] [ partial0 [ reduce [ range 0 [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ] 0 max ] > ] ] 0 max ]
[ digits [ strlen a ] ]
[ - [ reduce [ range 0 [ + [ max a b ] 1 ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ map a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] - ] ]
[ min [ + [ head a ] b ] c ]
[ reduce [ reverse [ digits [ / [ reduce [ filter a [ partial1 b > ] ] 0 + ] [ len [ filter a [ partial1 b > ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ > [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] 1 ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ > [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] 1 ]
[ filter [ filter [ filter a [ partial1 b > ] ] [ partial1 c > ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ head [ map a [ partial1 b - ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ map a [ partial1 b - ] ]
[ reverse [ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b + ] ] ]
[ reduce [ filter [ map [ filter a [ partial1 b < ] ] [ partial0 2 * ] ] [ partial0 [ reduce [ map [ filter a [ partial1 b < ] ] [ partial0 2 * ] ] 0 max ] > ] ] 0 max ]
[ digits [ strlen a ] ]
[ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len [ range 0 b ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ range 0 b ] arg1 ] ] 1 0 ] ] ] 0 + ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reverse [ map a [ partial1 b + ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ]
[ reduce [ reverse [ digits [ floor [ sqrt [ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] ] ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ range 1 [ + [ reduce [ range 0 [ + [ head a ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] 1 ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ + [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] [ head b ] ]
[ filter [ map [ map a [ partial1 b * ] ] square ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter a [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] > ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map [ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] square ] [ partial1 b + ] ]
[ reduce [ reverse [ digits [ reduce [ filter [ filter a [ partial1 b > ] ] [ partial0 [ reduce [ filter a [ partial1 b > ] ] 0 max ] > ] ] 0 max ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ head [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ < [ - [ reduce [ map a [ partial1 b - ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ]
[ map [ slice a b [ + c d ] ] square ]
[ reduce [ reverse [ digits [ reduce [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ filter [ filter a [ partial1 b < ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial1 c < ] ]
[ filter [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] 1 ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ map [ filter [ range 0 [ len [ map [ filter [ range 0 [ len [ range 0 [ + a 1 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ range 0 [ + a 1 ] ] int-deref ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ map [ filter [ range 0 [ len [ range 0 [ + a 1 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ range 0 [ + a 1 ] ] int-deref ] ] int-deref ] ]
[ map [ filter [ range 0 [ len [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] b c ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] b c ] int-deref ] ]
[ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ reduce [ map [ range 1 b ] [ partial0 arg1 == ] ] false || ] ] ]
[ reverse [ slice [ map a [ partial1 b * ] ] c d ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ range 0 [ + [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ filter [ map [ filter [ range 0 [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ slice a [ / [ len a ] 2 ] [ len a ] ] int-deref ] ] [ partial1 b < ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ digits [ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ map [ range 1 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] [ partial1 c * ] ]
[ map [ slice [ slice a b c ] 0 [ / [ len [ slice a b c ] ] 2 ] ] square ]
[ map [ map [ filter a [ partial1 b > ] ] [ partial1 c - ] ] [ partial0 2 * ] ]
[ reduce [ map [ range 0 [ len [ map [ slice a b c ] [ partial1 d * ] ] ] ] [ lambda1 [ == [ deref [ map [ slice a b c ] [ partial1 d * ] ] arg1 ] [ deref [ map [ slice a b c ] [ partial1 d * ] ] [ - [ - [ len [ map [ slice a b c ] [ partial1 d * ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ reduce [ reverse [ digits [ deref [ sort a ] [ / [ len a ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map [ digits [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] ] [ partial0 2 * ] ]
[ map [ filter a [ lambda1 [ reduce [ map [ filter c [ partial1 b > ] ] [ partial0 arg1 == ] ] false || ] ] ] [ partial1 d + ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] + ] ] ] ]
[ reduce [ slice [ sort a ] 0 [ reduce [ slice [ sort c ] 0 b ] 0 + ] ] 0 + ]
[ filter [ filter [ slice a b c ] [ partial1 d < ] ] [ combine ! is_prime ] ]
[ reverse [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ deref [ sort [ map [ reverse a ] [ partial0 2 * ] ] ] [ / [ len [ map [ reverse a ] [ partial0 2 * ] ] ] 2 ] ]
[ digits [ reduce [ slice [ sort a ] 0 b ] 0 + ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] + ] ] ] ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ range 0 [ + [ reduce [ slice a 0 [ / [ len a ] 2 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ reduce [ range 0 [ + [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ reduce d 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len e ] ] [ deref e arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] [ - b [ reduce d 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len e ] ] [ deref e arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ map a [ partial1 b - ] ]
[ range 0 [ + [ reduce [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial0 [ reduce [ slice a 0 [ / [ len a ] 2 ] ] 0 max ] > ] ] 0 max ] 1 ] ]
[ deref [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ / [ len [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] 2 ] ]
[ slice a b [ reduce [ range 0 [ + [ reduce [ slice [ sort c ] 0 d ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ range 0 [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ * d e ] ] [ - b [ * d e ] ] ] ] ] ] ] ]
[ map [ range 0 [ + [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] square ]
[ filter [ filter a [ lambda1 [ reduce [ map [ range 1 [ + b 1 ] ] [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len a ] [ len [ slice e b c ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ slice e b c ] arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ head [ map a [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] + ] ] ]
[ reduce [ range 0 [ + [ reduce [ slice [ sort [ range 1 [ + a 1 ] ] ] 0 b ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ head [ slice [ slice a b c ] [ / [ len [ slice a b c ] ] 2 ] [ len [ slice a b c ] ] ] ]
[ map [ map [ filter [ range 0 [ len [ map a [ partial1 b + ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ map a [ partial1 b + ] ] int-deref ] ] [ partial1 c + ] ]
[ reduce [ filter a [ lambda1 [ reduce [ map [ range 0 b ] [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ reverse [ slice b [ / [ len b ] 2 ] [ len b ] ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ reverse [ slice b [ / [ len b ] 2 ] [ len b ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ reverse [ digits [ deref [ sort a ] [ / [ len a ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ reverse [ digits [ reduce [ range 0 [ + [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter a [ partial1 [ strlen b ] > ] ]
[ filter [ slice [ digits a ] [ / [ len [ digits a ] ] 2 ] [ len [ digits a ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ filter [ digits [ deref [ sort a ] [ / [ len a ] 2 ] ] ] [ combine ! is_prime ] ]
[ filter [ slice [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ / [ len [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ] 2 ] [ len [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ reverse [ digits [ reduce [ filter [ map a square ] [ partial0 [ reduce [ map a square ] 0 max ] > ] ] 0 max ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ reverse [ digits [ deref a [ / [ len a ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ reverse [ map a square ] ] 0 max ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] + ] ] ] ]
[ reduce [ map [ range 0 [ len [ map a [ partial1 [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] - ] ] ] ] [ lambda1 [ == [ deref [ map a [ partial1 [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] - ] ] arg1 ] [ deref [ map a [ partial1 [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] - ] ] [ - [ - [ len [ map a [ partial1 [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] - ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ reduce [ map [ range 0 [ len [ map a [ partial1 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] - ] ] ] ] ] [ lambda1 [ == [ deref [ map a [ partial1 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] - ] ] arg1 ] [ deref [ map a [ partial1 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] - ] ] [ - [ - [ len [ map a [ partial1 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] - ] ]
[ range 0 [ + [ reduce [ slice [ sort [ filter a [ partial1 b < ] ] ] 0 c ] 0 + ] 1 ] ]
[ range 1 [ strlen [ reduce a "" str_max ] ] ]
[ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ slice b [ / [ len b ] 2 ] [ len b ] ] ] ] [ deref [ slice b [ / [ len b ] 2 ] [ len b ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ map [ digits [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] ] [ partial0 2 * ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ reduce [ range 0 [ + [ - [ reduce [ reverse a ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ reduce [ range 0 [ deref a [ / [ len a ] 2 ] ] ] 0 + ]
[ map [ range 0 [ max a b ] ] square ]
[ filter [ slice [ range 0 a ] [ / [ len [ range 0 a ] ] 2 ] [ len [ range 0 a ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ slice a [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 b + ] ] ] ] [ reduce [ slice [ sort c ] 0 d ] 0 + ] ]
[ digits [ head [ slice a b c ] ] ]
[ len [ map [ filter [ range 0 [ len [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] int-deref ] ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ map [ filter a [ partial1 b < ] ] [ partial1 [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] c ] + ] ]
[ digits [ strlen a ] ]
[ reverse [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] ]
[ - [ reduce [ slice [ reverse a ] b c ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ filter [ filter [ reverse a ] is_prime ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ slice [ map a square ] [ / [ len [ map a square ] ] 2 ] [ len [ map a square ] ] ]
[ range 0 [ + [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ min d e ] ] [ - b [ min d e ] ] ] ] ] ] ] 1 ] ]
[ head [ slice a b [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ filter [ map a [ partial0 2 * ] ] [ partial0 [ reduce [ map a [ partial0 2 * ] ] 0 max ] > ] ] 0 max ] ]
[ filter [ map [ range 0 [ + a 1 ] ] [ partial1 b - ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ slice [ reverse [ sort [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] 0 [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ] 0 + ]
[ floor [ sqrt [ + [ * [ - a [ reduce [ map [ range 0 [ min [ len c ] [ len d ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ] ] [ - a [ reduce [ map [ range 0 [ min [ len c ] [ len d ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ] ] ] [ * [ - b e ] [ - b e ] ] ] ] ]
[ digits [ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ slice [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ]
[ map [ filter a [ partial1 b > ] ] [ partial1 [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] - ] ]
[ reverse [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ > [ reduce [ filter [ filter a is_prime ] [ partial0 [ reduce [ filter a is_prime ] 0 max ] > ] ] 0 max ] b ]
[ reduce [ map [ range 0 [ min [ len [ slice a b c ] ] [ len d ] ] ] [ lambda1 [ if [ < [ deref [ slice a b c ] arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ map [ range 0 [ min [ len a ] [ len [ map c [ partial1 b * ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map c [ partial1 b * ] ] arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ map [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ partial1 b - ] ]
[ head [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ deref [ sort [ map [ digits a ] [ partial1 b + ] ] ] [ / [ len [ map [ digits a ] [ partial1 b + ] ] ] 2 ] ]
[ * a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ digits b ] ] ] [ deref [ digits b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ reverse [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] + ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ filter a [ partial1 b > ] ] [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] > ] ]
[ digits [ reduce [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ reduce [ map [ range 0 [ min [ len [ reverse [ map a [ partial0 2 * ] ] ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ reverse [ map a [ partial0 2 * ] ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ - [ reduce [ filter [ map a [ partial1 b - ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ digits [ head [ reverse a ] ] ]
[ map a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] + ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ slice [ reverse [ sort a ] ] 0 [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] 0 + ] ]
[ reduce [ reverse [ digits [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ filter [ map [ reverse a ] square ] [ partial0 [ reduce [ map [ reverse a ] square ] 0 max ] > ] ] 0 max ]
[ range 0 [ + a 1 ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ digits b ] ] ] [ deref [ digits b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ range 0 [ min [ len [ filter [ range 0 a ] [ partial1 b > ] ] ] [ len c ] ] ] [ lambda1 [ if [ > [ deref [ filter [ range 0 a ] [ partial1 b > ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ len [ map a [ partial1 [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] b ] * ] ] ]
[ + [ * [ - a [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 c + ] ] ] ] ] [ - a [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 c + ] ] ] ] ] ] [ * [ - b [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] d ] ] [ - b [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] d ] ] ] ]
[ range 0 [ + [ + a [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 1 ] ]
[ reduce [ reverse [ digits [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ digits [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ deref [ sort a ] [ / [ len a ] 2 ] ] ] ]
[ map [ filter [ filter a [ partial1 b < ] ] is_prime ] [ partial0 2 * ] ]
[ map a [ partial1 [ head b ] - ] ]
[ slice [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] c ] d ]
[ map a [ partial1 b - ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ map [ digits [ max a b ] ] square ]
[ floor [ sqrt [ + [ * [ - a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len d ] ] [ deref d arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] [ - a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len d ] ] [ deref d arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ] [ * [ - b [ floor [ sqrt [ + [ * [ - f h ] [ - f h ] ] [ * [ - g i ] [ - g i ] ] ] ] ] ] [ - b [ floor [ sqrt [ + [ * [ - f h ] [ - f h ] ] [ * [ - g i ] [ - g i ] ] ] ] ] ] ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ map [ map [ filter [ range 0 [ len [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] int-deref ] ] [ partial1 b + ] ]
[ filter [ filter a [ partial1 [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] > ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ filter a [ partial1 [ head [ reverse b ] ] < ] ]
[ digits [ reduce [ filter a is_prime ] 0 max ] ]
[ slice [ reverse [ range 0 [ + a 1 ] ] ] [ / [ len [ reverse [ range 0 [ + a 1 ] ] ] ] 2 ] [ len [ reverse [ range 0 [ + a 1 ] ] ] ] ]
[ map [ reverse a ] [ partial1 [ strlen b ] + ] ]
[ filter [ map [ filter [ range 0 [ len [ map a [ partial1 b * ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ map a [ partial1 b * ] ] int-deref ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ + [ * [ - a c ] [ - a c ] ] [ * [ - [ deref [ sort b ] [ / [ len b ] 2 ] ] d ] [ - [ deref [ sort b ] [ / [ len b ] 2 ] ] d ] ] ] ]
[ reduce [ slice [ sort a ] 0 [ reduce [ reverse [ digits [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 + ]
[ map [ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] square ]
[ map [ range 1 [ + [ head a ] 1 ] ] square ]
[ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map [ reverse a ] [ partial1 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] * ] ]
[ filter a [ partial1 [ head [ reverse b ] ] < ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ deref [ filter a [ partial1 b > ] ] [ / [ len [ filter a [ partial1 b > ] ] ] 2 ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ head [ slice a 0 [ / [ len a ] 2 ] ] ] ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ range 1 [ + [ reduce [ slice a [ / [ len a ] 2 ] [ len a ] ] 0 max ] 1 ] ]
[ map [ filter a [ partial1 [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ > [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] > ] ] [ partial1 e * ] ]
[ map [ digits [ deref [ sort a ] [ / [ len a ] 2 ] ] ] [ partial0 2 * ] ]
[ filter [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ map [ slice a b c ] [ partial1 [ reduce [ map [ range 0 [ min [ len d ] [ len e ] ] ] [ lambda1 [ if [ < [ deref d arg1 ] [ deref e arg1 ] ] 1 0 ] ] ] 0 + ] + ] ]
[ reduce [ range 0 [ + [ deref [ digits a ] [ / [ len [ digits a ] ] 2 ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ filter [ slice [ reverse a ] 0 [ / [ len [ reverse a ] ] 2 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ head [ slice a b [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] c ] ] ]
[ digits [ head a ] ]
[ <= [ reduce [ map [ range 0 [ min [ len [ range 0 a ] ] [ len b ] ] ] [ lambda1 [ if [ < [ deref [ range 0 a ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] 1 ]
[ head [ map [ range 0 [ + a 1 ] ] [ partial1 b - ] ] ]
[ floor [ sqrt [ + [ * [ - [ strlen a ] c ] [ - [ strlen a ] c ] ] [ * [ - b [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] d ] ] [ - b [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] d ] ] ] ] ] ]
[ map [ map a [ partial1 b - ] ] [ partial1 c * ] ]
[ range 0 [ + [ reduce [ map a [ partial1 b + ] ] 0 max ] 1 ] ]
[ - [ reduce [ slice a b [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ < [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] [ reduce [ range 0 [ + f 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ reverse [ digits [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ map [ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b + ] ] [ partial1 c + ] ]
[ reduce [ range 0 [ + [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ slice a [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] [ strlen d ] ]
[ digits [ strlen a ] ]
[ digits [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ]
[ map [ filter a [ partial1 b > ] ] [ partial1 [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] + ] ]
[ digits [ reduce [ map [ range 0 [ min [ len a ] [ len [ slice b 0 [ / [ len b ] 2 ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ slice b 0 [ / [ len b ] 2 ] ] arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ digits [ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ map [ filter [ range 0 [ len [ map [ slice a b c ] square ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ map [ slice a b c ] square ] int-deref ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ reverse [ slice a b c ] ] [ lambda1 [ reduce [ map e [ partial0 arg1 == ] ] false || ] ] ]
[ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] - ] ]
[ range 1 [ + [ head [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 1 ] ]
[ reduce [ reverse [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ slice a b [ + [ * [ - f c ] [ - f c ] ] [ * [ - g d ] [ - g d ] ] ] ]
[ reverse [ slice a b [ min c d ] ] ]
[ reduce [ map [ range 0 [ len [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] ] ] [ lambda1 [ == [ deref [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] arg1 ] [ deref [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] [ - [ - [ len [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] ] arg1 ] 1 ] ] ] ] ]
[ map [ filter [ filter a [ partial1 b < ] ] [ partial1 c < ] ] [ partial0 2 * ] ]
[ reverse [ range 1 [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ]
[ range 0 [ + a 1 ] ]
[ filter [ slice [ range 1 a ] [ / [ len [ range 1 a ] ] 2 ] [ len [ range 1 a ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ + [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ] [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] b ] d ] [ - [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] b ] d ] ] ] ] ] ]
[ range 0 [ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ]
[ slice a b [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ max [ - [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ]
[ reduce [ map [ filter [ range 0 [ len [ filter a [ partial1 b > ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ filter a [ partial1 b > ] ] int-deref ] ] 0 + ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ filter a [ partial1 b > ] ] 0 max ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ map [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] square ]
[ < [ min a [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ] 1 ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ map [ filter [ digits a ] [ combine ! is_prime ] ] square ]
[ slice [ map [ map a square ] [ partial1 b + ] ] c d ]
[ floor [ sqrt [ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] ] ] ] ] ]
[ reduce [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c > ] ] 0 max ]
[ digits [ strlen a ] ]
[ min [ deref [ sort a ] [ / [ len a ] 2 ] ] [ reduce [ slice [ sort c ] 0 b ] 0 + ] ]
[ / [ reduce [ reverse [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] 0 + ] [ len [ reverse [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] ] ]
[ reduce [ reverse [ digits [ head [ map a square ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ range 0 [ len [ filter a [ partial1 [ deref b [ / [ len b ] 2 ] ] < ] ] ] ] [ lambda1 [ == [ deref [ filter a [ partial1 [ deref b [ / [ len b ] 2 ] ] < ] ] arg1 ] [ deref [ filter a [ partial1 [ deref b [ / [ len b ] 2 ] ] < ] ] [ - [ - [ len [ filter a [ partial1 [ deref b [ / [ len b ] 2 ] ] < ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ digits [ reduce [ range 0 [ + [ reduce a 0 max ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ filter [ filter [ range 1 a ] [ partial1 b < ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ filter a [ partial1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] > ] ]
[ reverse [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ digits [ max a b ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ reduce d 0 max ] ] [ - b [ reduce d 0 max ] ] ] ] ]
[ floor [ sqrt [ + [ * [ - a e ] [ - a e ] ] [ * [ - [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ > [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] f ] [ - [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ > [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] f ] ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ map c [ partial1 b - ] ] square ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ map [ map c [ partial1 b - ] ] square ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ map a [ partial1 [ min c b ] - ] ]
[ filter [ filter [ slice a 0 [ / [ len a ] 2 ] ] is_prime ] [ partial1 b < ] ]
[ reverse [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ <= [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] [ deref b [ / [ len b ] 2 ] ] ]
[ slice [ range 1 [ + a 1 ] ] [ strlen b ] c ]
[ reverse [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ slice [ sort [ filter [ range 0 [ + a 1 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] 0 c ] 0 + ]
[ filter [ reverse a ] [ partial1 [ head b ] > ] ]
[ digits [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] c ] ]
[ reverse [ slice a b [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ] ]
[ head [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ digits [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ digits [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ map a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ slice [ reverse [ sort c ] ] 0 b ] 0 + ] ] + ] ]
[ min [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] b ]
[ reverse [ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ]
[ map [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] * ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ / [ reduce [ range 0 [ + a 1 ] ] 0 + ] [ len [ range 0 [ + a 1 ] ] ] ] ]
[ deref [ digits [ reduce a 1000000000 min ] ] [ / [ len [ digits [ reduce a 1000000000 min ] ] ] 2 ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ + a [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ]
[ head [ slice a 0 [ / [ len a ] 2 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ slice [ reverse [ sort [ filter a [ partial1 b < ] ] ] ] 0 [ reduce [ map [ range 0 [ min [ len c ] [ len d ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ] ] 0 + ]
[ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ reduce [ map [ range 0 [ + b 1 ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ filter a [ lambda1 [ reduce [ map [ filter d [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] > ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ map [ range 0 [ + a 1 ] ] [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] * ] ]
[ digits [ deref [ sort [ slice a 0 [ / [ len a ] 2 ] ] ] [ / [ len [ slice a 0 [ / [ len a ] 2 ] ] ] 2 ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ filter [ slice e b c ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ filter [ slice e b c ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ filter [ range 1 [ + [ len a ] 1 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ max a [ reduce [ filter [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 [ reduce [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1000000000 min ] < ] ] 1000000000 min ] ]
[ reduce [ filter [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial1 b > ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ range 0 [ + [ reduce [ range 0 [ + [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ range 0 [ + [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] 1 ] ]
[ head [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ filter [ slice a b c ] [ partial1 [ reduce e 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len f ] ] [ deref f arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] < ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ range 0 [ min [ len [ filter a [ lambda1 [ reduce [ map [ range 0 [ + b 1 ] ] [ partial0 arg1 == ] ] false || ] ] ] ] [ len c ] ] ] [ lambda1 [ if [ < [ deref [ filter a [ lambda1 [ reduce [ map [ range 0 [ + b 1 ] ] [ partial0 arg1 == ] ] false || ] ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ + [ * [ - a [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ] [ - a [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ] ] [ * [ - b [ head d ] ] [ - b [ head d ] ] ] ]
[ max [ deref [ sort a ] [ / [ len a ] 2 ] ] [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] ]
[ map [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] square ] square ]
[ map [ digits [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ] [ partial1 b * ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ deref [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] [ / [ len [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] ] 2 ] ]
[ * [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] ]
[ map [ slice [ slice a b c ] 0 [ / [ len [ slice a b c ] ] 2 ] ] square ]
[ < [ * a [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ < [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] 0 ]
[ deref [ sort [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] [ / [ len [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] 2 ] ]
[ reverse [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ range 0 [ + [ head a ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ reduce [ filter [ filter a [ partial1 [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] < ] ] [ partial0 [ reduce [ filter a [ partial1 [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] < ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ map [ range 1 [ + [ head a ] 1 ] ] square ]
[ reduce [ map [ range 0 [ len [ map a [ partial1 [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] - ] ] ] ] [ lambda1 [ == [ deref [ map a [ partial1 [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] - ] ] arg1 ] [ deref [ map a [ partial1 [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] - ] ] [ - [ - [ len [ map a [ partial1 [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] - ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ head [ slice a [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 b + ] ] ] ] c ] ]
[ reverse [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c - ] ] ]
[ max [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] c ]
[ reverse [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] 0 [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] ] ]
[ reduce [ range 0 [ + [ reduce [ range 0 [ + [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ map [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] [ partial0 2 * ] ]
[ map [ slice a b c ] [ partial1 [ reduce [ map [ range 0 [ min [ len d ] [ len e ] ] ] [ lambda1 [ if [ < [ deref d arg1 ] [ deref e arg1 ] ] 1 0 ] ] ] 0 + ] * ] ]
[ range 1 [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ]
[ max a [ reduce [ filter d [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ floor [ sqrt [ + [ * [ - a [ min d e ] ] [ - a [ min d e ] ] ] [ * [ - [ reduce [ slice [ sort c ] 0 b ] 0 + ] f ] [ - [ reduce [ slice [ sort c ] 0 b ] 0 + ] f ] ] ] ] ]
[ floor [ sqrt [ + [ * [ - [ strlen [ reduce a "z" str_min ] ] c ] [ - [ strlen [ reduce a "z" str_min ] ] c ] ] [ * [ - b d ] [ - b d ] ] ] ] ]
[ map [ map [ map a [ partial1 b - ] ] square ] [ partial0 2 * ] ]
[ slice a [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ]
[ slice a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ]
[ slice [ range 1 a ] [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] d ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ slice a 0 [ / [ len a ] 2 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ map a [ partial1 b - ] ]
[ filter a [ lambda1 [ reduce [ map [ filter d [ partial1 [ + c b ] < ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ slice d b c ] [ partial0 2 * ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map [ slice d b c ] [ partial0 2 * ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ range 0 [ + [ reduce [ reverse [ digits [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ reduce [ filter [ filter [ map a [ partial1 b - ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ reduce [ filter [ map a [ partial1 b - ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] 0 max ] > ] ] 0 max ]
[ + [ head a ] [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ is_sorted [ slice [ reverse a ] b c ] ]
[ filter a [ lambda1 [ reduce [ map [ digits [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ map [ slice [ slice a b c ] [ / [ len [ slice a b c ] ] 2 ] [ len [ slice a b c ] ] ] square ]
[ reduce [ reverse [ digits [ * a [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 b + ] ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ slice [ reverse a ] b [ reduce [ filter c [ partial0 [ reduce c 0 max ] > ] ] 0 max ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ]
[ reduce [ slice a b [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] 0 max ]
[ reduce [ reverse [ digits [ reduce [ filter [ map a [ partial1 b * ] ] [ partial0 [ reduce [ map a [ partial1 b * ] ] 0 max ] > ] ] 0 max ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ head [ filter a [ partial1 b > ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] ] ] ]
[ - [ reduce [ filter a [ partial1 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] < ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ deref [ sort a ] [ / [ len a ] 2 ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ range 1 [ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] ] 0 + ] ]
[ filter [ map a [ partial0 2 * ] ] [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] > ] ]
[ digits [ reduce [ slice [ sort a ] 0 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 + ] ]
[ filter [ range 0 [ + [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ range 0 [ reduce [ slice [ reverse [ sort [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] ] ] 0 b ] 0 + ] ]
[ reverse [ slice a 0 [ / [ len a ] 2 ] ] ]
[ map [ slice [ filter a [ partial1 b > ] ] 0 [ / [ len [ filter a [ partial1 b > ] ] ] 2 ] ] square ]
[ deref [ sort [ map [ reverse a ] [ partial0 2 * ] ] ] [ / [ len [ map [ reverse a ] [ partial0 2 * ] ] ] 2 ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] + ] ] ] ]
[ map [ reverse a ] [ partial1 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] + ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ floor [ sqrt [ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] ] ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ filter [ filter [ digits a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 [ reduce [ filter [ digits a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ reduce [ slice a [ / [ len a ] 2 ] [ len a ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter c [ partial1 b > ] ] ] ] [ deref [ filter c [ partial1 b > ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] 1000000000 min ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter b [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] ] [ deref [ filter b [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ map a [ partial1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] - ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ slice d b c ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ slice d b c ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ slice [ sort a ] 0 [ reduce [ reverse [ digits [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 + ]
[ digits [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] ]
[ digits [ reduce [ filter [ slice a b c ] [ partial0 [ reduce [ slice a b c ] 0 max ] > ] ] 0 max ] ]
[ slice a [ reduce [ slice [ sort c ] 0 [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] ] 0 + ] d ]
[ floor [ sqrt [ + [ * [ - [ strlen a ] c ] [ - [ strlen a ] c ] ] [ * [ - b [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] d ] ] [ - b [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] d ] ] ] ] ] ]
[ max [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] f ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ reduce [ slice [ map a square ] b c ] 1000000000 min ]
[ map a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] - ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ > [ len [ map a square ] ] b ]
[ filter a [ lambda1 [ reduce [ map [ filter d [ partial1 [ + c b ] < ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ reverse [ digits [ + [ * [ - a c ] [ - a c ] ] [ * [ - [ deref [ sort b ] [ / [ len b ] 2 ] ] d ] [ - [ deref [ sort b ] [ / [ len b ] 2 ] ] d ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ reduce [ range 0 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ slice e b c ] ] ] [ deref [ slice e b c ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ reduce [ slice a [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] b ] c ] 1000000000 min ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ digits b ] ] ] [ deref [ digits b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ >= [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] b ]
[ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] square ]
[ reduce [ slice [ sort [ map a [ partial1 b + ] ] ] 0 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 c * ] ] ] ] ] ] 0 + ]
[ - [ reduce [ slice [ filter a [ partial1 b < ] ] 0 [ / [ len [ filter a [ partial1 b < ] ] ] 2 ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ range 0 [ + [ reduce [ filter a [ partial1 b < ] ] 0 max ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] + ] ] ] ]
[ map [ slice [ filter a [ partial1 b < ] ] 0 [ / [ len [ filter a [ partial1 b < ] ] ] 2 ] ] square ]
[ reduce [ map [ range 0 [ min [ len [ reverse [ digits a ] ] ] [ len b ] ] ] [ lambda1 [ if [ < [ deref [ reverse [ digits a ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ digits [ / [ reduce [ slice a [ / [ len a ] 2 ] [ len a ] ] 0 + ] [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] ]
[ reduce [ map [ range 0 [ min [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ len [ range 1 [ + b 1 ] ] ] ] ] [ lambda1 [ if [ > [ deref [ slice a [ / [ len a ] 2 ] [ len a ] ] arg1 ] [ deref [ range 1 [ + b 1 ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ slice [ map [ filter a [ partial1 b < ] ] [ partial1 c - ] ] 0 [ / [ len [ map [ filter a [ partial1 b < ] ] [ partial1 c - ] ] ] 2 ] ]
[ map [ slice a b [ max c d ] ] [ partial0 2 * ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ filter b [ combine ! is_prime ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ filter b [ combine ! is_prime ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ map [ filter [ filter a [ combine ! is_prime ] ] [ partial1 b > ] ] [ partial0 2 * ] ]
[ + [ * [ - [ deref a [ / [ len a ] 2 ] ] c ] [ - [ deref a [ / [ len a ] 2 ] ] c ] ] [ * [ - b [ reduce [ filter d [ partial0 [ reduce d 1000000000 min ] < ] ] 1000000000 min ] ] [ - b [ reduce [ filter d [ partial0 [ reduce d 1000000000 min ] < ] ] 1000000000 min ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ slice [ reverse a ] 0 [ / [ len [ reverse a ] ] 2 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ filter a [ lambda1 [ reduce [ map [ range 0 [ + b 1 ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ filter [ map [ map a square ] [ partial1 b - ] ] [ partial1 c < ] ]
[ deref [ sort [ map a [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] * ] ] ] [ / [ len [ map a [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] * ] ] ] 2 ] ]
[ reduce [ range 0 [ + [ reduce [ range 1 [ + a 1 ] ] 0 max ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ head [ map a [ partial1 [ min c b ] * ] ] ]
[ reverse [ filter [ filter a [ partial1 b < ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ]
[ slice [ reverse [ filter a [ partial1 b > ] ] ] [ / [ len [ reverse [ filter a [ partial1 b > ] ] ] ] 2 ] [ len [ reverse [ filter a [ partial1 b > ] ] ] ] ]
[ head [ range 1 [ + [ deref a [ / [ len a ] 2 ] ] 1 ] ] ]
[ slice [ reverse [ reverse a ] ] 0 [ / [ len [ reverse [ reverse a ] ] ] 2 ] ]
[ digits [ reduce [ map [ range 0 [ min [ len [ slice a b c ] ] [ len e ] ] ] [ lambda1 [ if [ > [ deref [ slice a b c ] arg1 ] [ deref e arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ * a [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ]
[ reduce [ range 0 [ + [ head [ filter a [ partial1 b < ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 [ reduce [ filter c [ partial0 [ reduce c 1000000000 min ] < ] ] 1000000000 min ] > ] ]
[ + [ reduce [ slice [ sort a ] 0 b ] 0 + ] [ reduce c 1000000000 min ] ]
[ reduce [ filter [ map [ filter [ range 0 [ len [ slice a 0 [ / [ len a ] 2 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ slice a 0 [ / [ len a ] 2 ] ] int-deref ] ] [ partial0 [ reduce [ map [ filter [ range 0 [ len [ slice a 0 [ / [ len a ] 2 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ slice a 0 [ / [ len a ] 2 ] ] int-deref ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ deref [ range 0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ / [ len [ range 0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] 2 ] ]
[ deref [ sort [ map [ reverse a ] [ partial0 2 * ] ] ] [ / [ len [ map [ reverse a ] [ partial0 2 * ] ] ] 2 ] ]
[ + [ reduce [ map [ range 0 [ min [ len a ] [ len [ map b square ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ map b square ] arg1 ] ] 1 0 ] ] ] 0 + ] d ]
[ <= [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ < [ head [ map a [ partial0 2 * ] ] ] b ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ deref [ reverse a ] [ / [ len [ reverse a ] ] 2 ] ] ]
[ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ reverse c ] ] ] [ deref [ reverse c ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ filter [ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ partial1 b - ] ] [ partial0 [ reduce [ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ partial1 b - ] ] 0 max ] > ] ] 0 max ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ filter [ slice c 0 [ / [ len c ] 2 ] ] [ partial1 b < ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ filter [ slice c 0 [ / [ len c ] 2 ] ] [ partial1 b < ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ range 1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] ]
[ digits [ strlen a ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ - [ reduce [ slice a b [ reduce [ slice [ sort c ] 0 d ] 0 + ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map [ reverse [ range 0 [ + a 1 ] ] ] [ partial0 2 * ] ]
[ slice a [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] d ]
[ filter [ slice a b c ] [ partial1 [ reduce [ reverse [ digits d ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] > ] ]
[ map [ map a [ partial1 b - ] ] [ partial1 [ reduce [ slice [ sort c ] 0 d ] 0 + ] * ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ head [ map [ slice a 0 [ / [ len a ] 2 ] ] square ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ range 0 [ floor [ sqrt [ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] ] ] ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ * [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ]
[ reverse [ map a [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] + ] ] ]
[ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] + ] ]
[ filter a [ combine ! is_prime ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ head [ slice [ slice a b c ] [ / [ len [ slice a b c ] ] 2 ] [ len [ slice a b c ] ] ] ]
[ filter [ filter [ filter a [ combine ! is_prime ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ]
[ filter [ filter [ filter a [ partial1 b < ] ] [ combine ! is_prime ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ slice e b c ] [ partial0 2 * ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map [ slice e b c ] [ partial0 2 * ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ range 0 [ + [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] ]
[ map [ map a [ partial1 b + ] ] [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] - ] ]
[ filter [ filter a [ partial1 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] > ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ filter [ digits a ] [ partial0 [ reduce [ digits a ] 1000000000 min ] < ] ] 1000000000 min ]
[ reduce [ reverse [ digits [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ + d e ] ] [ - b [ + d e ] ] ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ slice [ slice a b c ] [ / [ len [ slice a b c ] ] 2 ] [ len [ slice a b c ] ] ] 0 max ]
[ reduce [ filter [ slice [ reverse a ] b c ] [ partial0 [ reduce [ slice [ reverse a ] b c ] 0 max ] > ] ] 0 max ]
[ slice [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ reduce c 0 max ] d ]
[ reverse [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ min [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] [ strlen f ] ]
[ is_sorted [ slice [ reverse a ] b c ] ]
[ reduce [ slice a [ reduce b 1000000000 min ] c ] 0 + ]
[ reduce [ slice [ sort [ digits [ reduce a 1000000000 min ] ] ] 0 b ] 0 + ]
[ filter [ slice [ reverse a ] [ / [ len [ reverse a ] ] 2 ] [ len [ reverse a ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 [ + a b ] + ] ] ] ]
[ slice a [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] b ] c ]
[ reduce [ slice [ sort [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] ] 0 c ] 0 + ]
[ reduce [ slice [ sort a ] 0 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ]
[ reduce [ slice [ sort [ map a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] * ] ] ] 0 c ] 0 + ]
[ slice a b [ reduce [ reverse [ digits [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ range 1 [ + [ head [ slice a 0 [ / [ len a ] 2 ] ] ] 1 ] ]
[ reduce [ range 0 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ range 1 [ + b 1 ] ] ] ] [ deref [ range 1 [ + b 1 ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ range 0 [ strlen [ reduce a "" str_concat ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ < [ reduce [ map [ range 0 [ min [ len [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] [ len c ] ] ] [ lambda1 [ if [ < [ deref [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ] 1 ]
[ + a [ reduce [ slice [ reverse [ sort d ] ] 0 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] 0 + ] ]
[ reduce [ slice [ sort [ range 1 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] ] 0 c ] 0 + ]
[ floor [ sqrt [ + [ * [ - [ strlen a ] c ] [ - [ strlen a ] c ] ] [ * [ - [ head b ] d ] [ - [ head b ] d ] ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ filter [ range 0 [ len [ range 0 b ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ range 0 b ] int-deref ] ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map [ filter [ range 0 [ len [ range 0 b ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ range 0 b ] int-deref ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 b + ] ] ] [ len c ] ] ] [ lambda1 [ if [ > [ deref [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 b + ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ max [ reduce [ reverse a ] 0 max ] b ]
[ / [ reduce [ range 0 [ + [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] 1 ] ] 0 + ] [ len [ range 0 [ + [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] 1 ] ] ] ]
[ reduce [ map [ range 0 [ min [ len [ reverse a ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ reverse a ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ slice [ sort [ map a [ partial1 b * ] ] ] 0 [ - [ reduce c 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 + ]
[ map a [ partial1 [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] + ] ]
[ reduce [ range 0 [ + [ strlen [ reduce a "z" str_min ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ map [ filter a [ partial1 [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] b ] < ] ] square ]
[ digits [ head [ reverse a ] ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ digits [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ]
[ range 1 [ / [ reduce [ map a square ] 0 + ] [ len [ map a square ] ] ] ]
[ filter [ slice a b c ] [ lambda1 [ reduce [ map [ filter d [ partial1 e < ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ reverse [ digits [ head [ map a square ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ reverse [ digits [ head [ filter a [ partial1 b < ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reverse [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] ]
[ filter [ filter a [ partial1 b < ] ] [ partial1 [ reduce [ filter c [ partial0 [ reduce c 0 max ] > ] ] 0 max ] < ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ digits [ strlen a ] ]
[ reverse [ map a [ partial1 [ max c b ] * ] ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ reverse [ slice e b c ] ] ] ] [ deref [ reverse [ slice e b c ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ > a [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ] ]
[ + [ reduce [ reverse [ digits [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] b ]
[ reduce [ range 0 [ + [ max a [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ reduce [ slice a 0 [ / [ len a ] 2 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ slice d b c ] ] ] [ deref [ slice d b c ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ map [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 [ strlen b ] * ] ]
[ range 1 [ reduce [ range 0 [ + [ reduce a 0 max ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ range 0 [ min [ len [ reverse a ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ reverse a ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ filter c [ partial1 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] > ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ filter c [ partial1 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] < ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ reduce [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b < ] ] 1000000000 min ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ map [ map [ digits a ] square ] square ]
[ range 0 [ + [ reduce [ reverse [ digits [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ]
[ digits [ deref a [ / [ len a ] 2 ] ] ]
[ filter [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ reverse a ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ range 1 [ + [ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 + ] 1 ] ]
[ filter [ slice [ range 1 a ] [ / [ len [ range 1 a ] ] 2 ] [ len [ range 1 a ] ] ] is_prime ]
[ head [ map [ filter a is_prime ] [ partial1 b - ] ] ]
[ map a [ partial1 b - ] ]
[ head [ slice a b [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] c ] ] ]
[ reverse [ range 0 [ + [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] 1 ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ filter b is_prime ] [ partial0 2 * ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map [ filter b is_prime ] [ partial0 2 * ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ slice [ map a [ partial1 b - ] ] [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] d ]
[ reduce [ map [ range 0 [ len [ slice a [ head b ] c ] ] ] [ lambda1 [ == [ deref [ slice a [ head b ] c ] arg1 ] [ deref [ slice a [ head b ] c ] [ - [ - [ len [ slice a [ head b ] c ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ range 0 [ deref [ slice a [ / [ len a ] 2 ] [ len a ] ] [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] ] ]
[ digits [ reduce [ slice [ sort a ] 0 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] 0 + ] ]
[ map a [ partial1 [ deref b [ / [ len b ] 2 ] ] * ] ]
[ map [ slice [ digits a ] 0 [ / [ len [ digits a ] ] 2 ] ] [ partial1 b * ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ floor [ sqrt [ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] ] ] ] ] ]
[ floor [ sqrt [ + [ * [ - a [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] c ] ] [ - a [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] c ] ] ] [ * [ - [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] d ] [ - [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] d ] ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map [ filter a is_prime ] [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] * ] ]
[ reduce [ map [ range 0 [ min [ len [ slice a 0 [ / [ len a ] 2 ] ] ] [ len [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] ] [ lambda1 [ if [ > [ deref [ slice a 0 [ / [ len a ] 2 ] ] arg1 ] [ deref [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ < a [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ map a [ partial1 b - ] ]
[ map [ digits a ] [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] + ] ]
[ reduce [ slice [ sort a ] 0 [ reduce [ filter [ slice e b c ] [ partial0 [ reduce [ slice e b c ] 1000000000 min ] < ] ] 1000000000 min ] ] 0 + ]
[ reduce [ reverse [ digits [ reduce [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1000000000 min ] < ] ] 1000000000 min ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter a [ partial1 [ reduce [ slice [ reverse [ sort c ] ] 0 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 + ] < ] ]
[ reduce [ range 0 [ + [ reduce [ range 0 [ + [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ deref [ filter [ reverse a ] [ partial1 b > ] ] [ / [ len [ filter [ reverse a ] [ partial1 b > ] ] ] 2 ] ]
[ filter [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c > ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ reverse [ digits [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ head [ map [ map a [ partial1 b - ] ] [ partial0 2 * ] ] ]
[ reduce [ range 0 [ + [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ <= [ reduce [ reverse [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] d ]
[ filter [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ partial1 b > ] ]
[ slice [ digits a ] [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 b + ] ] ] ] c ]
[ range 0 [ + [ * a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] ] 1 ] ]
[ digits [ reduce [ map [ range 0 [ min [ len [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] [ len c ] ] ] [ lambda1 [ if [ < [ deref [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ range 0 [ + [ reduce [ map [ range 0 [ min [ len [ slice a b c ] ] [ len e ] ] ] [ lambda1 [ if [ > [ deref [ slice a b c ] arg1 ] [ deref e arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ]
[ map [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] square ]
[ reduce [ map [ range 0 [ len [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] ] ] [ lambda1 [ == [ deref [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] arg1 ] [ deref [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] [ - [ - [ len [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ reverse [ range 1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] ] ]
[ reduce [ map [ range 0 [ min [ len [ reverse [ range 1 a ] ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ reverse [ range 1 a ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 [ + a b ] + ] ] ] ]
[ deref [ map a [ partial0 2 * ] ] [ / [ len [ map a [ partial0 2 * ] ] ] 2 ] ]
[ reduce [ slice [ sort [ map a square ] ] 0 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 + ]
[ filter a [ lambda1 [ reduce [ map [ filter b [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ filter [ reverse c ] [ partial1 b < ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ filter [ reverse c ] [ partial1 b < ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ < [ reduce [ slice [ reverse [ sort [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] 0 c ] 0 + ] d ]
[ filter [ slice [ digits a ] 0 [ / [ len [ digits a ] ] 2 ] ] [ partial1 b < ] ]
[ filter [ range 0 [ + a 1 ] ] [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] > ] ]
[ reduce [ filter [ slice [ reverse a ] b c ] [ partial0 [ reduce [ slice [ reverse a ] b c ] 0 max ] > ] ] 0 max ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ range 0 [ + [ reduce a 1000000000 min ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ reduce [ map [ range 0 [ min [ len [ digits a ] ] [ len [ range 0 b ] ] ] ] [ lambda1 [ if [ < [ deref [ digits a ] arg1 ] [ deref [ range 0 b ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ head [ slice a b [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] c ] ] ]
[ head [ map [ map a [ partial0 2 * ] ] [ partial1 b - ] ] ]
[ map a [ partial1 b - ] ]
[ deref [ slice [ map a [ partial1 b + ] ] 0 [ / [ len [ map a [ partial1 b + ] ] ] 2 ] ] [ / [ len [ slice [ map a [ partial1 b + ] ] 0 [ / [ len [ map a [ partial1 b + ] ] ] 2 ] ] ] 2 ] ]
[ reduce [ map [ range 0 [ len [ reverse [ range 1 [ + a 1 ] ] ] ] ] [ lambda1 [ == [ deref [ reverse [ range 1 [ + a 1 ] ] ] arg1 ] [ deref [ reverse [ range 1 [ + a 1 ] ] ] [ - [ - [ len [ reverse [ range 1 [ + a 1 ] ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ slice [ reverse [ sort [ slice a b c ] ] ] 0 d ] 0 + ] ]
[ slice [ range 0 [ + a 1 ] ] [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] c ]
[ reduce [ map [ range 0 [ min [ len [ reverse [ digits a ] ] ] [ len b ] ] ] [ lambda1 [ if [ < [ deref [ reverse [ digits a ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ map b square ] ] ] [ deref [ map b square ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ filter [ map [ filter [ range 0 [ len [ slice a b c ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ slice a b c ] int-deref ] ] [ lambda1 [ reduce [ map d [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ reverse [ digits [ reduce [ slice [ sort a ] 0 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map [ range 0 [ + [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] 1 ] ] square ]
[ reverse [ slice [ range 1 a ] [ / [ len [ range 1 a ] ] 2 ] [ len [ range 1 a ] ] ] ]
[ reduce [ reverse [ digits [ reduce [ slice a [ / [ len a ] 2 ] [ len a ] ] 1000000000 min ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map [ filter [ range 0 [ len [ slice [ slice a b c ] [ / [ len [ slice a b c ] ] 2 ] [ len [ slice a b c ] ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ slice [ slice a b c ] [ / [ len [ slice a b c ] ] 2 ] [ len [ slice a b c ] ] ] int-deref ] ]
[ filter [ reverse a ] [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ slice [ reverse [ sort [ map a [ partial1 b - ] ] ] ] 0 [ reduce [ map [ range 0 [ min [ len c ] [ len d ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ] ] 0 + ]
[ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len d ] ] [ deref d arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] * ] ]
[ reduce [ map [ range 0 [ len [ filter a [ lambda1 [ reduce [ map [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 arg1 == ] ] false || ] ] ] ] ] [ lambda1 [ == [ deref [ filter a [ lambda1 [ reduce [ map [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 arg1 == ] ] false || ] ] ] arg1 ] [ deref [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ - [ - [ len [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ reduce [ reverse [ digits [ reduce [ filter d [ partial0 [ reduce d 0 max ] > ] ] 0 max ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ - b [ reduce [ reverse [ digits [ reduce [ filter d [ partial0 [ reduce d 0 max ] > ] ] 0 max ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] ]
[ digits [ head [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ] ]
[ map [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] square ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reverse [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ digits [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ slice [ sort c ] 0 b ] 0 + ] ] - ] ]
[ digits [ head [ reverse a ] ] ]
[ map [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] + ] ]
[ - [ reduce [ range 0 [ max a b ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reverse [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ head [ filter a [ partial1 b > ] ] ] ]
[ digits [ reduce [ reverse [ digits [ reduce a 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ deref [ map [ digits a ] [ partial0 2 * ] ] [ / [ len [ map [ digits a ] [ partial0 2 * ] ] ] 2 ] ]
[ map [ filter [ range 1 [ + a 1 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ]
[ reduce [ range 0 [ + [ strlen [ reduce a "z" str_min ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ reduce [ map [ range 0 [ len [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] ] ] [ lambda1 [ == [ deref [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] arg1 ] [ deref [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] [ - [ - [ len [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map [ reverse a ] [ partial1 [ reduce [ slice [ sort c ] 0 b ] 0 + ] + ] ]
[ map [ filter a [ lambda1 [ reduce [ map [ map c [ partial1 b - ] ] [ partial0 arg1 == ] ] false || ] ] ] [ partial1 d - ] ]
[ / [ reduce [ slice [ range 0 a ] [ / [ len [ range 0 a ] ] 2 ] [ len [ range 0 a ] ] ] 0 + ] [ len [ range 0 a ] ] ] ]
[ - [ reduce [ range 0 [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] c ] < ] ]
[ reduce [ map [ reverse a ] square ] 0 max ]
[ map [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] [ partial1 b * ] ]
[ range 0 [ + [ + [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] b ] 1 ] ]
[ range 0 [ reduce [ range 0 [ + [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ deref [ sort [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] ] [ / [ len [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] ] 2 ] ]
[ reduce [ slice [ sort a ] 0 [ reduce [ range 0 [ + [ head b ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] 0 + ]
[ filter [ slice [ reverse a ] 0 [ / [ len [ reverse a ] ] 2 ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ * a [ strlen b ] ]
[ digits [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ]
[ map [ slice a b c ] [ partial1 [ * d e ] - ] ]
[ filter a [ partial1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] > ] ]
[ floor [ sqrt [ + [ * [ - a [ reduce [ map [ range 0 [ min [ len c ] [ len d ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ] ] [ - a [ reduce [ map [ range 0 [ min [ len c ] [ len d ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ] ] ] [ * [ - b [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 e * ] ] ] ] ] ] [ - b [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 e * ] ] ] ] ] ] ] ] ] ]
[ filter a [ partial1 [ strlen b ] > ] ]
[ len [ map a [ partial0 2 * ] ] ]
[ reduce [ filter [ filter [ range 1 [ + a 1 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 [ reduce [ filter [ range 1 [ + a 1 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 max ] > ] ] 0 max ]
[ - [ reduce [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b < ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ filter [ reverse a ] [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ digits [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] ]
[ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ reduce [ reverse [ digits [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ - b [ reduce [ reverse [ digits [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] ]
[ reverse [ range 0 [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ]
[ reverse [ filter [ map a [ partial1 b + ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ range 0 [ + [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ range 0 [ + [ reduce [ reverse [ digits [ deref a [ / [ len a ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ digits [ head a ] ]
[ + [ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ filter [ range 0 [ len b ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 b int-deref ] ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ map [ filter [ range 0 [ len b ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 b int-deref ] ] arg1 ] ] 1 0 ] ] ] 0 + ] c ]
[ map [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] b c ] square ]
[ map [ slice a b c ] [ partial1 [ reduce [ map [ range 0 [ min [ len d ] [ len e ] ] ] [ lambda1 [ if [ < [ deref d arg1 ] [ deref e arg1 ] ] 1 0 ] ] ] 0 + ] * ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ filter [ filter a [ partial1 b > ] ] [ partial1 [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 c + ] ] ] ] > ] ]
[ slice [ filter a [ lambda1 [ reduce [ map [ filter c [ partial1 b < ] ] [ partial0 arg1 == ] ] false || ] ] ] d e ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ reduce a 0 max ] * ] ] ] ] ]
[ filter a [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len [ range 1 b ] ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref [ range 1 b ] arg1 ] ] 1 0 ] ] ] 0 + ] < ] ]
[ reduce [ map [ range 0 [ len [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ] ] ] [ lambda1 [ == [ deref [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ] arg1 ] [ deref [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ] [ - [ - [ len [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ filter a [ lambda1 [ reduce [ map [ digits [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ reverse [ filter [ range 0 [ + a 1 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ map [ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b + ] ] [ partial0 2 * ] ]
[ reduce [ map [ filter a [ partial1 b < ] ] [ partial0 2 * ] ] 1000000000 min ]
[ map [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 [ deref b [ / [ len b ] 2 ] ] + ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ is_sorted [ slice [ reverse a ] b c ] ]
[ map [ reverse [ slice a b c ] ] [ partial1 d * ] ]
[ slice [ map a [ partial1 b * ] ] c [ head d ] ]
[ reduce [ slice [ sort [ map a [ partial1 b + ] ] ] 0 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len d ] ] [ deref d arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] 0 + ]
[ map [ digits a ] [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] + ] ]
[ reverse [ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ]
[ range 0 [ + a 1 ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ filter [ map [ filter [ range 0 [ len [ map a [ partial1 b - ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ map a [ partial1 b - ] ] int-deref ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] d ] ] [ - b [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] d ] ] ] ]
[ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] d ] [ - [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] d ] ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ range 1 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ range 1 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len [ filter a [ lambda1 [ reduce [ map [ range 1 [ + b 1 ] ] [ partial0 arg1 == ] ] false || ] ] ] ] [ len c ] ] ] [ lambda1 [ if [ < [ deref [ filter a [ lambda1 [ reduce [ map [ range 1 [ + b 1 ] ] [ partial0 arg1 == ] ] false || ] ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ map [ filter [ slice a b c ] [ lambda1 [ reduce [ map d [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ]
[ reduce [ range 0 [ + [ deref [ range 1 [ + a 1 ] ] [ / [ len [ range 1 [ + a 1 ] ] ] 2 ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ filter [ slice a 0 [ / [ len a ] 2 ] ] [ lambda1 [ reduce [ map [ map b square ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reverse [ slice a [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] c ] ]
[ reduce [ slice [ sort [ slice a 0 [ / [ len a ] 2 ] ] ] 0 [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 + ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] + ] ] ] ]
[ reduce [ range 0 [ + [ reduce [ range 0 [ + [ reduce [ slice [ sort a ] 0 b ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ reduce [ slice [ sort [ filter a [ partial1 b < ] ] ] 0 [ + c d ] ] 0 + ]
[ reverse [ range 1 [ reduce a 1000000000 min ] ] ]
[ filter [ slice a [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 b + ] ] ] ] c ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] + ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ filter [ slice [ digits a ] [ / [ len [ digits a ] ] 2 ] [ len [ digits a ] ] ] is_prime ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ floor [ sqrt [ + [ * [ - a [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 c * ] ] ] ] ] ] [ - a [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 c * ] ] ] ] ] ] ] [ * [ - b [ strlen d ] ] [ - b [ strlen d ] ] ] ] ] ]
[ floor [ sqrt [ + [ * [ - a [ + [ * [ - f c ] [ - f c ] ] [ * [ - g d ] [ - g d ] ] ] ] [ - a [ + [ * [ - f c ] [ - f c ] ] [ * [ - g d ] [ - g d ] ] ] ] ] [ * [ - b h ] [ - b h ] ] ] ] ]
[ reduce [ reverse [ digits [ floor [ sqrt [ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] ] ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ slice a [ strlen b ] [ reduce [ slice [ sort c ] 0 d ] 0 + ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ > [ reduce [ reverse [ digits [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] c ]
[ filter [ digits [ head a ] ] is_prime ]
[ filter [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] [ partial1 d < ] ]
[ reverse [ range 0 [ head a ] ] ]
[ range 0 [ + [ head [ filter a [ partial1 b < ] ] ] 1 ] ]
[ slice a [ head [ slice d b c ] ] d ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 [ + a b ] + ] ] ] ]
[ digits [ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ map [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ]
[ head [ map [ slice a 0 [ / [ len a ] 2 ] ] square ] ]
[ > [ reduce [ map [ range 0 [ min [ len [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] [ len c ] ] ] [ lambda1 [ if [ > [ deref [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ] 1 ]
[ map a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce b 0 max ] ] - ] ]
[ reduce [ filter [ digits a ] [ partial0 [ reduce [ digits a ] 1000000000 min ] < ] ] 1000000000 min ]
[ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ reverse c ] ] ] [ deref [ reverse c ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ map [ digits a ] [ partial1 [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] - ] ]
[ head [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ]
[ map [ slice [ digits a ] [ / [ len [ digits a ] ] 2 ] [ len [ digits a ] ] ] [ partial0 2 * ] ]
[ range 0 [ + a 1 ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len a ] [ len [ map c [ partial1 b - ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ map c [ partial1 b - ] ] arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ digits [ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] ] ]
[ map [ map a [ partial0 2 * ] ] [ partial1 [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] + ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ range 0 [ + [ reduce a 1000000000 min ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ + a [ reduce [ range 0 [ + [ + c b ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ slice a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] [ reduce [ map [ range 0 [ min [ len d ] [ len e ] ] ] [ lambda1 [ if [ < [ deref d arg1 ] [ deref e arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ filter [ range 1 [ + a 1 ] ] [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] > ] ]
[ is_sorted [ map a [ partial1 [ strlen b ] * ] ] ]
[ range 0 [ + [ reduce [ slice [ reverse [ sort [ filter a [ partial1 b < ] ] ] ] 0 c ] 0 + ] 1 ] ]
[ map [ filter [ filter a [ partial1 b > ] ] [ combine ! is_prime ] ] [ partial0 2 * ] ]
[ digits [ deref [ sort [ slice a 0 [ / [ len a ] 2 ] ] ] [ / [ len [ slice a 0 [ / [ len a ] 2 ] ] ] 2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ deref [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] [ / [ len [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] ] 2 ] ]
[ map [ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b - ] ] [ partial0 2 * ] ]
[ reduce [ filter a [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] > ] ] 0 max ]
[ max [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] [ len b ] ]
[ reduce [ range 0 [ + [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ min a [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ max [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] c ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ reduce [ filter [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 [ reduce [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 max ] > ] ] 0 max ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ reverse a ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ map [ digits [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ] [ partial1 b * ] ]
[ - [ reduce [ range 1 [ + [ deref [ sort a ] [ / [ len a ] 2 ] ] 1 ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ map [ reverse [ range 0 [ + a 1 ] ] ] square ]
[ slice [ map a [ partial0 2 * ] ] b [ reduce [ slice [ sort c ] 0 d ] 0 + ] ]
[ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ digits c ] ] ] [ deref [ digits c ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ head [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ reduce [ slice [ reverse [ sort [ filter [ map a square ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] ] 0 b ] 0 + ]
[ range 0 [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ]
[ reduce [ slice [ reverse [ sort [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] 0 c ] 0 + ]
[ filter [ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial0 2 * ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ deref [ sort a ] [ / [ len a ] 2 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ deref [ range 1 [ + [ head a ] 1 ] ] [ / [ len [ range 1 [ + [ head a ] 1 ] ] ] 2 ] ]
[ head [ slice a b [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] ]
[ >= [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ head d ] ] [ - b [ head d ] ] ] ] ] ] ] f ]
[ reduce [ reverse [ digits [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map [ reverse [ digits a ] ] [ partial0 2 * ] ]
[ floor [ sqrt [ + [ * [ - a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len d ] ] [ deref d arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] [ - a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len d ] ] [ deref d arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ] [ * [ - b [ floor [ sqrt [ + [ * [ - f h ] [ - f h ] ] [ * [ - g i ] [ - g i ] ] ] ] ] ] [ - b [ floor [ sqrt [ + [ * [ - f h ] [ - f h ] ] [ * [ - g i ] [ - g i ] ] ] ] ] ] ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ + [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ reduce d 0 + ] ] [ - b [ reduce d 0 + ] ] ] ] ] ] ] f ]
[ digits [ reduce [ map [ range 0 [ min [ len [ slice a b c ] ] [ len d ] ] ] [ lambda1 [ if [ < [ deref [ slice a b c ] arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ reverse [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ reduce [ map [ range 0 [ len [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] ] ] [ lambda1 [ == [ deref [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] arg1 ] [ deref [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] [ - [ - [ len [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ reduce [ range 0 [ + [ reduce [ filter a [ partial1 b < ] ] 0 max ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ range 0 [ + [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 max ] 1 ] ]
[ reduce [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ range 1 b ] ] ] [ deref [ range 1 b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reverse [ filter [ range 1 [ + a 1 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ < [ head a ] 0 ]
[ reduce [ map [ range 0 [ min [ len [ filter [ filter a [ partial1 b > ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] [ len c ] ] ] [ lambda1 [ if [ < [ deref [ filter [ filter a [ partial1 b < ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ strlen a ] ] ]
[ reduce [ range 0 [ + [ reduce [ slice a 0 [ / [ len a ] 2 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ reduce [ range 0 [ + [ reduce [ slice [ reverse [ sort a ] ] 0 [ head b ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] square ] 0 max ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ]
[ range 1 [ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ filter [ range 0 [ len b ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 b int-deref ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map [ filter [ range 0 [ len b ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 b int-deref ] ] arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ filter [ filter [ slice a b c ] [ lambda1 [ reduce [ map d [ partial0 arg1 == ] ] false || ] ] ] [ combine ! is_prime ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reverse [ map a [ partial1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 b + ] ] ] ] * ] ] ]
[ max [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] c ]
[ map [ filter a [ combine ! is_prime ] ] [ partial1 [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] - ] ]
[ + [ * [ - a [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 d * ] ] ] ] ] ] [ - a [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 d * ] ] ] ] ] ] ] [ * [ - [ max c b ] e ] [ - [ max c b ] e ] ] ]
[ map [ filter [ filter a [ partial1 b < ] ] [ partial1 c > ] ] [ partial0 2 * ] ]
[ digits [ strlen a ] ]
[ reduce [ filter [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 b - ] ] [ partial0 [ reduce [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 b - ] ] 0 max ] > ] ] 0 max ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ filter [ map a [ partial1 b * ] ] [ partial0 [ reduce [ map a [ partial1 b * ] ] 0 max ] > ] ] 0 max ]
[ filter [ reverse a ] [ partial1 [ reduce [ slice [ sort c ] 0 b ] 0 + ] < ] ]
[ map [ filter [ map a [ partial1 b - ] ] [ partial1 c > ] ] [ partial1 d - ] ]
[ reduce [ slice [ reverse [ sort [ filter a [ partial1 b > ] ] ] ] 0 [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 + ]
[ map [ range 0 [ + [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] square ]
[ filter [ filter [ reverse a ] [ partial1 b > ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] + ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ reduce [ map [ filter [ range 0 [ len d ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 d int-deref ] ] 0 max ] ] [ - b [ reduce [ map [ filter [ range 0 [ len d ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 d int-deref ] ] 0 max ] ] ] ]
[ reduce [ map [ range 0 [ len [ map [ filter [ range 0 [ len [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] int-deref ] ] ] ] ] [ lambda1 [ == [ deref [ map [ filter [ range 0 [ len [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] int-deref ] ] arg1 ] [ deref [ map [ filter [ range 0 [ len [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] ] [ lambda1
[ floor [ sqrt [ + [ * [ - a [ reduce [ map [ range 0 [ min [ len c ] [ len d ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ] ] [ - a [ reduce [ map [ range 0 [ min [ len c ] [ len d ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ] ] ] [ * [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g i ] [ - g i ] ] ] ] [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g i ] [ - g i ] ] ] ] ] ] ] ]
[ head [ slice [ digits a ] 0 [ / [ len [ digits a ] ] 2 ] ] ]
[ reduce [ slice [ sort [ map a [ partial1 [ max c b ] - ] ] ] 0 d ] 0 + ]
[ filter a [ partial1 [ strlen b ] > ] ]
[ reverse [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] ]
[ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ range 0 [ + a 1 ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ filter [ slice e b c ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ filter [ slice e b c ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] 0 [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] ] is_prime ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ / [ reduce a 0 + ] [ len a ] ] * ] ] ] ] ]
[ map [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] - ] ]
[ reduce [ map [ range 0 [ min [ len [ map [ range 0 [ + a 1 ] ] square ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ map [ range 0 [ + a 1 ] ] square ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ digits b ] square ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map [ digits b ] square ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ range 0 [ + [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ map [ range 0 [ min [ len a ] [ len [ slice d b c ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ slice d b c ] arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ reverse [ map a [ partial1 b + ] ] ]
[ reduce [ slice [ reverse [ sort [ digits [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ] ] ] ] 0 b ] 0 + ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ digits [ reduce [ range 0 [ + [ deref [ sort a ] [ / [ len a ] 2 ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ filter [ map a square ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ - [ reduce [ reverse [ slice a b c ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ reverse [ digits [ reduce [ reverse [ digits [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reverse [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ map [ filter a is_prime ] [ partial0 2 * ] ]
[ filter [ slice a b c ] [ partial1 [ reduce d 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len e ] ] [ deref e arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] < ] ]
[ slice [ reverse [ filter a [ partial1 b > ] ] ] [ / [ len [ reverse [ filter a [ partial1 b > ] ] ] ] 2 ] [ len [ reverse [ filter a [ partial1 b > ] ] ] ] ]
[ digits [ strlen a ] ]
[ digits [ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ range 1 [ + [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ] 1 ] ]
[ digits [ reduce [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial0 [ reduce [ slice a 0 [ / [ len a ] 2 ] ] 1000000000 min ] < ] ] 1000000000 min ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ slice [ reverse [ sort [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] 0 c ] 0 + ] ]
[ filter [ filter [ reverse a ] is_prime ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ head [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reverse [ range 0 [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ]
[ slice a b [ * c d ] ]
[ reduce [ range 0 [ + [ max a [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ reduce [ filter a [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] < ] ] 0 max ]
[ filter [ slice [ range 0 [ + a 1 ] ] [ / [ len [ range 0 [ + a 1 ] ] ] 2 ] [ len [ range 0 [ + a 1 ] ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ filter [ digits [ head a ] ] is_prime ]
[ min [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] b ]
[ filter [ digits [ deref [ sort a ] [ / [ len a ] 2 ] ] ] [ combine ! is_prime ] ]
[ - [ reduce [ slice a b [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reverse [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 b - ] ] ]
[ + a [ reduce [ range 0 [ + [ reduce [ slice [ sort c ] 0 b ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ slice a [ reduce b 0 + ] [ reduce c 0 max ] ]
[ floor [ sqrt [ + [ * [ - a [ deref c [ / [ len c ] 2 ] ] ] [ - a [ deref c [ / [ len c ] 2 ] ] ] ] [ * [ - b [ strlen d ] ] [ - b [ strlen d ] ] ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ map [ range 1 [ + [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] 1 ] ] square ]
[ digits [ strlen a ] ]
[ map [ map a square ] [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] + ] ]
[ head [ slice [ digits a ] 0 [ / [ len [ digits a ] ] 2 ] ] ]
[ head [ slice [ map a square ] [ / [ len [ map a square ] ] 2 ] [ len [ map a square ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] + ] ] ] ]
[ reduce [ reverse [ digits [ reduce [ range 0 [ + [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reverse [ map a [ partial1 b + ] ] ]
[ reduce [ filter [ map [ reverse a ] square ] [ partial0 [ reduce [ map [ reverse a ] square ] 0 max ] > ] ] 0 max ]
[ map [ filter [ filter a is_prime ] [ partial1 b < ] ] [ partial0 2 * ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter b [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] ] [ deref [ filter b [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ reverse [ slice d b c ] ] ] ] [ deref [ reverse [ slice d b c ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ > [ * a [ strlen b ] ] 1 ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ map [ slice d b c ] [ partial0 2 * ] ] ] ] [ deref [ map [ slice d b c ] [ partial0 2 * ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ filter [ filter a is_prime ] [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ deref [ sort [ map [ reverse a ] [ partial0 2 * ] ] ] [ / [ len [ map [ reverse a ] [ partial0 2 * ] ] ] 2 ] ]
[ * a [ strlen b ] ]
[ reduce [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] b c ] 0 max ]
[ filter [ slice [ filter a [ partial1 b < ] ] 0 [ / [ len [ filter a [ partial1 b < ] ] ] 2 ] ] [ combine ! is_prime ] ]
[ min [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] [ min c b ] ]
[ range 1 [ + [ head [ slice a b c ] ] 1 ] ]
[ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map [ reverse a ] [ partial1 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] + ] ]
[ head [ slice [ slice a b c ] 0 [ / [ len [ slice a b c ] ] 2 ] ] ]
[ slice a [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] c ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map [ filter [ slice a b c ] [ lambda1 [ reduce [ map d [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ]
[ reduce [ filter a [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] < ] ] 1000000000 min ]
[ min [ head a ] [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ filter [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ reduce [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] 0 max ] > ] ] 0 max ]
[ reduce [ map [ range 0 [ len [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] [ lambda1 [ == [ deref [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] arg1 ] [ deref [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ - [ - [ len [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ slice [ reverse [ sort a ] ] 0 [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] 0 + ] ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ map c [ partial1 b - ] ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ digits [ reduce [ range 0 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ digits [ reduce [ map [ range 0 [ min [ len [ reverse a ] ] [ len b ] ] ] [ lambda1 [ if [ < [ deref [ reverse a ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ reduce [ reverse [ digits [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 max ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ range 0 [ + a 1 ] ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ digits [ reduce [ map [ range 0 [ min [ len a ] [ len [ range 0 b ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ range 0 b ] arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ digits [ head a ] ]
[ floor [ sqrt [ + [ * [ - [ head a ] c ] [ - [ head a ] c ] ] [ * [ - b [ len d ] ] [ - b [ len d ] ] ] ] ] ]
[ filter [ reverse [ filter a [ partial1 b > ] ] ] [ partial1 c > ] ]
[ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len a ] [ len [ slice d b c ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ slice d b c ] arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ map a [ partial1 b - ] ]
[ map [ filter [ range 0 [ + a 1 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] square ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ filter [ filter a [ lambda1 [ reduce [ map [ slice e b c ] [ partial0 arg1 == ] ] false || ] ] ] [ partial0 [ reduce [ filter a [ lambda1 [ reduce [ map [ slice e b c ] [ partial0 arg1 == ] ] false || ] ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ map a [ partial1 b - ] ]
[ is_sorted [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c + ] ] ]
[ reduce [ slice [ sort a ] 0 [ reduce [ slice [ sort c ] 0 b ] 0 + ] ] 0 + ]
[ digits [ reduce [ slice [ sort a ] 0 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 + ] ]
[ reduce [ map [ range 0 [ len [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] ] ] [ lambda1 [ == [ deref [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] arg1 ] [ deref [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] [ - [ - [ len [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ reduce [ range 1 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ]
[ min [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] f ]
[ reduce [ slice [ reverse [ sort [ map [ slice a b c ] [ partial0 2 * ] ] ] ] 0 d ] 0 + ]
[ / [ reduce [ map [ map a [ partial1 b - ] ] [ partial1 c + ] ] 0 + ] [ len [ map [ map a [ partial1 b - ] ] [ partial1 c + ] ] ] ]
[ reduce [ filter [ map a [ partial1 b - ] ] [ partial0 [ reduce [ map a [ partial1 b - ] ] 0 max ] > ] ] 0 max ]
[ range 0 [ len [ map a [ partial0 2 * ] ] ] ]
[ reduce [ slice [ sort [ slice a b c ] ] 0 [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] e ] ] 0 + ]
[ digits [ reduce [ map [ range 0 [ min [ len [ slice a b c ] ] [ len e ] ] ] [ lambda1 [ if [ > [ deref [ slice a b c ] arg1 ] [ deref e arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ + [ * [ - [ head a ] c ] [ - [ head a ] c ] ] [ * [ - b [ reduce [ range 0 [ + d 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] [ - b [ reduce [ range 0 [ + d 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] ] ]
[ digits [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce a 0 max ] ] ]
[ map [ map [ range 1 [ + a 1 ] ] square ] [ partial0 2 * ] ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce [ reverse [ digits [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 + ]
[ filter [ slice a b c ] [ partial1 [ reduce [ range 0 [ + d 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] > ] ]
[ <= [ reduce [ slice [ reverse [ sort [ slice a 0 [ / [ len a ] 2 ] ] ] ] 0 b ] 0 + ] 0 ]
[ len [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] 0 [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] ] ]
[ map [ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial0 2 * ] ] [ partial0 2 * ] ]
[ map [ slice [ range 1 [ + a 1 ] ] [ / [ len [ range 1 [ + a 1 ] ] ] 2 ] [ len [ range 1 [ + a 1 ] ] ] ] [ partial0 2 * ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ slice [ reverse [ sort [ range 1 [ + [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] ] ] 0 b ] 0 + ]
[ slice a [ reduce [ slice [ reverse [ sort c ] ] 0 [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ > [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] 0 + ] e ]
[ map [ filter [ range 0 [ len [ slice a 0 [ / [ len a ] 2 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ slice a 0 [ / [ len a ] 2 ] ] int-deref ] ]
[ deref [ range 0 [ + [ head a ] 1 ] ] [ / [ len [ range 0 [ + [ head a ] 1 ] ] ] 2 ] ]
[ digits [ reduce [ map [ range 0 [ min [ len [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] [ len c ] ] ] [ lambda1 [ if [ < [ deref [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ reduce [ slice [ reverse [ sort [ reverse [ map a [ partial1 b * ] ] ] ] ] 0 c ] 0 + ]
[ reduce [ range 0 [ + [ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ map [ slice [ map a [ partial1 b - ] ] 0 [ / [ len [ map a [ partial1 b - ] ] ] 2 ] ] [ partial0 2 * ] ]
[ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] < ] ]
[ reduce [ range 0 [ + [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce [ reverse [ digits [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 + ]
[ reverse [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] ]
[ filter [ filter a [ partial1 [ / [ reduce b 0 + ] [ len b ] ] < ] ] is_prime ]
[ filter [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ len [ filter a is_prime ] ] ]
[ reduce [ range 0 [ + [ strlen [ reduce a "z" str_min ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ reduce [ filter a [ lambda1 [ reduce [ map [ range 0 [ + b 1 ] ] [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ map [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] square ]
[ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] [ reduce b 1000000000 min ] c ]
[ reverse [ slice [ filter a [ partial1 b > ] ] [ / [ len [ filter a [ partial1 b > ] ] ] 2 ] [ len [ filter a [ partial1 b > ] ] ] ] ]
[ reverse [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] ]
[ map [ digits [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] ] [ partial0 2 * ] ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reverse [ slice [ filter a [ partial1 b < ] ] c d ] ]
[ head [ slice [ filter a [ partial1 b > ] ] c d ] ]
[ reduce [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] 0 [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] ] 1000000000 min ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ reduce [ map [ range 0 [ len [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] ] ] [ lambda1 [ == [ deref [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] arg1 ] [ deref [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] [ - [ - [ len [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ reverse [ filter [ map a [ partial1 b + ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ filter a [ partial1 b < ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ digits c ] ] ] [ deref [ digits c ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ range 1 [ + [ reduce [ map [ range 0 [ min [ len a ] [ len [ map c [ partial1 b + ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map c [ partial1 b + ] ] arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ]
[ reduce [ map [ range 0 [ min [ len [ slice a 0 [ / [ len a ] 2 ] ] ] [ len [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] ] [ lambda1 [ if [ > [ deref [ slice a 0 [ / [ len a ] 2 ] ] arg1 ] [ deref [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reverse [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial1 b * ] ] ]
[ / [ reduce [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] square ] 0 + ] [ len [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] square ] ] ]
[ floor [ sqrt [ + [ * [ - a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len d ] ] [ deref d arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] [ - a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len d ] ] [ deref d arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ] [ * [ - b [ floor [ sqrt [ + [ * [ - f h ] [ - f h ] ] [ * [ - g i ] [ - g i ] ] ] ] ] ] [ - b [ floor [ sqrt [ + [ * [ - f h ] [ - f h ] ] [ * [ - g i ] [ - g i ] ] ] ] ] ] ] ] ] ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ * c b ] ] 0 + ]
[ + [ * [ - a [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] c ] ] [ - a [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] c ] ] ] [ * [ - b [ reduce [ range 0 [ + d 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] [ - b [ reduce [ range 0 [ + d 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] ] ]
[ slice [ slice a 0 [ / [ len a ] 2 ] ] [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] c ]
[ digits [ reduce [ range 0 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] ]
[ digits [ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ slice [ reverse [ reverse a ] ] 0 [ / [ len [ reverse [ reverse a ] ] ] 2 ] ]
[ digits [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] ] ]
[ reduce [ map [ digits a ] [ partial0 2 * ] ] 0 + ]
[ reduce [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] 0 + ]
[ filter [ slice [ digits a ] [ / [ len [ digits a ] ] 2 ] [ len [ digits a ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ deref [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ / [ len [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] 2 ] ]
[ reduce [ filter [ map [ reverse a ] square ] [ partial0 [ reduce [ map [ reverse a ] square ] 0 max ] > ] ] 0 max ]
[ range 1 [ reduce [ range 0 [ + [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ max a [ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ reduce [ slice [ reverse [ sort [ digits [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ] ] ] 0 b ] 0 + ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce [ slice [ reverse [ sort c ] ] 0 b ] 0 + ] ] 0 + ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ strlen a ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ range 1 [ + [ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 + ] 1 ] ]
[ map a [ partial1 [ deref b [ / [ len b ] 2 ] ] * ] ]
[ reduce [ reverse [ digits [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 max ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ slice [ filter a [ combine ! is_prime ] ] b [ min c d ] ]
[ reduce [ map [ range 0 [ len [ slice a [ / [ reduce b 0 + ] [ len b ] ] c ] ] ] [ lambda1 [ == [ deref [ slice a [ / [ reduce b 0 + ] [ len b ] ] c ] arg1 ] [ deref [ slice a [ / [ reduce b 0 + ] [ len b ] ] c ] [ - [ - [ len [ slice a [ / [ reduce b 0 + ] [ len b ] ] c ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ min [ strlen a ] [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] ]
[ range 0 [ reduce [ slice [ sort a ] 0 [ deref b [ / [ len b ] 2 ] ] ] 0 + ] ]
[ reverse [ map a [ partial1 b + ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ is_sorted [ map [ map a [ partial0 2 * ] ] [ partial1 b - ] ] ]
[ + a [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ]
[ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ reduce [ map [ slice d b c ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] [ partial0 2 * ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ map a [ partial1 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] * ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ range 0 [ min [ len [ filter [ range 0 [ + a 1 ] ] [ partial1 b > ] ] ] [ len c ] ] ] [ lambda1 [ if [ < [ deref [ filter [ range 0 [ + a 1 ] ] [ partial1 b > ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ / [ reduce d 0 + ] [ len d ] ] ] [ - b [ / [ reduce d 0 + ] [ len d ] ] ] ] ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ filter a [ partial1 [ deref b [ / [ len b ] 2 ] ] < ] ]
[ map a [ partial1 [ + [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ < [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] + ] ]
[ range 0 [ + [ reduce [ slice [ reverse [ sort [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] 0 c ] 0 + ] 1 ] ]
[ reduce [ map [ range 0 [ min [ len [ slice [ range 0 a ] 0 [ / [ len [ range 0 a ] ] 2 ] ] ] [ len b ] ] ] [ lambda1 [ if [ < [ deref [ slice [ range 0 a ] 0 [ / [ len [ range 0 a ] ] 2 ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ > [ reduce [ map a [ partial1 b + ] ] 1000000000 min ] c ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ filter a [ partial1 [ strlen b ] > ] ] 0 max ]
[ min [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] c ]
[ reduce [ slice [ sort [ map a [ partial1 b * ] ] ] 0 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] 0 + ]
[ reverse [ slice a 0 [ / [ len a ] 2 ] ] ]
[ filter a [ partial1 [ - [ reduce [ map c [ partial1 b - ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] < ] ]
[ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ partial1 [ reduce [ slice [ reverse [ sort c ] ] 0 b ] 0 + ] < ] ]
[ reduce [ filter a [ lambda1 [ reduce [ map [ slice b 0 [ / [ len b ] 2 ] ] [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ digits [ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ map [ filter a [ lambda1 [ reduce [ map [ map b [ partial0 2 * ] ] [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ filter [ slice b [ / [ len b ] 2 ] [ len b ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ filter [ slice b [ / [ len b ] 2 ] [ len b ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ reverse a ] [ partial1 b < ] ]
[ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] ] ]
[ reduce [ map [ filter a is_prime ] [ partial1 b + ] ] 0 max ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ]
[ range 0 [ + a 1 ] ]
[ - [ reduce [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ floor [ sqrt [ + [ * [ - a [ min c d ] ] [ - a [ min c d ] ] ] [ * [ - b [ reduce [ slice [ reverse [ sort e ] ] 0 f ] 0 + ] ] [ - b [ reduce [ slice [ reverse [ sort e ] ] 0 f ] 0 + ] ] ] ] ] ]
[ map [ filter [ range 0 [ len [ map [ slice a b c ] [ partial1 d + ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ map [ slice a b c ] [ partial1 d + ] ] int-deref ] ]
[ reduce [ map [ range 0 [ min [ len [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] [ len b ] ] ] [ lambda1 [ if [ < [ deref [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ filter a [ partial1 b > ] ] 0 max ] ]
[ reduce [ filter [ digits [ head a ] ] [ partial0 [ reduce [ digits [ head a ] ] 0 max ] > ] ] 0 max ]
[ reduce [ filter a [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] < ] ] 0 max ]
[ map a [ partial1 [ head [ digits b ] ] + ] ]
[ reduce [ filter [ map [ filter [ range 0 [ len [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] int-deref ] ] [ partial0 [ reduce [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] 0 max ] > ] ] 0 max ]
[ filter [ range 0 [ + [ deref a [ / [ len a ] 2 ] ] 1 ] ] [ partial1 b > ] ]
[ > [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] [ / [ reduce b 0 + ] [ len b ] ] ]
[ filter [ range 1 [ + a 1 ] ] [ partial1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] < ] ]
[ map [ digits [ reduce [ slice [ sort a ] 0 b ] 0 + ] ] [ partial1 c - ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ]
[ reverse [ filter [ filter a is_prime ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter [ reverse a ] [ partial1 [ reduce [ slice [ sort c ] 0 b ] 0 + ] < ] ]
[ floor [ sqrt [ + [ * [ - a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] ] [ - a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] ] ] [ * [ - b [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 d * ] ] ] ] ] ] [ - b [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 d * ] ] ] ] ] ] ] ] ] ]
[ reduce [ map [ range 0 [ len [ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] ] [ lambda1 [ == [ deref [ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] arg1 ] [ deref [ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] [ - [ - [ len [ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ reverse [ range 1 b ] ] ] ] [ deref [ reverse [ range 1 b ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ slice a [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] b ] c ]
[ - [ reduce [ range 1 [ + [ deref a [ / [ len a ] 2 ] ] 1 ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ filter [ slice d b c ] [ lambda1 [ reduce [ map d [ partial0 arg1 == ] ] false || ] ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ filter [ slice d b c ] [ lambda1 [ reduce [ map d [ partial0 arg1 == ] ] false || ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ + a [ max c [ deref b [ / [ len b ] 2 ] ] ] ]
[ floor [ sqrt [ + [ * [ - [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] c ] [ - [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] c ] ] [ * [ - b d ] [ - b d ] ] ] ] ]
[ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ]
[ slice [ map a [ partial0 2 * ] ] b [ min c d ] ]
[ min a [ deref [ map c [ partial1 b - ] ] [ / [ len [ map c [ partial1 b - ] ] ] 2 ] ] ]
[ floor [ sqrt [ + [ * [ - [ max a b ] d ] [ - [ max a b ] d ] ] [ * [ - c [ reduce e 1000000000 min ] ] [ - c [ reduce e 1000000000 min ] ] ] ] ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ map [ map [ map a [ partial1 b - ] ] square ] [ partial1 c + ] ]
[ * [ head [ filter a [ partial1 b < ] ] ] c ]
[ map [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] square ]
[ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len a ] [ len [ reverse b ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ reverse b ] arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ digits [ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ filter [ map [ filter [ range 0 [ len [ reverse a ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ reverse a ] int-deref ] ] [ partial0 [ reduce [ map [ filter [ range 0 [ len [ reverse a ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ reverse a ] int-deref ] ] 0 max ] > ] ] 0 max ]
[ filter [ reverse [ reverse a ] ] [ partial1 b > ] ]
[ reduce [ map [ range 0 [ min [ len [ filter a [ combine ! is_prime ] ] ] [ len b ] ] ] [ lambda1 [ if [ < [ deref [ filter a [ combine ! is_prime ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ deref [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ / [ len [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] 2 ] ]
[ - [ reduce [ slice a b [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ filter a [ lambda1 [ reduce [ map [ range 0 [ + b 1 ] ] [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ floor [ sqrt [ + [ * [ - a [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ] [ - a [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ] ] [ * [ - b [ / [ reduce e 0 + ] [ len e ] ] ] [ - b [ / [ reduce e 0 + ] [ len e ] ] ] ] ] ] ]
[ digits [ strlen [ reduce a "z" str_min ] ] ]
[ deref [ sort [ filter [ map a square ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] [ / [ len [ filter [ map a square ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] 2 ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ range 0 [ + [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ reduce [ map [ range 0 [ len [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] ] ] [ lambda1 [ == [ deref [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] arg1 ] [ deref [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] [ - [ - [ len [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] + ] ] ] ]
[ reduce [ reverse [ digits [ deref [ sort [ map a square ] ] [ / [ len [ map a square ] ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial0 2 * ] ] 0 max ]
[ is_sorted [ filter a [ partial1 [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] < ] ] ]
[ filter a [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] > ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ reduce [ digits [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] ] 1000000000 min ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] square ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] square ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ range 0 [ + [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] square ]
[ filter [ digits a ] [ partial1 [ reduce [ slice [ sort c ] 0 b ] 0 + ] > ] ]
[ reverse [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ filter [ filter a [ partial1 [ head b ] > ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ map a [ partial1 [ reduce [ range 0 [ + [ reduce [ slice [ sort c ] 0 b ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] + ] ]
[ map [ range 0 a ] [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] + ] ]
[ + a [ reduce [ reverse [ digits [ head c ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ combine ! is_prime ] ]
[ reduce [ filter a [ lambda1 [ reduce [ map [ slice d b c ] [ partial0 arg1 == ] ] false || ] ] ] 0 max ]
[ filter [ reverse a ] [ lambda1 [ reduce [ map [ slice e b c ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ filter [ filter [ filter a [ partial1 b < ] ] [ partial1 c < ] ] [ partial0 [ reduce [ filter [ filter a [ partial1 b < ] ] [ partial1 c < ] ] 0 max ] > ] ] 0 max ]
[ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ reduce [ range 0 [ + [ reduce [ slice [ sort d ] 0 e ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] [ - b [ reduce [ range 0 [ + [ reduce [ slice [ sort d ] 0 e ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] ] ] ] ]
[ deref [ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] [ / [ len [ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] 2 ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ slice a 0 [ / [ len a ] 2 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ range 0 [ + [ reduce [ slice [ reverse [ sort a ] ] 0 [ deref [ sort b ] [ / [ len b ] 2 ] ] ] 0 + ] 1 ] ]
[ - [ reduce [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] square ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ reverse [ digits [ reduce [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1000000000 min ] < ] ] 1000000000 min ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ len [ map a [ partial1 [ deref b [ / [ len b ] 2 ] ] + ] ] ]
[ deref [ sort [ map [ map a [ partial1 b - ] ] square ] ] [ / [ len [ map [ map a [ partial1 b - ] ] square ] ] 2 ] ]
[ digits [ reduce [ map [ range 0 [ min [ len [ slice a 0 [ / [ len a ] 2 ] ] ] [ len b ] ] ] [ lambda1 [ if [ < [ deref [ slice a 0 [ / [ len a ] 2 ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ range 0 [ min [ len [ reverse [ digits a ] ] ] [ len b ] ] ] [ lambda1 [ if [ < [ deref [ reverse [ digits a ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ map a [ partial1 [ reduce [ range 0 [ + [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] + ] ]
[ reduce [ range 1 [ + a 1 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ map c [ partial1 b - ] ] ] ] [ deref [ map c [ partial1 b - ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ > [ deref a [ / [ len a ] 2 ] ] [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] b ] ]
[ slice [ map a [ partial1 b - ] ] c [ strlen d ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ head [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ reverse [ digits [ reduce [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ deref d [ / [ len d ] 2 ] ] ] [ - b [ deref d [ / [ len d ] 2 ] ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ map [ range 0 [ min [ len a ] [ len [ range 0 b ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ range 0 b ] arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ map [ filter [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 2 * ] ]
[ reduce [ map [ range 0 [ min [ len [ filter [ range 1 a ] [ partial1 b < ] ] ] [ len c ] ] ] [ lambda1 [ if [ > [ deref [ filter [ range 1 a ] [ partial1 b < ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ map a [ partial0 2 * ] ] 0 max ] ]
[ filter [ digits [ reduce a 1000000000 min ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ digits [ reduce [ range 0 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ - [ reduce [ range 0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ deref [ map [ map a [ partial0 2 * ] ] [ partial1 b - ] ] [ / [ len [ map [ map a [ partial0 2 * ] ] [ partial1 b - ] ] ] 2 ] ]
[ reverse [ filter [ slice a b c ] [ lambda1 [ reduce [ map e [ partial0 arg1 == ] ] false || ] ] ] ]
[ map [ slice [ slice a b c ] 0 [ / [ len [ slice a b c ] ] 2 ] ] square ]
[ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len [ reverse a ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ reverse a ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ filter [ filter a [ partial1 b > ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ range 0 [ + [ reduce [ filter [ slice a b c ] [ partial0 [ reduce [ slice a b c ] 0 max ] > ] ] 0 max ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ filter b [ combine ! is_prime ] ] square ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map [ filter b [ combine ! is_prime ] ] square ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ digits [ reduce [ map [ range 0 [ min [ len [ reverse a ] ] [ len b ] ] ] [ lambda1 [ if [ < [ deref [ reverse a ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ reduce [ reverse [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ - [ reduce [ slice a b [ reduce [ slice [ sort c ] 0 d ] 0 + ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ range 0 [ + [ reduce [ slice a [ / [ len a ] 2 ] [ len a ] ] 1000000000 min ] 1 ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ > [ reduce [ slice a [ / [ len a ] 2 ] [ len a ] ] 1000000000 min ] 0 ]
[ reduce [ filter [ map a [ partial1 [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ > [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] * ] ] [ partial0 [ reduce [ map a [ partial1 [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ > [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] * ] ] 0 max ] > ] ] 0 max ]
[ map [ filter a [ lambda1 [ reduce [ map [ map b [ partial0 2 * ] ] [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] ]
[ < [ - [ reduce [ slice a b c ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ]
[ filter [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ]
[ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ reduce [ filter d [ partial0 [ reduce d 0 max ] > ] ] 0 max ] ] [ - b [ reduce [ filter d [ partial0 [ reduce d 0 max ] > ] ] 0 max ] ] ] ]
[ < [ head a ] b ]
[ filter [ filter [ reverse a ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ head [ filter a [ partial1 [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] < ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ slice b [ / [ len b ] 2 ] [ len b ] ] square ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ map [ slice b [ / [ len b ] 2 ] [ len b ] ] square ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ map [ map a [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] * ] ] [ partial0 2 * ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ]
[ reverse [ slice [ slice a b c ] 0 [ / [ len [ slice a b c ] ] 2 ] ] ]
[ max [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ is_sorted [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ combine ! is_prime ] ] ]
[ filter a [ lambda1 [ reduce [ map [ slice d b c ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ filter d [ partial1 [ max c b ] > ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ filter d [ partial1 [ max c b ] > ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ digits [ head a ] ]
[ head [ filter a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] < ] ] ]
[ min [ + a b ] [ reduce [ slice [ sort c ] 0 d ] 0 + ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ]
[ reverse [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ filter a [ partial1 [ deref b [ / [ len b ] 2 ] ] < ] ]
[ map [ filter [ range 0 [ len [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] square ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] square ] int-deref ] ]
[ reduce [ filter [ map [ filter a [ combine ! is_prime ] ] square ] [ partial0 [ reduce [ map [ filter a [ combine ! is_prime ] ] square ] 1000000000 min ] < ] ] 1000000000 min ]
[ filter [ digits a ] [ lambda1 [ reduce [ map [ filter c [ partial1 b < ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ partial1 b < ] ]
[ is_sorted [ slice [ reverse a ] b c ] ]
[ head [ filter a [ partial1 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] < ] ] ]
[ reduce [ filter [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ reduce [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ head [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ filter [ reverse [ range 1 [ + a 1 ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ deref [ filter [ reverse a ] [ partial1 b < ] ] [ / [ len [ filter [ reverse a ] [ partial1 b < ] ] ] 2 ] ]
[ map [ range 0 [ reduce a 0 max ] ] square ]
[ digits [ head a ] ]
[ is_sorted [ slice a b [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ deref [ sort [ map a [ partial1 b * ] ] ] [ / [ len [ map a [ partial1 b * ] ] ] 2 ] ] ]
[ map a [ partial1 b - ] ]
[ map [ filter [ slice a b c ] [ partial1 d < ] ] [ partial0 2 * ] ]
[ reduce [ reverse [ digits [ head [ map a square ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ reverse [ digits [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ digits b ] ] ] [ deref [ digits b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map [ map [ filter [ range 0 [ len [ slice a 0 [ / [ len a ] 2 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ slice a 0 [ / [ len a ] 2 ] ] int-deref ] ] [ partial0 2 * ] ]
[ - [ reduce [ slice a b [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ map [ range 0 [ min [ len a ] [ len [ range 0 b ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ range 0 b ] arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ reduce [ slice [ reverse [ sort [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] 0 c ] 0 + ]
[ slice [ map a [ partial0 2 * ] ] b [ reduce [ filter c [ partial0 [ reduce c 0 max ] > ] ] 0 max ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reverse [ map [ map a square ] [ partial0 2 * ] ] ]
[ filter [ filter a [ partial1 b < ] ] [ partial1 [ reduce [ filter c [ partial0 [ reduce c 1000000000 min ] < ] ] 1000000000 min ] < ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ range 0 [ len [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] [ lambda1 [ == [ deref [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] arg1 ] [ deref [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ - [ - [ len [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ filter [ slice a b c ] [ lambda1 [ reduce [ map [ filter e [ lambda1 [ reduce [ map f [ partial0 arg1 == ] ] false || ] ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ filter [ map a [ partial1 b - ] ] [ partial0 [ reduce [ map a [ partial1 b - ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ filter a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] < ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] square ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] square ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ head [ slice a b [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] c ] ] ]
[ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ partial1 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] < ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ reverse [ filter c [ partial1 b < ] ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ reverse [ filter c [ partial1 b < ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ deref [ sort [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] ]
[ reduce [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] b c ] 0 max ]
[ head [ map a [ partial1 [ strlen b ] * ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reverse [ filter [ reverse a ] [ partial1 b > ] ] ]
[ map [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c - ] ] [ partial1 d - ] ]
[ digits [ strlen a ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ > a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ max c b ] ] ]
[ slice a [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ < [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] [ reduce e 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len f ] ] [ deref f arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ - [ reduce [ range 1 [ head a ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ filter [ map [ map a square ] [ partial0 2 * ] ] [ partial0 [ reduce [ map [ map a square ] [ partial0 2 * ] ] 0 max ] > ] ] 0 max ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ <= [ strlen [ reduce a "" str_max ] ] b ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ map [ map a [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] + ] ] [ partial1 c - ] ]
[ slice [ reverse [ reverse a ] ] 0 [ / [ len [ reverse [ reverse a ] ] ] 2 ] ]
[ head [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] is_prime ] ]
[ head [ filter [ range 1 [ + a 1 ] ] is_prime ] ]
[ reduce [ filter [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 b - ] ] [ partial0 [ reduce [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 b - ] ] 0 max ] > ] ] 0 max ]
[ map [ map a [ partial1 [ strlen b ] + ] ] square ]
[ range 1 [ + [ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ]
[ slice a b [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ filter [ filter a [ combine ! is_prime ] ] [ partial0 [ reduce [ filter a [ combine ! is_prime ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ combine ! is_prime ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map a [ partial1 b - ] ]
[ map [ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ partial0 2 * ] ] [ partial0 2 * ] ]
[ filter [ range 1 [ + [ head a ] 1 ] ] is_prime ]
[ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ partial1 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] < ] ]
[ deref [ sort [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] square ] ] [ / [ len [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] square ] ] 2 ] ]
[ range 0 [ reduce [ slice [ sort a ] 0 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] 0 + ] ]
[ map [ slice [ digits a ] 0 [ / [ len [ digits a ] ] 2 ] ] [ partial1 b * ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ reduce [ filter d [ partial0 [ reduce d 0 max ] > ] ] 0 max ] ] [ - b [ reduce [ filter d [ partial0 [ reduce d 0 max ] > ] ] 0 max ] ] ] ] ] ] ]
[ reduce [ map [ range 0 [ len [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] ] ] [ lambda1 [ == [ deref [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] arg1 ] [ deref [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] [ - [ - [ len [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ map [ slice [ digits a ] [ / [ len [ digits a ] ] 2 ] [ len [ digits a ] ] ] [ partial0 2 * ] ]
[ filter [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] is_prime ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ reduce [ map a square ] 0 + ]
[ reverse [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] ]
[ reduce [ range 0 [ + [ reduce [ digits a ] 0 max ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len [ map a [ partial1 b - ] ] ] [ len c ] ] ] [ lambda1 [ if [ > [ deref [ map a [ partial1 b - ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ digits [ strlen a ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ floor [ sqrt [ + [ * [ - [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] h ] [ - [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] d ] ] [ * [ - c [ floor [ sqrt [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] [ - c [ floor [ sqrt [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] ] ] ] ]
[ digits [ reduce [ map [ range 0 [ min [ len a ] [ len [ map c [ partial1 b + ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map c [ partial1 b + ] ] arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ reduce [ slice [ sort a ] 0 [ reduce [ reverse [ digits [ reduce d 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 + ]
[ slice [ range 0 [ reduce [ slice [ sort a ] 0 b ] 0 + ] ] 0 [ / [ len [ range 0 [ reduce [ slice [ sort a ] 0 b ] 0 + ] ] ] 2 ] ]
[ reduce [ reverse [ digits [ reduce [ filter [ filter a [ partial1 b < ] ] [ partial0 [ reduce [ filter a [ partial1 b < ] ] 0 max ] > ] ] 0 max ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ <= [ - [ reduce [ range 0 [ + a 1 ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 0 ]
[ digits [ head [ reverse a ] ] ]
[ range 0 [ - [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ reduce [ filter [ filter [ filter a [ partial1 b < ] ] [ combine ! is_prime ] ] [ partial0 [ reduce [ filter [ filter a [ partial1 b < ] ] [ combine ! is_prime ] ] 0 max ] > ] ] 0 max ]
[ reduce [ range 0 [ + [ min a [ reduce [ slice [ reverse [ sort c ] ] 0 b ] 0 + ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ range 1 [ len a ] ]
[ reduce [ reverse [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ filter a [ lambda1 [ reduce [ map [ map [ range 0 [ + b 1 ] ] square ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ slice [ sort a ] 0 [ reduce [ reverse [ digits [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 + ]
[ reduce [ range 0 [ + [ max a [ reduce [ slice [ sort c ] 0 b ] 0 + ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ slice [ range 1 [ strlen a ] ] 0 [ / [ len [ range 1 [ strlen a ] ] ] 2 ] ]
[ >= [ - [ reduce [ range 0 [ + a 1 ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] b ]
[ head [ slice [ digits a ] 0 [ / [ len [ digits a ] ] 2 ] ] ]
[ filter [ slice [ digits a ] 0 [ / [ len [ digits a ] ] 2 ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ len [ filter [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial1 b < ] ] ]
[ slice a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ]
[ digits [ strlen a ] ]
[ reverse [ filter [ map a [ partial1 b * ] ] [ partial1 c > ] ] ]
[ filter a [ partial1 [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] < ] ]
[ range 0 [ reduce [ reverse [ digits [ + a b ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ map [ reverse a ] square ] 0 max ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ digits [ reduce [ range 0 [ + [ reduce a 0 max ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ reverse [ reverse [ filter a [ partial1 b > ] ] ] ]
[ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len a ] [ len [ map c [ partial1 b + ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ map c [ partial1 b + ] ] arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ / [ reduce [ digits [ reduce a 1000000000 min ] ] 0 + ] [ len [ digits [ reduce a 1000000000 min ] ] ] ]
[ map [ filter a [ lambda1 [ reduce [ map [ slice b 0 [ / [ len b ] 2 ] ] [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ]
[ < [ / [ reduce a 0 + ] [ len a ] ] b ]
[ map [ filter a [ lambda1 [ reduce [ map [ map b [ partial0 2 * ] ] [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ]
[ reduce [ slice [ sort [ map a [ partial0 2 * ] ] ] 0 b ] 0 + ]
[ filter a [ lambda1 [ reduce [ map [ map [ filter [ range 0 [ len [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] int-deref ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ < a [ deref b [ / [ len b ] 2 ] ] ]
[ reduce [ map [ range 0 [ len [ slice a [ head b ] c ] ] ] [ lambda1 [ == [ deref [ slice a [ head b ] c ] arg1 ] [ deref [ slice a [ head b ] c ] [ - [ - [ len [ slice a [ head b ] c ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ <= a [ reduce [ filter [ range 0 b ] [ partial0 [ reduce [ range 0 b ] 0 max ] > ] ] 0 max ] ]
[ map [ digits [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] [ partial1 c + ] ]
[ slice a [ strlen b ] [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ digits [ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] 0 + ] ]
[ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len d ] ] [ deref d arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] - ] ]
[ max [ reduce [ slice [ sort a ] 0 b ] 0 + ] c ]
[ range 0 [ + [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ min d e ] ] [ - b [ min d e ] ] ] ] ] ] ] 1 ] ]
[ + [ * [ - a [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] [ - a [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] ] [ * [ - [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] h ] [ - [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] h ] ] ]
[ filter [ range 0 [ + [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ floor [ sqrt [ + [ * [ - [ reduce a 1000000000 min ] c ] [ - [ reduce a 1000000000 min ] c ] ] [ * [ - [ reduce b 1000000000 min ] d ] [ - [ reduce b 1000000000 min ] d ] ] ] ] ]
[ reduce [ slice [ sort [ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial0 2 * ] ] ] 0 b ] 0 + ]
[ reduce [ filter [ filter [ reverse a ] is_prime ] [ partial0 [ reduce [ filter [ reverse a ] is_prime ] 1000000000 min ] < ] ] 1000000000 min ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ reverse [ digits [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ head [ map [ filter [ range 0 [ len [ filter a is_prime ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ filter a is_prime ] int-deref ] ] ]
[ reverse [ slice a 0 [ / [ len a ] 2 ] ] ]
[ * [ reduce [ slice [ sort a ] 0 b ] 0 + ] [ head c ] ]
[ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ slice e f c ] ] ] [ deref [ slice e f c ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ filter [ reverse a ] [ partial1 [ head b ] < ] ]
[ min [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ digits [ reduce [ range 0 [ + [ head a ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ reduce [ range 0 [ + [ reduce [ filter [ map a [ partial1 b - ] ] [ partial0 [ reduce [ map a [ partial1 b - ] ] 0 max ] > ] ] 0 max ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ floor [ sqrt [ + [ * [ - [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ] [ - [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ] ] [ * [ - c [ deref e [ / [ len e ] 2 ] ] ] [ - c [ deref e [ / [ len e ] 2 ] ] ] ] ] ] ]
[ reduce [ map [ range 0 [ len [ map a [ partial1 [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] - ] ] ] ] [ lambda1 [ == [ deref [ map a [ partial1 [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] - ] ] arg1 ] [ deref [ map a [ partial1 [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] - ] ] [ - [ - [ len [ map a [ partial1 [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] - ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ filter [ filter a [ lambda1 [ reduce [ map [ map [ filter [ range 0 [ len b ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 b int-deref ] ] [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ reverse b ] ] ] [ deref [ reverse b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ is_sorted [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c > ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ reverse [ digits [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ map [ slice a [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] d ] square ]
[ reduce [ reverse [ digits [ len a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ]
[ range 0 [ + [ + a [ deref b [ / [ len b ] 2 ] ] ] 1 ] ]
[ head [ slice [ digits a ] 0 [ / [ len [ digits a ] ] 2 ] ] ]
[ slice a [ strlen [ reduce [ map [ str_split b " " ] [ partial0 0 str_index ] ] "" str_concat ] ] c ]
[ reverse [ slice a 0 [ / [ len a ] 2 ] ] ]
[ max a [ reduce [ reverse [ digits [ reduce [ slice [ reverse [ sort d ] ] 0 b ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ head [ filter [ filter a [ partial1 b > ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ]
[ map [ map a [ partial1 b * ] ] [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len d ] ] [ deref d arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] * ] ]
[ reduce [ slice [ sort [ slice a b c ] ] 0 [ reduce [ range 0 [ + e 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] 0 + ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ slice [ sort [ filter a [ partial1 b > ] ] ] 0 [ reduce c 0 + ] ] 0 + ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ floor [ sqrt [ + [ * [ - a [ reduce [ filter d [ partial0 [ reduce d 1000000000 min ] < ] ] 1000000000 min ] ] [ - a [ reduce [ filter d [ partial0 [ reduce d 1000000000 min ] < ] ] 1000000000 min ] ] ] [ * [ - [ max c b ] e ] [ - [ max c b ] e ] ] ] ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ reduce [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] 1000000000 min ]
[ is_sorted [ map a [ partial1 [ head b ] - ] ] ]
[ reduce [ range 0 [ + [ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ + [ * a b ] [ reduce c 0 max ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ filter [ digits a ] [ partial0 [ reduce [ digits a ] 1000000000 min ] < ] ] 1000000000 min ]
[ <= [ strlen [ reduce a "" str_max ] ] b ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reverse [ range 0 [ + [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] 1 ] ] ]
[ map [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] square ]
[ filter [ digits [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ filter [ filter a [ lambda1 [ reduce [ map [ slice e b c ] [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ range 0 [ strlen [ reduce a "" str_concat ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ slice a [ / [ len a ] 2 ] [ len a ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ]
[ filter [ map [ filter a [ partial1 b < ] ] [ partial0 2 * ] ] [ partial1 c < ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ reduce [ reverse [ digits [ deref [ sort [ map a square ] ] [ / [ len [ map a square ] ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ head [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ reduce [ range 0 [ + [ strlen [ reduce a "z" str_min ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ head [ map a [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] * ] ] ]
[ map [ digits [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] ] [ partial0 2 * ] ]
[ range 0 [ + [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 1 ] ]
[ slice [ reverse a ] [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] c ]
[ reduce [ range 0 [ + [ reduce [ range 0 [ + [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ reduce [ slice [ sort [ filter a is_prime ] ] 0 [ max c b ] ] 0 + ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ floor [ sqrt [ + [ * [ - a d ] [ - a d ] ] [ * [ - [ min c b ] e ] [ - [ min c b ] e ] ] ] ] ]
[ floor [ sqrt [ + [ * [ - [ deref [ sort a ] [ / [ len a ] 2 ] ] c ] [ - [ deref [ sort a ] [ / [ len a ] 2 ] ] c ] ] [ * [ - b [ strlen d ] ] [ - b [ strlen d ] ] ] ] ] ]
[ reverse [ map [ digits a ] [ partial0 2 * ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ range 0 [ + [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ digits [ reduce [ map [ range 0 [ min [ len a ] [ len [ slice e b c ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ slice e b c ] arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ reduce [ slice a b c ] 1000000000 min ]
[ digits [ reduce [ range 0 [ + [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ filter [ slice a b c ] [ lambda1 [ reduce [ map d [ partial0 arg1 == ] ] false || ] ] ]
[ map [ range 1 [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] square ]
[ reduce [ range 0 [ + [ max a [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ reduce [ range 0 [ + [ strlen [ reduce a "z" str_min ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ < [ reduce [ digits a ] 1000000000 min ] 1 ]
[ range 1 [ reduce [ map [ range 0 [ min [ len a ] [ len [ filter b [ combine ! is_prime ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ filter b [ combine ! is_prime ] ] arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ filter [ filter a [ lambda1 [ reduce [ map [ slice d b c ] [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ digits [ strlen a ] ]
[ slice [ reverse a ] [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ]
[ digits [ strlen a ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] * ] ] ] ] ]
[ filter a [ partial1 [ reduce b 1000000000 min ] > ] ]
[ filter a [ partial1 [ min c [ deref b [ / [ len b ] 2 ] ] ] < ] ]
[ + [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] c ]
[ range 1 [ reduce [ reverse [ digits [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] + ] ] ] ]
[ * [ deref [ sort a ] [ / [ len a ] 2 ] ] [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] ]
[ max [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ digits b ] ] ] [ deref [ digits b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] c ]
[ reduce [ range 0 [ + [ reduce [ range 0 [ + [ min a b ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ + a [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ]
[ max [ strlen [ reduce a "z" str_min ] ] b ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ filter [ slice a b [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] c ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map [ reverse [ range 0 [ + a 1 ] ] ] [ partial0 2 * ] ]
[ reverse [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] < ] ]
[ digits [ reduce [ map [ range 0 [ min [ len [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] [ len c ] ] ] [ lambda1 [ if [ < [ deref [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ map [ filter [ filter a [ partial1 b > ] ] [ partial1 c > ] ] square ]
[ head [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map [ range 1 [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] square ]
[ deref [ sort [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] ]
[ filter [ filter [ map a [ partial1 b - ] ] [ combine ! is_prime ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ reduce [ reverse [ digits [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 max ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ reduce [ map [ slice e b c ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ <= [ deref [ digits a ] [ / [ len [ digits a ] ] 2 ] ] 1 ]
[ - [ reduce [ range 0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ floor [ sqrt [ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce [ slice [ sort c ] 0 b ] 0 + ] [ reduce [ filter e [ partial0 [ reduce e 1000000000 min ] < ] ] 1000000000 min ] ] [ - [ reduce [ slice [ sort c ] 0 b ] 0 + ] [ reduce [ filter e [ partial0 [ reduce e 1000000000 min ] < ] ] 1000000000 min ] ] ] ] ] ]
[ map [ filter [ filter a is_prime ] [ partial1 b < ] ] [ partial0 2 * ] ]
[ map [ range 1 [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] [ partial0 2 * ] ]
[ filter [ reverse a ] [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ digits [ reduce [ slice [ reverse [ sort a ] ] 0 [ * c b ] ] 0 + ] ]
[ + [ * [ - [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] [ - [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] ] [ * [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ]
[ head [ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ]
[ deref [ sort [ range 0 [ + a 1 ] ] ] [ / [ len [ range 0 [ + a 1 ] ] ] 2 ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ range 1 [ * a [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ]
[ map [ range 1 a ] [ partial1 [ head [ range 1 b ] ] + ] ]
[ range 1 [ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ range 0 [ + [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 d + ] ] ] ] ] [ - b [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 d + ] ] ] ] ] ] ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ map [ reverse a ] [ partial1 [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] - ] ]
[ reverse [ slice [ range 0 [ + a 1 ] ] [ / [ len [ range 0 [ + a 1 ] ] ] 2 ] [ len [ range 0 [ + a 1 ] ] ] ] ]
[ filter [ slice a b c ] [ lambda1 [ reduce [ map [ range 1 [ + e 1 ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ map [ map [ map a [ partial1 b - ] ] square ] [ partial1 c * ] ]
[ head [ slice [ map a [ partial0 2 * ] ] [ / [ len [ map a [ partial0 2 * ] ] ] 2 ] [ len [ map a [ partial0 2 * ] ] ] ] ]
[ filter [ filter [ filter a [ partial1 b < ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] [ partial1 d > ] ]
[ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ reverse [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ map [ range 1 [ reduce a 0 + ] ] [ partial1 b - ] ]
[ reverse [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ]
[ floor [ sqrt [ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] ] ] ] ]
[ reverse [ map [ digits a ] [ partial0 2 * ] ] ]
[ map [ slice a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] c ] square ]
[ deref [ digits [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] [ / [ len [ digits [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ] 2 ] ]
[ map [ filter [ range 0 [ len [ filter [ reverse a ] [ partial1 b < ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ filter [ reverse a ] [ partial1 b < ] ] int-deref ] ]
[ head [ map a [ partial1 b - ] ] ]
[ map [ filter [ range 1 a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c - ] ]
[ min [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] f ]
[ reduce [ filter [ filter a [ partial1 b > ] ] [ combine ! is_prime ] ] 1000000000 min ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reverse [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] ]
[ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 [ reduce [ slice [ sort c ] 0 b ] 0 + ] < ] ]
[ filter [ slice a b [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ lambda1 [ reduce [ map e [ partial0 arg1 == ] ] false || ] ] ]
[ + [ * [ - [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] d ] [ - [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] d ] ] [ * [ - c [ + [ * [ - f h ] [ - f h ] ] [ * [ - g i ] [ - g i ] ] ] ] [ - c [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ]
[ digits [ reduce [ filter [ reverse a ] [ partial0 [ reduce [ reverse a ] 0 max ] > ] ] 0 max ] ]
[ >= [ min a b ] 0 ]
[ + [ * [ - a e ] [ - a e ] ] [ * [ - [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ > [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] f ] [ - [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ > [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] f ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ range 0 [ + [ max a b ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ reduce [ slice [ sort [ range 1 a ] ] 0 [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 + ]
[ slice [ filter a [ partial1 b < ] ] 0 [ / [ len [ filter a [ partial1 b < ] ] ] 2 ] ]
[ reduce [ filter [ map [ filter a [ combine ! is_prime ] ] [ partial0 2 * ] ] [ partial0 [ reduce [ map [ filter a [ combine ! is_prime ] ] [ partial0 2 * ] ] 0 max ] > ] ] 0 max ]
[ digits [ reduce [ map [ range 0 [ min [ len [ slice a b c ] ] [ len e ] ] ] [ lambda1 [ if [ > [ deref [ slice a b c ] arg1 ] [ deref e arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ filter [ reverse [ map a [ partial1 b - ] ] ] [ partial1 c > ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] 0 + ] ]
[ map [ range 1 [ + [ head a ] 1 ] ] square ]
[ range 1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] ]
[ map [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] 0 [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] ] [ partial1 b + ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ min a [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ range 0 [ + [ reduce [ range 0 [ + [ head a ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] 1 ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] 0 + ] ]
[ map [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 b > ] ] [ partial1 c + ] ]
[ filter [ filter a [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] > ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reverse [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ * c b ] ] 0 + ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ max a [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] ]
[ reduce [ map [ range 0 [ min [ len [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] [ len b ] ] ] [ lambda1 [ if [ < [ deref [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ slice [ reverse [ sort [ digits [ deref a [ / [ len a ] 2 ] ] ] ] ] 0 b ] 0 + ]
[ map [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] [ partial0 2 * ] ]
[ min [ head [ map a [ partial0 2 * ] ] ] b ]
[ slice [ map a [ partial1 b * ] ] [ reduce [ map [ range 0 [ min [ len c ] [ len d ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ] e ]
[ filter [ slice a 0 [ / [ len a ] 2 ] ] [ lambda1 [ reduce [ map [ map c [ partial1 b + ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ range 0 [ + [ reduce [ filter [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ reduce [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] 0 max ] > ] ] 0 max ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ map [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] [ partial0 2 * ] ]
[ filter [ reverse [ filter a [ partial1 b > ] ] ] [ partial1 c > ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ map a [ partial1 [ reduce [ range 0 [ + [ reduce b 0 + ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] - ] ]
[ * [ reduce a 0 max ] [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] ]
[ map a [ partial1 b - ] ]
[ map [ map [ filter a [ partial1 b > ] ] square ] [ partial0 2 * ] ]
[ reduce [ slice [ sort [ reverse [ range 1 a ] ] ] 0 b ] 0 + ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ reverse [ digits [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ filter [ map [ map a [ partial1 b * ] ] [ partial1 c + ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ map [ reverse [ range 0 [ + a 1 ] ] ] [ partial1 b * ] ]
[ head [ filter a [ partial1 [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] < ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ digits [ + a [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] b ] ] ]
[ reduce [ range 0 [ + [ + [ * [ - a [ min c d ] ] [ - a [ min c d ] ] ] [ * [ - b e ] [ - b e ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ reduce [ reverse [ digits [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ deref [ range 1 [ deref a [ / [ len a ] 2 ] ] ] [ / [ len [ range 1 [ deref a [ / [ len a ] 2 ] ] ] ] 2 ] ]
[ reduce [ map [ range 0 [ len [ map [ filter [ range 0 [ len [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] int-deref ] ] ] ] [ lambda1 [ == [ deref [ map [ filter [ range 0 [ len [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] int-deref ] ] arg1 ] [ deref [ map [ filter [ range 0 [ len [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] ] [ lambda1 [
[ reduce [ range 0 [ + [ reduce [ reverse [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ deref [ filter a [ partial1 b > ] ] [ / [ len [ filter a [ partial1 b > ] ] ] 2 ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ reverse [ digits [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ filter [ range 0 [ + [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] [ partial1 b < ] ]
[ map [ filter [ range 0 [ len [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] square ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] square ] int-deref ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ range 0 [ + [ reduce [ map a [ partial1 b + ] ] 0 + ] 1 ] ]
[ reverse [ map a [ partial1 [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] b ] * ] ] ]
[ >= [ reduce [ filter [ reverse a ] [ partial0 [ reduce [ reverse a ] 1000000000 min ] < ] ] 1000000000 min ] 0 ]
[ + [ * [ - [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] g ] [ - [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] g ] ] [ * [ - f h ] [ - f h ] ] ]
[ filter [ map [ filter [ range 0 [ len [ filter a is_prime ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ filter a is_prime ] int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ digits [ + a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ]
[ filter a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ slice [ reverse [ sort c ] ] 0 b ] 0 + ] ] < ] ]
[ reduce [ digits [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 1000000000 min ]
[ reverse [ digits [ deref [ sort a ] [ / [ len a ] 2 ] ] ] ]
[ digits [ head a ] ]
[ reduce [ range 0 [ + [ reduce [ filter [ slice a b c ] [ partial0 [ reduce [ slice a b c ] 0 max ] > ] ] 0 max ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ head [ filter a [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] > ] ] ]
[ filter [ map a [ partial1 b + ] ] [ partial1 [ + [ * [ - f c ] [ - f c ] ] [ * [ - g d ] [ - g d ] ] ] < ] ]
[ filter [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] square ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ filter [ map a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] - ] ] [ partial1 c < ] ]
[ map [ filter [ filter a [ partial1 b < ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] square ]
[ filter [ reverse a ] [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ]
[ map [ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] [ partial1 c + ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ deref a [ / [ len a ] 2 ] ] ]
[ digits [ reduce [ filter a [ partial1 b > ] ] 0 max ] ]
[ / [ reduce [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] 0 + ] [ len [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ max a [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ digits b ] square ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map [ digits b ] square ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ deref [ digits [ reduce a 1000000000 min ] ] [ / [ len [ digits [ reduce a 1000000000 min ] ] ] 2 ] ]
[ floor [ sqrt [ + [ * [ - [ * a b ] d ] [ - [ * a b ] d ] ] [ * [ - c e ] [ - c e ] ] ] ] ]
[ + a [ reduce [ range 0 [ + [ reduce [ slice [ sort c ] 0 b ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ reduce [ filter [ slice [ reverse a ] b c ] [ partial0 [ reduce [ slice [ reverse a ] b c ] 0 max ] > ] ] 0 max ]
[ reduce [ map [ range 0 [ min [ len [ reverse a ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ reverse a ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter a [ partial1 [ deref b [ / [ len b ] 2 ] ] < ] ]
[ digits [ deref [ sort [ slice a 0 [ / [ len a ] 2 ] ] ] [ / [ len [ slice a 0 [ / [ len a ] 2 ] ] ] 2 ] ] ]
[ reduce [ reverse [ digits [ deref [ sort a ] [ / [ len a ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter [ slice [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] 0 [ / [ len [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] 2 ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ digits b ] ] ] [ deref [ digits b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ / [ reduce a 0 + ] [ len a ] ] * ] ] ] ] ]
[ filter [ map [ filter [ range 0 [ len [ reverse a ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ reverse a ] int-deref ] ] [ partial1 b > ] ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] d ] [ - [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] d ] ] ] ] ]
[ + [ * [ - [ deref [ sort a ] [ / [ len a ] 2 ] ] c ] [ - [ deref [ sort a ] [ / [ len a ] 2 ] ] c ] ] [ * [ - [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] d ] [ - [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] d ] ] ]
[ floor [ sqrt [ + [ * [ - a d ] [ - a d ] ] [ * [ - [ max c b ] e ] [ - [ max c b ] e ] ] ] ] ]
[ is_sorted [ map [ filter [ range 0 [ len [ map a [ partial1 b + ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ map a [ partial1 b + ] ] int-deref ] ] ]
[ reduce [ filter [ filter [ range 1 a ] [ partial1 b > ] ] [ partial0 [ reduce [ filter [ range 1 a ] [ partial1 b > ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ reduce [ slice [ sort [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] 0 [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 + ]
[ map [ range 1 [ + a 1 ] ] [ partial1 b - ] ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ slice [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] c [ reduce d 0 max ] ]
[ reduce [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] 1000000000 min ]
[ reduce [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ combine ! is_prime ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ reverse [ digits [ reduce [ reverse [ digits [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ range 0 [ reduce [ slice a [ / [ len a ] 2 ] [ len a ] ] 0 + ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter d [ lambda1 [ reduce [ map [ filter c [ partial1 b < ] ] [ partial0 arg1 == ] ] false || ] ] ] ] ] [ deref [ filter d [ lambda1 [ reduce [ map [ filter c [ partial1 b < ] ] [ partial0 arg1 == ] ] false || ] ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ filter a [ lambda1 [ reduce [ map [ map [ filter b [ combine ! is_prime ] ] [ partial0 2 * ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ reverse [ digits [ deref [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ / [ len [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter [ reverse a ] [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ]
[ head [ slice [ digits a ] 0 [ / [ len [ digits a ] ] 2 ] ] ]
[ * [ reduce [ reverse [ digits [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] f ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ slice [ reverse [ range 1 a ] ] [ / [ len [ reverse [ range 1 a ] ] ] 2 ] [ len [ reverse [ range 1 a ] ] ] ]
[ filter [ filter [ map a [ partial1 b - ] ] [ partial1 c > ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ head [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] ]
[ reduce [ range 1 [ + [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len f ] ] [ deref f arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ range 1 [ + [ head [ slice a b c ] ] 1 ] ]
[ digits [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] c ] ]
[ map [ filter [ range 0 [ len [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] square ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] square ] int-deref ] ]
[ map [ map [ filter a [ partial1 b > ] ] square ] [ partial0 2 * ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ]
[ digits [ deref [ sort [ slice a 0 [ / [ len a ] 2 ] ] ] [ / [ len [ slice a 0 [ / [ len a ] 2 ] ] ] 2 ] ] ]
[ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ partial1 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] < ] ]
[ range 0 [ * a [ head b ] ] ]
[ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ + [ * [ - a [ reduce [ filter c [ partial0 [ reduce c 1000000000 min ] < ] ] 1000000000 min ] ] [ - a [ reduce [ filter c [ partial0 [ reduce c 1000000000 min ] < ] ] 1000000000 min ] ] ] [ * [ - b [ strlen d ] ] [ - b [ strlen d ] ] ] ]
[ filter [ range 0 [ + a 1 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ map [ range 1 [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] ] [ partial0 2 * ] ]
[ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ + [ deref a [ / [ len a ] 2 ] ] [ deref [ sort b ] [ / [ len b ] 2 ] ] ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ filter [ slice [ slice a 0 [ / [ len a ] 2 ] ] 0 [ / [ len [ slice a 0 [ / [ len a ] 2 ] ] ] 2 ] ] [ partial0 [ reduce [ slice [ slice a 0 [ / [ len a ] 2 ] ] 0 [ / [ len [ slice a 0 [ / [ len a ] 2 ] ] ] 2 ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ map a [ partial1 [ reduce [ map [ range 0 [ min [ len d ] [ len [ filter b is_prime ] ] ] ] [ lambda1 [ if [ < [ deref d arg1 ] [ deref [ filter b is_prime ] arg1 ] ] 1 0 ] ] ] 0 + ] + ] ]
[ floor [ sqrt [ + [ * [ - [ deref a [ / [ len a ] 2 ] ] c ] [ - [ deref a [ / [ len a ] 2 ] ] c ] ] [ * [ - b [ min d e ] ] [ - b [ min d e ] ] ] ] ] ]
[ deref [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ / [ len [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] 2 ] ]
[ reduce [ range 0 [ + [ deref [ digits a ] [ / [ len [ digits a ] ] 2 ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ digits [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ reverse [ slice e b c ] ] ] ] [ deref [ reverse [ slice e b c ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ map [ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial0 2 * ] ] [ partial0 2 * ] ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ head [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] square ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map [ map [ slice a b c ] [ partial1 e + ] ] square ]
[ map [ filter [ range 0 [ len [ map a [ partial1 b * ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ map a [ partial1 b * ] ] int-deref ] ]
[ map [ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b - ] ] [ partial0 2 * ] ]
[ - [ reduce [ slice a b [ reduce [ slice [ sort c ] 0 d ] 0 + ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ slice a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] c ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ slice [ slice a 0 [ / [ len a ] 2 ] ] [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] c ]
[ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len [ digits a ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ digits a ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map [ range 1 [ + [ * a b ] 1 ] ] square ]
[ reduce [ slice [ sort [ reverse [ range 1 a ] ] ] 0 b ] 0 + ]
[ filter [ map a [ partial1 b + ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ * a [ reduce [ reverse [ digits [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ filter [ filter [ reverse a ] [ combine ! is_prime ] ] [ partial0 [ reduce [ filter [ reverse a ] [ combine ! is_prime ] ] 0 max ] > ] ] 0 max ]
[ digits [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ]
[ > [ - [ reduce [ range 0 [ + a 1 ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] b ]
[ reduce [ map [ range 0 [ len [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] ] ] [ lambda1 [ == [ deref [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] arg1 ] [ deref [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] [ - [ - [ len [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ reduce [ filter [ map a [ partial1 b - ] ] [ partial0 [ reduce [ map a [ partial1 b - ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ filter a [ lambda1 [ reduce [ map [ map [ reverse b ] [ partial0 2 * ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ digits [ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ slice [ sort a ] 0 [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ]
[ filter [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c > ] ]
[ reduce [ map [ range 0 [ min [ len [ filter a [ lambda1 [ reduce [ map [ range 0 [ + b 1 ] ] [ partial0 arg1 == ] ] false || ] ] ] ] [ len c ] ] ] [ lambda1 [ if [ < [ deref [ filter a [ lambda1 [ reduce [ map [ range 0 [ + b 1 ] ] [ partial0 arg1 == ] ] false || ] ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ filter a [ lambda1 [ reduce [ map [ map b square ] [ partial0 arg1 == ] ] false || ] ] ] 0 max ]
[ head [ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial0 2 * ] ] ]
[ filter [ slice a b c ] [ partial1 [ reduce [ filter d [ partial0 [ reduce d 1000000000 min ] < ] ] 1000000000 min ] > ] ]
[ range 1 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ map [ range 0 [ min [ len [ reverse a ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ reverse a ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ filter a [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] < ] ] 0 max ]
[ reduce [ reverse [ digits [ reduce [ slice [ sort [ digits a ] ] 0 b ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ reverse a ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ filter [ reverse [ slice a b c ] ] [ lambda1 [ reduce [ map e [ partial0 arg1 == ] ] false || ] ] ]
[ reverse [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] ]
[ slice a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ]
[ map [ map [ filter a [ partial1 b > ] ] square ] [ partial0 2 * ] ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] ] 0 + ]
[ filter [ slice a [ head b ] c ] is_prime ]
[ slice a [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] d ]
[ reduce [ range 0 [ + [ strlen [ reduce a "z" str_min ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ digits [ strlen a ] ]
[ filter [ map [ digits a ] [ partial0 2 * ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ digits [ min a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ map [ reverse [ digits a ] ] [ partial0 2 * ] ]
[ / [ reduce [ slice a [ / [ len a ] 2 ] [ len a ] ] 0 + ] [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ]
[ reverse [ slice [ slice a b c ] 0 [ / [ len [ slice a b c ] ] 2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ min d e ] ] [ - b [ min d e ] ] ] ] ] ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ digits b ] ] ] [ deref [ digits b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ filter [ map a square ] [ partial1 [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] b ] > ] ]
[ reduce [ slice [ reverse [ sort [ digits [ head a ] ] ] ] 0 b ] 0 + ]
[ head [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ reduce [ filter a [ lambda1 [ reduce [ map [ range 0 [ + b 1 ] ] [ partial0 arg1 == ] ] false || ] ] ] 1000000000 min ]
[ slice a [ strlen b ] c ]
[ reduce [ filter [ map [ reverse a ] square ] [ partial0 [ reduce [ map [ reverse a ] square ] 0 max ] > ] ] 0 max ]
[ filter [ range 0 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] is_prime ]
[ reverse [ filter a [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] < ] ] ]
[ slice a [ strlen b ] c ]
[ is_sorted [ map a [ partial1 [ reduce [ slice [ reverse [ sort c ] ] 0 b ] 0 + ] + ] ] ]
[ - [ reduce [ range 1 [ head a ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ slice a 0 [ / [ len a ] 2 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ filter [ reverse [ slice a b c ] ] [ lambda1 [ reduce [ map e [ partial0 arg1 == ] ] false || ] ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ reverse [ slice d b c ] ] ] ] [ deref [ reverse [ slice d b c ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ range 0 [ + [ head [ filter a [ partial1 b < ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ filter [ map [ filter a is_prime ] [ partial0 2 * ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ map [ range 1 [ + [ strlen a ] 1 ] ] [ partial1 b + ] ]
[ map [ slice [ filter a is_prime ] 0 [ / [ len [ filter a is_prime ] ] 2 ] ] square ]
[ reduce [ digits [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] ] 1000000000 min ]
[ filter [ slice a b c ] [ partial1 [ reduce [ slice [ reverse [ sort e ] ] 0 f ] 0 + ] < ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ slice [ map a [ partial0 2 * ] ] [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ]
[ reduce [ filter [ filter [ digits a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 [ reduce [ filter [ digits a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ min [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ digits [ * a [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] ] ]
[ > [ deref [ digits a ] [ / [ len [ digits a ] ] 2 ] ] 1 ]
[ range 0 [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ * d e ] ] [ - b [ * d e ] ] ] ] ] ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ head [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] ]
[ filter [ filter a [ lambda1 [ reduce [ map [ filter c [ partial1 b < ] ] [ partial0 arg1 == ] ] false || ] ] ] [ combine ! is_prime ] ]
[ floor [ sqrt [ + [ * [ - [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ] c ] [ - [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ] c ] ] [ * [ - b [ strlen d ] ] [ - b [ strlen d ] ] ] ] ] ]
[ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len a ] [ len [ slice b [ / [ len b ] 2 ] [ len b ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ slice b [ / [ len b ] 2 ] [ len b ] ] arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ slice [ filter a [ combine ! is_prime ] ] b c ]
[ filter [ range 0 [ + a 1 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ filter [ slice [ slice a b c ] [ / [ len [ slice a b c ] ] 2 ] [ len [ slice a b c ] ] ] [ lambda1 [ reduce [ map e [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ slice [ sort a ] 0 [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ]
[ reduce [ slice [ reverse [ sort [ map a [ partial0 2 * ] ] ] ] 0 [ reduce b 1000000000 min ] ] 0 + ]
[ range 1 [ strlen [ reduce a "" str_max ] ] ]
[ / [ reduce [ digits [ reduce a 1000000000 min ] ] 0 + ] [ len [ digits [ reduce a 1000000000 min ] ] ] ]
[ slice [ map a square ] [ deref [ sort b ] [ / [ len b ] 2 ] ] c ]
[ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] < ] ]
[ reduce [ slice [ sort a ] 0 [ reduce [ reverse [ digits [ reduce d 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 + ]
[ range 1 [ + [ min a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] ] 1 ] ]
[ reduce [ slice [ sort a ] 0 [ reduce [ slice [ sort c ] 0 b ] 0 + ] ] 0 + ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ filter [ range 1 a ] [ lambda1 [ reduce [ map [ range 1 b ] [ partial0 arg1 == ] ] false || ] ] ]
[ range 0 [ + [ reduce [ slice [ sort a ] 0 [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] b ] ] 0 + ] 1 ] ]
[ reduce [ range 0 [ + [ strlen [ reduce a "" str_concat ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ filter a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] < ] ]
[ head [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce [ slice [ sort c ] 0 b ] 0 + ] ] 0 + ]
[ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len [ reverse b ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ reverse b ] arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ slice a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] [ reduce [ map [ range 0 [ min [ len c ] [ len d ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ range 1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] ]
[ digits [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ]
[ filter [ filter [ digits a ] [ combine ! is_prime ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ * a [ reduce [ reverse [ digits [ + c b ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ filter [ reverse a ] [ lambda1 [ reduce [ map [ slice b 0 [ / [ len b ] 2 ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ reverse [ slice a b c ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len e ] ] [ deref e arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ deref [ sort [ filter [ range 1 a ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] [ / [ len [ filter [ range 1 a ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] 2 ] ]
[ filter [ filter a [ lambda1 [ reduce [ map [ map b [ partial0 2 * ] ] [ partial0 arg1 == ] ] false || ] ] ] [ combine ! is_prime ] ]
[ filter [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ < [ deref [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ / [ len [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] ] 2 ] ] 0 ]
[ filter [ range 0 a ] [ lambda1 [ reduce [ map [ slice b 0 [ / [ len b ] 2 ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ map [ digits a ] [ partial1 [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] - ] ]
[ reduce [ map [ range 0 [ len [ range 1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] ] ] ] [ lambda1 [ == [ deref [ range 1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] ] arg1 ] [ deref [ range 1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] ] [ - [ - [ len [ range 1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ reverse [ digits b ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ reverse [ digits b ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ]
[ filter [ filter [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ]
[ digits [ reduce [ filter [ map a [ partial0 2 * ] ] [ partial0 [ reduce [ map a [ partial0 2 * ] ] 0 max ] > ] ] 0 max ] ]
[ reduce [ map [ range 1 a ] [ partial1 b + ] ] 0 max ]
[ len [ slice [ map a [ partial1 b + ] ] 0 [ / [ len [ map a [ partial1 b + ] ] ] 2 ] ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ filter a [ lambda1 [ reduce [ map [ digits [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ filter [ map a [ partial1 b - ] ] [ partial1 [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] < ] ]
[ filter [ range 0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ combine ! is_prime ] ]
[ - [ reduce [ map a [ partial1 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] - ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] + ] ] ] ]
[ reduce [ map [ range 0 [ min [ len [ filter a [ lambda1 [ reduce [ map [ slice e b c ] [ partial0 arg1 == ] ] false || ] ] ] ] [ len f ] ] ] [ lambda1 [ if [ > [ deref [ filter a [ lambda1 [ reduce [ map [ slice e b c ] [ partial0 arg1 == ] ] false || ] ] ] arg1 ] [ deref f arg1 ] ] 1 0 ] ] ] 0 + ]
[ reverse [ range 1 [ + [ deref a [ / [ len a ] 2 ] ] 1 ] ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ head [ filter a [ partial1 b > ] ] ]
[ + [ * [ - a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] ] [ - a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] ] ] [ * [ - b [ head d ] ] [ - b [ head d ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len [ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] [ len c ] ] ] [ lambda1 [ if [ < [ deref [ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ reverse [ map a square ] ] 0 max ]
[ filter [ filter a [ partial1 b < ] ] [ partial1 [ reduce [ slice [ sort c ] 0 d ] 0 + ] > ] ]
[ reduce [ slice [ reverse [ sort [ digits a ] ] ] 0 [ min c b ] ] 0 + ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ + [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] [ strlen b ] ]
[ range 0 [ reduce a 0 max ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ reduce [ reverse [ digits [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] d ] [ - [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] d ] ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ - [ reduce [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ reduce [ map [ slice d b c ] [ partial0 arg1 == ] ] false || ] ] ]
[ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] + ] ]
[ filter [ filter a [ lambda1 [ reduce [ map [ range 1 [ + b 1 ] ] [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ map a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce b 1000000000 min ] ] + ] ]
[ filter a [ partial1 [ + c b ] < ] ]
[ reverse [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] ]
[ filter [ map [ filter [ range 0 [ len [ reverse a ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ reverse a ] int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ > [ reduce [ range 0 [ + [ * a b ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] 1 ]
[ map [ map [ filter [ range 0 [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ slice a [ / [ len a ] 2 ] [ len a ] ] int-deref ] ] [ partial0 2 * ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reduce [ range 0 [ + [ strlen [ reduce a "z" str_min ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ map a [ partial1 [ reduce [ range 0 [ + [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] * ] ]
[ <= [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ deref [ sort a ] [ / [ len a ] 2 ] ] ] 1 ]
[ range 0 [ + [ + a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] ] 1 ] ]
[ reduce [ slice a b c ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter d [ partial1 e < ] ] ] ] [ deref [ filter d [ partial1 e < ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ filter [ range 1 a ] [ partial1 [ deref b [ / [ len b ] 2 ] ] > ] ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce [ slice [ reverse [ sort d ] ] 0 [ reduce [ slice [ reverse [ sort c ] ] 0 b ] 0 + ] ] 0 + ] ] 0 + ]
[ map [ digits a ] [ partial1 [ reduce [ slice [ sort c ] 0 b ] 0 + ] * ] ]
[ reduce [ slice [ sort [ map [ map a [ partial0 2 * ] ] [ partial1 b * ] ] ] 0 c ] 0 + ]
[ max a [ reduce [ reverse [ digits [ deref b [ / [ len b ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ - [ reduce [ range 0 a ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ map [ map [ filter [ range 0 [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ slice a [ / [ len a ] 2 ] [ len a ] ] int-deref ] ] square ]
[ slice [ reverse [ slice a b c ] ] 0 [ / [ len [ reverse [ slice a b c ] ] ] 2 ] ]
[ reduce [ slice [ sort [ map a [ partial0 2 * ] ] ] 0 b ] 0 + ]
[ reduce [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] 1000000000 min ]
[ map [ filter [ map a [ partial1 b + ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] square ]
[ range 1 [ floor [ sqrt [ + [ * [ - a [ reduce c 0 max ] ] [ - a [ reduce c 0 max ] ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ]
[ digits [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ range 1 [ + b 1 ] ] ] ] [ deref [ range 1 [ + b 1 ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ reduce [ slice [ sort a ] 0 [ reduce [ slice [ sort [ slice f b c ] ] 0 e ] 0 + ] ] 0 + ]
[ is_sorted [ map a [ partial1 [ reduce [ slice [ reverse [ sort c ] ] 0 b ] 0 + ] + ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter c [ partial1 b > ] ] ] ] [ deref [ filter c [ partial1 b > ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ reduce [ range 0 [ + [ min a [ reduce b 0 max ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ head [ map a [ partial1 b - ] ] ]
[ filter a [ partial1 [ min d [ min c b ] ] < ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] * ] ] ] ] ]
[ slice [ filter a [ partial1 b > ] ] [ reduce [ filter c [ partial0 [ reduce c 1000000000 min ] < ] ] 1000000000 min ] d ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ range 1 [ reduce [ range 0 [ + [ / [ reduce a 0 + ] [ len a ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len d ] ] [ deref d arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 b < ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ digits [ + a [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ range 1 [ strlen [ reduce a "" str_max ] ] ]
[ reverse [ range 0 [ head a ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ map [ slice [ slice a b c ] 0 [ / [ len [ slice a b c ] ] 2 ] ] square ]
[ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 [ strlen c ] > ] ]
[ map [ filter [ range 1 [ + a 1 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ slice [ map a square ] [ / [ len [ map a square ] ] 2 ] [ len [ map a square ] ] ] 1000000000 min ]
[ filter [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ combine ! is_prime ] ]
[ map [ map a [ partial1 b * ] ] [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len d ] ] [ deref d arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] * ] ]
[ map [ map [ filter [ range 0 [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ slice a [ / [ len a ] 2 ] [ len a ] ] int-deref ] ] square ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] + ] ] ] ]
[ deref [ filter [ map a [ partial1 b + ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ / [ len [ filter [ map a [ partial1 b + ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] 2 ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ < [ - [ reduce [ slice a b c ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ]
[ reduce [ map a [ partial1 [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 b + ] ] ] ] - ] ] 1000000000 min ]
[ filter [ reverse [ filter a is_prime ] ] is_prime ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map c [ partial1 [ strlen b ] - ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map c [ partial1 [ strlen b ] - ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ - [ reduce [ slice [ slice a b c ] 0 [ / [ len [ slice a b c ] ] 2 ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ range 1 [ reduce [ slice [ reverse [ sort a ] ] 0 [ head b ] ] 0 + ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ filter [ filter [ filter a [ combine ! is_prime ] ] [ combine ! is_prime ] ] [ partial0 [ reduce [ filter [ filter a [ combine ! is_prime ] ] [ combine ! is_prime ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ map [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] square ] [ partial0 2 * ] ]
[ reverse [ map [ filter a [ combine ! is_prime ] ] [ partial1 b * ] ] ]
[ range 1 [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ] ]
[ reduce [ map [ range 0 [ len [ map [ slice a b c ] [ partial1 d * ] ] ] ] [ lambda1 [ == [ deref [ map [ slice a b c ] [ partial1 d * ] ] arg1 ] [ deref [ map [ slice a b c ] [ partial1 d * ] ] [ - [ - [ len [ map [ slice a b c ] [ partial1 d * ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len [ digits a ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ digits a ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ is_sorted [ map [ slice a b c ] [ partial0 2 * ] ] ]
[ reduce [ slice [ sort a ] 0 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ]
[ map [ map a [ partial1 b * ] ] [ partial1 c + ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ head [ filter [ range 0 [ + [ reduce a 0 max ] 1 ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ]
[ map [ filter [ range 0 [ len [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] int-deref ] ]
[ filter [ filter a [ lambda1 [ reduce [ map [ filter c [ partial1 b > ] ] [ partial0 arg1 == ] ] false || ] ] ] [ combine ! is_prime ] ]
[ head [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c + ] ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ min [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] [ strlen c ] ]
[ floor [ sqrt [ + [ * [ - a [ strlen c ] ] [ - a [ strlen c ] ] ] [ * [ - b [ * d e ] ] [ - b [ * d e ] ] ] ] ] ] ]
[ map [ map [ reverse a ] square ] [ partial0 2 * ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ slice [ sort a ] 0 [ - [ reduce [ map b square ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 + ]
[ map [ slice [ slice a b c ] [ / [ len [ slice a b c ] ] 2 ] [ len [ slice a b c ] ] ] square ]
[ floor [ sqrt [ + [ * [ - [ reduce [ slice [ sort a ] 0 b ] 0 + ] d ] [ - [ reduce [ slice [ sort a ] 0 b ] 0 + ] d ] ] [ * [ - c [ min e ] ] [ - c e ] ] ] ] ]
[ filter [ map [ filter [ range 0 [ len [ filter a [ partial1 b < ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ filter a [ partial1 b < ] ] int-deref ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reduce [ filter [ map [ filter [ range 0 [ len [ map a [ partial1 b - ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ map a [ partial1 b - ] ] int-deref ] ] [ partial0 [ reduce [ map [ filter [ range 0 [ len [ map a [ partial1 b - ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ map a [ partial1 b - ] ] int-deref ] ] 0 max ] > ] ] 0 max ]
[ reduce [ filter [ filter [ reverse a ] is_prime ] [ partial0 [ reduce [ filter [ reverse a ] is_prime ] 1000000000 min ] < ] ] 1000000000 min ]
[ filter [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ filter [ filter a [ lambda1 [ reduce [ map [ map [ filter [ range 0 [ len b ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 b int-deref ] ] [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ filter [ slice [ map a square ] 0 [ / [ len [ map a square ] ] 2 ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ map a [ partial1 b - ] ]
[ slice [ slice [ map a [ partial1 b + ] ] c d ] [ / [ len [ slice [ map a [ partial1 b + ] ] c d ] ] 2 ] [ len [ slice [ map a [ partial1 b + ] ] c d ] ] ]
[ digits [ strlen [ reduce a "z" str_min ] ] ]
[ filter [ filter [ digits a ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ slice [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] d ]
[ reduce [ map [ range 0 [ min [ len [ filter [ range 0 a ] [ partial1 b < ] ] ] [ len c ] ] ] [ lambda1 [ if [ < [ deref [ filter [ range 0 a ] [ partial1 b < ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ map a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce b 0 max ] ] - ] ]
[ filter [ slice [ filter a [ partial1 b < ] ] 0 [ / [ len [ filter a [ partial1 b < ] ] ] 2 ] ] [ partial1 c > ] ]
[ head [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial1 b + ] ] ]
[ slice [ map [ map a [ partial1 b + ] ] square ] 0 [ / [ len [ map [ map a [ partial1 b + ] ] square ] ] 2 ] ]
[ deref [ sort [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ] [ / [ len [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ] 2 ] ]
[ filter [ reverse [ reverse a ] ] [ combine ! is_prime ] ]
[ reduce [ map [ range 0 [ min [ len [ reverse [ range 1 [ + a 1 ] ] ] ] [ len b ] ] ] [ lambda1 [ if [ < [ deref [ reverse [ range 1 [ + a 1 ] ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ slice [ slice [ filter a [ partial1 b > ] ] c d ] 0 [ / [ len [ slice [ filter a [ partial1 b > ] ] c d ] ] 2 ] ]
[ > [ head a ] 1 ]
[ map a [ partial1 b - ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ head [ map [ range 0 [ + a 1 ] ] [ partial1 b - ] ] ]
[ reduce [ slice [ sort a ] 0 [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ]
[ floor [ sqrt [ + [ * [ - a [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ] [ - a [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ] ] [ * [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g i ] [ - g i ] ] ] ] [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g i ] [ - g i ] ] ] ] ] ] ] ]
[ filter [ slice a b c ] [ lambda1 [ reduce [ map e [ partial0 arg1 == ] ] false || ] ] ]
[ range 0 [ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ]
[ reduce [ range 0 [ + [ strlen [ reduce a "" str_concat ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ is_sorted [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] ]
[ - [ reduce [ range 0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ range 0 [ + a 1 ] ]
[ filter [ digits [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ slice [ sort [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 0 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] 0 + ]
[ map [ reverse [ digits a ] ] [ partial0 2 * ] ]
[ reduce [ map [ filter [ range 0 [ len [ map a [ partial0 2 * ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ map a [ partial0 2 * ] ] int-deref ] ] 0 + ]
[ reduce [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] 1000000000 min ]
[ map [ filter [ range 0 [ len [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] int-deref ] ]
[ reverse [ map [ range 0 [ + a 1 ] ] [ partial0 2 * ] ] ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce [ reverse [ digits [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 + ]
[ slice a [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ]
[ range 1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] ]
[ floor [ sqrt [ + [ * [ - [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] [ - [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] ] [ * [ - [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] d ] [ - [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] d ] ] ] ] ]
[ min a [ min c [ head b ] ] ]
[ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len [ reverse b ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ reverse b ] arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reverse [ slice [ slice a b c ] 0 [ / [ len [ slice a b c ] ] 2 ] ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ is_sorted [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c + ] ] ]
[ + [ reduce [ slice [ sort a ] 0 b ] 0 + ] [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] ]
[ reduce [ slice [ sort [ map a [ partial1 b + ] ] ] 0 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len d ] ] [ deref d arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] 0 + ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter a [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] > ] ]
[ floor [ sqrt [ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] ] ] ] ]
[ reduce [ map [ range 0 [ len [ slice a [ head b ] c ] ] ] [ lambda1 [ == [ deref [ slice a [ head b ] c ] arg1 ] [ deref [ slice a [ head b ] c ] [ - [ - [ len [ slice a [ head b ] c ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] ] ] ]
[ filter [ filter a [ partial1 b > ] ] [ partial1 [ - [ reduce c 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] > ] ]
[ slice [ map [ slice a b c ] square ] 0 [ / [ len [ map [ slice a b c ] square ] ] 2 ] ]
[ range 1 [ max [ deref [ sort a ] [ / [ len a ] 2 ] ] b ] ]
[ digits [ head a ] ]
[ reduce [ map [ range 0 [ len [ filter [ range 0 [ + a 1 ] ] [ partial1 b > ] ] ] ] [ lambda1 [ == [ deref [ filter [ range 0 [ + a 1 ] ] [ partial1 b > ] ] arg1 ] [ deref [ filter [ range 0 [ + a 1 ] ] [ partial1 b > ] ] [ - [ - [ len [ filter [ range 0 [ + a 1 ] ] [ partial1 b > ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ < [ reduce [ slice [ sort a ] 0 b ] 0 + ] 0 ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ filter b [ combine ! is_prime ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ filter b [ combine ! is_prime ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ len [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b > ] ] ]
[ range 0 [ + [ reduce [ map a [ partial1 b + ] ] 0 max ] 1 ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ filter [ range 0 [ len [ filter b is_prime ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ filter b is_prime ] int-deref ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ map [ filter [ range 0 [ len [ filter b is_prime ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ filter b is_prime ] int-deref ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ range 0 [ + [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ filter [ filter a [ lambda1 [ reduce [ map [ range 1 [ + b 1 ] ] [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ]
[ map [ map [ map a [ partial1 b * ] ] [ partial1 c - ] ] square ]
[ - [ reduce [ range 1 [ + [ max a b ] 1 ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ filter [ filter [ range 0 [ + a 1 ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ reduce [ filter [ range 0 [ + a 1 ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] 0 max ] > ] ] 0 max ]
[ reduce [ range 0 [ + [ reduce [ filter [ digits a ] [ partial0 [ reduce [ digits a ] 0 max ] > ] ] 0 max ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ reduce [ map [ range 0 [ len [ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] square ] ] ] [ lambda1 [ == [ deref [ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] square ] arg1 ] [ deref [ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] square ] [ - [ - [ len [ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] square ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ map [ filter a [ partial1 b > ] ] [ partial1 [ reduce [ filter c [ partial0 [ reduce c 0 max ] > ] ] 0 max ] + ] ]
[ reduce [ reverse [ digits [ reduce [ filter [ slice a b c ] [ partial0 [ reduce [ slice a b c ] 0 max ] > ] ] 0 max ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ filter [ map [ map a [ partial1 b + ] ] square ] [ partial0 [ reduce [ map [ map a [ partial1 b + ] ] square ] 1000000000 min ] < ] ] 1000000000 min ]
[ + a [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ + c b ] ] ]
[ reduce [ map [ range 0 [ min [ len [ reverse [ digits a ] ] ] [ len b ] ] ] [ lambda1 [ if [ < [ deref [ reverse [ digits a ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ slice a b [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ slice a [ reduce [ slice [ sort c ] 0 b ] 0 + ] [ strlen d ] ]
[ reverse [ slice a 0 [ / [ len a ] 2 ] ] ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ reverse [ digits [ deref [ sort [ map a square ] ] [ / [ len [ map a square ] ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] + ] ] ] ]
[ digits [ head a ] ]
[ min [ head [ digits a ] ] b ]
[ map a [ partial1 b - ] ]
[ + [ * [ - [ strlen a ] c ] [ - [ strlen a ] c ] ] [ * [ - b [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 d * ] ] ] ] ] ] [ - b [ strlen d ] ] ] ]
[ map [ filter a [ lambda1 [ reduce [ map [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 arg1 == ] ] false || ] ] ] square ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ filter [ map a [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] + ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reduce [ map [ range 0 [ min [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ len [ filter b [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] ] ] [ lambda1 [ if [ < [ deref [ slice a [ / [ len a ] 2 ] [ len a ] ] arg1 ] [ deref [ filter b [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ slice [ reverse [ sort [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] ] ] 0 d ] 0 + ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ reduce [ filter a [ partial1 [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] b ] > ] ] 0 + ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ digits [ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ filter [ filter a [ lambda1 [ reduce [ map [ range 1 [ + b 1 ] ] [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ filter a [ combine ! is_prime ] ] 1000000000 min ] ]
[ slice [ range 0 a ] b c ]
[ filter [ slice [ reverse a ] [ / [ len [ reverse a ] ] 2 ] [ len [ reverse a ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ digits [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1000000000 min ] ]
[ filter a [ partial1 [ strlen b ] > ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ filter a [ partial1 [ strlen b ] > ] ]
[ max [ reduce [ slice [ sort a ] 0 b ] 0 + ] [ strlen c ] ]
[ / [ reduce [ range 1 [ + [ * a b ] 1 ] ] 0 + ] [ len [ range 1 [ + [ * a b ] 1 ] ] ] ]
[ digits [ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ slice a 0 [ / [ len a ] 2 ] ] 0 max ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ slice [ reverse [ sort a ] ] 0 [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] 0 + ] ]
[ filter [ reverse [ slice a b c ] ] [ lambda1 [ reduce [ map e [ partial0 arg1 == ] ] false || ] ] ]
[ filter a [ partial1 [ strlen b ] > ] ]
[ reverse [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] square ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ]
[ reverse [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ is_sorted [ slice [ reverse a ] b c ] ]
[ reverse [ range 1 [ * a b ] ] ]
[ > [ reduce [ map [ range 0 [ min [ len [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] [ len c ] ] ] [ lambda1 [ if [ < [ deref [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ] 1 ]
[ map [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] square ]
[ reverse [ filter [ slice a b c ] [ lambda1 [ reduce [ map e [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len [ reverse b ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ reverse b ] arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ slice [ map a square ] b [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] c ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ min [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] f ] ]
[ filter [ reverse [ filter a [ partial1 b > ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ reduce [ slice a b [ + [ * [ - f c ] [ - f c ] ] [ * [ - g d ] [ - g d ] ] ] ] 1000000000 min ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] * ] ] ] ] ]
[ map [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] square ]
[ filter [ map a [ partial0 2 * ] ] [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] > ] ]
[ reduce [ map [ range 0 [ len [ map [ filter [ range 0 [ len [ filter a is_prime ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ filter a is_prime ] int-deref ] ] ] ] [ lambda1 [ == [ deref [ map [ filter [ range 0 [ len [ filter a is_prime ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ filter a is_prime ] int-deref ] ] arg1 ] [ deref [ map [ filter [ range 0 [ len [ filter a is_prime ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ filter a is_prime ] int-deref ] ] [ - [ - [ len [ map [ filter [ range 0 [ len [ filter a is_prime ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ filter a is_prime ] int-deref ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ head [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c + ] ] ]
[ range 1 [ + [ reduce [ map [ range 0 [ min [ len [ slice a b c ] ] [ len e ] ] ] [ lambda1 [ if [ < [ deref [ slice a b c ] arg1 ] [ deref e arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ]
[ filter a [ lambda1 [ reduce [ map [ filter c [ partial1 [ head b ] > ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ filter c [ lambda1 [ reduce [ map [ range 0 b ] [ partial0 arg1 == ] ] false || ] ] ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ filter c [ lambda1 [ reduce [ map [ range 0 b ] [ partial0 arg1 == ] ] false || ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ digits a ] [ lambda1 [ reduce [ map [ filter c [ partial1 b < ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ floor [ sqrt [ + [ * [ - [ deref [ sort a ] [ / [ len a ] 2 ] ] c ] [ - [ deref [ sort a ] [ / [ len a ] 2 ] ] c ] ] [ * [ - b [ strlen d ] ] [ - b [ strlen d ] ] ] ] ] ]
[ map [ map [ range 0 [ + a 1 ] ] [ partial1 b - ] ] [ partial0 2 * ] ]
[ map a [ partial1 b - ] ]
[ map [ filter a [ lambda1 [ reduce [ map [ map b [ partial0 2 * ] ] [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ]
[ reduce [ reverse [ digits [ reduce [ slice [ sort [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 0 b ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ is_sorted [ map a [ partial1 [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] b ] + ] ] ]
[ head [ filter a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] < ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ head [ slice [ slice a b c ] [ / [ len [ slice a b c ] ] 2 ] [ len [ slice a b c ] ] ] ]
[ reduce [ reverse [ digits [ reduce [ filter [ slice a b c ] [ partial0 [ reduce [ slice a b c ] 0 max ] > ] ] 0 max ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ digits [ reduce [ slice [ sort a ] 0 b ] 0 + ] ]
[ slice a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] [ reduce [ range 0 [ + d 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ map [ map a square ] [ partial1 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] + ] ]
[ < [ deref [ sort [ reverse a ] ] [ / [ len [ reverse a ] ] 2 ] ] b ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ filter [ filter a [ partial1 [ + c b ] < ] ] is_prime ]
[ reduce [ reverse [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ slice [ reverse a ] 0 [ / [ len [ reverse a ] ] 2 ] ]
[ map [ range 0 [ + a 1 ] ] [ partial1 b - ] ]
[ reduce [ range 0 [ + [ max a [ reduce [ slice [ sort c ] 0 b ] 0 + ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reverse [ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ]
[ is_sorted [ slice a [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] c ] ]
[ > [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] 1 ]
[ floor [ sqrt [ + [ * [ - a [ reduce [ map [ range 0 [ min [ len d ] [ len e ] ] ] [ lambda1 [ if [ > [ deref d arg1 ] [ deref e arg1 ] ] 1 0 ] ] ] 0 + ] ] [ - a [ reduce [ map [ range 0 [ min [ len d ] [ len e ] ] ] [ lambda1 [ if [ > [ deref d arg1 ] [ deref e arg1 ] ] 1 0 ] ] ] 0 + ] ] ] [ * [ - b f ] [ - b f ] ] ] ] ]
[ reduce [ filter [ map [ reverse a ] square ] [ partial0 [ reduce [ map [ reverse a ] square ] 0 max ] > ] ] 0 max ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ map [ filter [ range 0 [ len b ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 b int-deref ] ] square ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map [ map [ filter [ range 0 [ len b ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 b int-deref ] ] square ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ]
[ min a [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] ]
[ is_sorted [ filter [ slice a b c ] [ lambda1 [ reduce [ map e [ partial0 arg1 == ] ] false || ] ] ] ]
[ is_sorted [ reverse [ filter a [ partial1 b < ] ] ] ]
[ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ reduce d 0 max ] ] [ - b [ reduce d 0 max ] ] ] ]
[ reduce [ map [ map a square ] square ] 0 max ]
[ head [ map a [ partial1 [ reduce [ slice [ reverse [ sort c ] ] 0 b ] 0 + ] - ] ] ]
[ head [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ filter [ reverse [ filter a [ partial1 b < ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ digits [ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ map [ filter [ filter a [ partial1 b < ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] square ]
[ reduce [ slice [ reverse [ sort [ slice a [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 b + ] ] ] ] c ] ] ] 0 e ] 0 + ]
[ range 1 [ strlen [ reduce a "" str_max ] ] ]
[ - [ reduce [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ map [ filter [ range 0 [ len [ slice [ range 0 [ + a 1 ] ] 0 [ / [ len [ range 0 [ + a 1 ] ] ] 2 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ slice [ range 0 [ + a 1 ] ] 0 [ / [ len [ range 0 [ + a 1 ] ] ] 2 ] ] int-deref ] ]
[ reduce [ range 0 [ + [ max a [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ reverse [ digits [ deref a [ / [ len a ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ head [ map [ slice a b c ] [ partial1 d + ] ] ]
[ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] ] ]
[ reduce [ map [ range 0 [ len [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] ] ] [ lambda1 [ == [ deref [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] arg1 ] [ deref [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] [ - [ - [ len [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ map [ map [ range 0 a ] [ partial1 b + ] ] [ partial0 2 * ] ]
[ range 0 [ + [ reduce [ range 0 [ + [ head a ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] 1 ] ]
[ slice a b [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ range 0 [ head [ map a [ partial1 b * ] ] ] ]
[ range 0 [ + [ reduce [ slice [ sort a ] 0 [ / [ len a ] 2 ] ] 0 + ] 1 ] ]
[ reverse [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ range 1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ is_sorted [ filter a [ partial1 [ deref b [ / [ len b ] 2 ] ] > ] ] ]
[ slice a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] [ - [ reduce d 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ min [ reduce a 0 max ] [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ head [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial1 b + ] ] ]
[ < a [ reduce [ digits b ] 0 + ] ]
[ slice a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ]
[ digits [ deref [ sort [ reverse a ] ] [ / [ len [ reverse a ] ] 2 ] ] ]
[ reduce [ filter a [ lambda1 [ reduce [ map [ map b square ] [ partial0 arg1 == ] ] false || ] ] ] 0 max ]
[ range 0 [ + [ reduce [ slice a [ / [ len a ] 2 ] [ len a ] ] 1000000000 min ] 1 ] ]
[ digits [ - [ reduce [ range 1 a ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ digits [ head [ reverse a ] ] ]
[ slice a [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 c * ] ] ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ max [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ reduce [ slice [ reverse [ sort [ digits a ] ] ] 0 [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ > [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] 0 + ]
[ max a [ reduce [ filter [ slice e b c ] [ partial0 [ reduce [ slice e b c ] 0 max ] > ] ] 0 max ] ]
[ map [ filter a [ partial1 [ reduce b 0 max ] > ] ] [ partial0 2 * ] ]
[ deref [ map [ range 0 [ + a 1 ] ] square ] [ / [ len [ map [ range 0 [ + a 1 ] ] square ] ] 2 ] ]
[ range 0 [ reduce [ slice [ sort a ] 0 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] 0 + ] ]
[ reduce [ map [ map a [ partial1 b + ] ] [ partial0 2 * ] ] 0 + ]
[ > [ reduce [ reverse [ digits [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ]
[ + [ * [ - [ reduce a 0 max ] c ] [ - [ reduce a 0 max ] c ] ] [ * [ - b [ reduce d 0 max ] ] [ - b [ reduce d 0 max ] ] ] ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ slice [ sort a ] 0 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ]
[ slice a [ strlen [ reduce [ map [ str_split b " " ] [ partial0 0 str_index ] ] "" str_concat ] ] c ]
[ filter [ map a [ partial1 b * ] ] [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len d ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ] > ] ]
[ reverse [ filter a [ lambda1 [ reduce [ map [ filter b [ combine ! is_prime ] ] [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ deref [ sort [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] [ / [ len [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] 2 ] ]
[ reduce [ range 0 [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len d ] ] [ deref d arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] ]
[ floor [ sqrt [ + [ * [ - a [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ] [ - a [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ] ] [ * [ - b [ head e ] ] [ - b [ head e ] ] ] ] ] ]
[ filter a [ partial1 [ reduce [ range 0 [ + [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] < ] ]
[ range 1 [ reduce [ reverse [ digits [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ map [ slice [ digits a ] [ / [ len [ digits a ] ] 2 ] [ len [ digits a ] ] ] [ partial0 2 * ] ]
[ reverse [ map a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] - ] ] ]
[ filter [ map [ range 0 a ] [ partial0 2 * ] ] [ partial1 b > ] ]
[ < [ - [ reduce [ slice a b c ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ]
[ reduce [ slice a [ strlen b ] c ] 0 max ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ floor [ sqrt [ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] ] ] ] ]
[ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] f ] [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] f ] ] ]
[ filter [ reverse [ slice a b c ] ] [ partial1 e < ] ]
[ filter a [ partial1 [ head [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] > ] ]
[ range 1 [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ]
[ map [ digits [ deref [ sort a ] [ / [ len a ] 2 ] ] ] [ partial0 2 * ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ floor [ sqrt [ + [ * [ - [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ] c ] [ - [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ] c ] ] [ * [ - b [ reduce d 1000000000 min ] ] [ - b [ reduce d 1000000000 min ] ] ] ] ] ]
[ reduce [ map [ range 0 [ min [ len [ range 0 [ + [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] 1 ] ] ] [ len f ] ] ] [ lambda1 [ if [ > [ deref [ range 0 [ + [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] 1 ] ] arg1 ] [ deref f arg1 ] ] 1 0 ] ] ] 0 + ]
[ head [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ digits [ reduce [ slice [ reverse [ sort [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] 0 c ] 0 + ] ]
[ head [ digits [ max a b ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ filter [ filter a [ partial1 b > ] ] [ partial0 [ reduce [ filter a [ partial1 b > ] ] 1000000000 min ] < ] ] 1000000000 min ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ filter a is_prime ] 0 max ] ]
[ map [ filter [ range 1 [ + a 1 ] ] [ partial1 b > ] ] square ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ > [ min [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] c ] 1 ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ]
[ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ < [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] > ] ]
[ digits [ + a [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] b ] ] ]
[ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ partial1 [ strlen b ] < ] ]
[ filter [ slice [ digits a ] 0 [ / [ len [ digits a ] ] 2 ] ] [ partial1 b < ] ]
[ slice [ slice a 0 [ / [ len a ] 2 ] ] [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] c ]
[ reduce [ filter [ map [ reverse a ] square ] [ partial0 [ reduce [ map [ reverse a ] square ] 0 max ] > ] ] 0 max ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ slice [ reverse [ sort a ] ] 0 [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] 0 + ] ]
[ < [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] [ reduce [ map [ range 0 [ min [ len c ] [ len d ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ filter [ slice [ slice a b c ] [ / [ len [ slice a b c ] ] 2 ] [ len [ slice a b c ] ] ] [ combine ! is_prime ] ]
[ is_sorted [ slice [ reverse a ] b c ] ]
[ head [ slice a b [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] c ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ filter a [ partial1 [ max c b ] < ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ reverse [ digits [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ < a [ reduce [ reverse [ digits [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ max [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] [ min c d ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map [ slice [ range 1 [ + a 1 ] ] [ / [ len [ range 1 [ + a 1 ] ] ] 2 ] [ len [ range 1 [ + a 1 ] ] ] ] [ partial1 b * ] ]
[ reverse [ slice a [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] c ] ]
[ slice [ filter a [ partial1 b < ] ] 0 [ / [ len [ filter a [ partial1 b < ] ] ] 2 ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ filter b is_prime ] [ partial0 2 * ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ map [ filter b is_prime ] [ partial0 2 * ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ reverse [ digits [ reduce [ reverse [ digits [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ head [ filter a [ partial1 b > ] ] ] ]
[ slice a b [ reduce [ filter c [ partial0 [ reduce c 0 max ] > ] ] 0 max ] ]
[ max [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] c ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ slice [ sort a ] 0 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ]
[ map [ map a square ] [ partial1 [ reduce [ slice [ reverse [ sort c ] ] 0 b ] 0 + ] * ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter c [ partial1 b > ] ] ] ] [ deref [ filter c [ partial1 b > ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ reverse [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ]
[ reduce [ digits [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len f ] ] [ deref f arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ map [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] * ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ slice [ digits [ max a b ] ] 0 [ / [ len [ digits [ max a b ] ] ] 2 ] ]
[ min [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] [ deref f [ / [ len f ] 2 ] ] ]
[ is_sorted [ slice [ reverse a ] b c ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ slice [ map a square ] 0 [ / [ len [ map a square ] ] 2 ] ]
[ map [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b < ] ] square ]
[ reduce [ range 0 [ + [ * a [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ slice [ map a [ partial1 b * ] ] [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] c ] d ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ reduce [ filter d [ partial0 [ reduce d 0 max ] > ] ] 0 max ] ] [ - b [ reduce [ filter d [ partial0 [ reduce d 0 max ] > ] ] 0 max ] ] ] ] ] ] ]
[ digits [ deref a [ / [ len a ] 2 ] ] ]
[ reduce [ reverse [ digits [ deref [ sort [ map a square ] ] [ / [ len [ map a square ] ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ head [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ + [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] [ reduce b 1000000000 min ] ]
[ map [ reverse a ] [ partial1 [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] b ] * ] ]
[ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ reduce [ slice [ sort d ] 0 e ] 0 + ] ] [ - b [ reduce [ slice [ sort d ] 0 e ] 0 + ] ] ] ]
[ reduce [ slice [ sort a ] 0 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ len [ range 0 [ + [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] 1 ] ] ]
[ reverse [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ]
[ filter a [ lambda1 [ reduce [ map [ filter [ slice d b c ] [ lambda1 [ reduce [ map d [ partial0 arg1 == ] ] false || ] ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ slice [ sort a ] 0 [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ]
[ reduce [ slice a [ / [ len a ] 2 ] [ len a ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ reverse b ] ] ] [ deref [ reverse b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ + [ * [ - [ reduce [ slice [ sort a ] 0 b ] 0 + ] d ] [ - [ reduce [ slice [ sort a ] 0 b ] 0 + ] d ] ] [ * [ - c [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 e + ] ] ] ] ] [ - c [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 e + ] ] ] ] ] ] ]
[ map [ map a [ partial1 [ strlen b ] + ] ] square ]
[ reduce [ slice [ reverse [ sort [ digits [ head a ] ] ] ] 0 b ] 0 + ]
[ filter [ slice a b c ] [ lambda1 [ reduce [ map [ slice d b c ] [ partial0 arg1 == ] ] false || ] ] ]
[ range 0 [ strlen [ reduce a "" str_concat ] ] ]
[ digits [ deref a [ / [ len a ] 2 ] ] ]
[ reduce [ slice [ reverse [ sort [ reverse a ] ] ] 0 [ len b ] ] 0 + ]
[ digits [ reduce [ map [ range 0 [ min [ len [ reverse a ] ] [ len b ] ] ] [ lambda1 [ if [ < [ deref [ reverse a ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ digits [ reduce [ reverse [ digits [ / [ reduce a 0 + ] [ len a ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ range 0 [ + a 1 ] ]
[ reduce [ slice [ reverse [ sort [ map a [ partial1 b * ] ] ] ] 0 [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ] 0 + ]
[ * a [ head [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ]
[ reduce [ slice a [ / [ len a ] 2 ] [ len a ] ] 1000000000 min ]
[ reduce [ slice a b [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] ] 1000000000 min ]
[ head [ slice [ digits a ] 0 [ / [ len [ digits a ] ] 2 ] ] ]
[ reduce [ reverse [ digits [ deref [ map a [ partial0 2 * ] ] [ / [ len [ map a [ partial0 2 * ] ] ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reverse [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ]
[ deref [ filter [ map a [ partial1 b + ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ / [ len [ filter [ map a [ partial1 b + ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] 2 ] ]
[ * [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ reduce [ map [ range 0 [ min [ len [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] [ len c ] ] ] [ lambda1 [ if [ > [ deref [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ range 0 [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ] 1000000000 min ]
[ < [ reduce [ slice [ sort [ map a [ partial1 b + ] ] ] 0 c ] 0 + ] 0 ]
[ head [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ reverse [ map [ range 0 [ + a 1 ] ] [ partial0 2 * ] ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] + ] ] ] ]
[ head [ filter [ map a [ partial1 b - ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ]
[ filter [ slice [ reverse a ] 0 [ / [ len [ reverse a ] ] 2 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ reverse [ map a [ partial1 b + ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ reverse [ digits [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ reduce d 1000000000 min ] ] [ - b [ reduce d 1000000000 min ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ head [ map [ filter [ range 0 [ len [ map a [ partial0 2 * ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ map a [ partial0 2 * ] ] int-deref ] ] ]
[ map [ map [ range 1 [ + a 1 ] ] [ partial1 b - ] ] square ]
[ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ range 1 [ + [ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] 1 ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ slice [ reverse a ] [ / [ len [ reverse a ] ] 2 ] [ len [ reverse a ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ digits [ - [ reduce [ filter a [ partial1 b > ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ reduce [ filter [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c > ] ] [ partial0 [ reduce [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c > ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ >= [ head [ reverse a ] ] b ]
[ slice a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] c ]
[ reduce [ map [ range 0 [ len [ digits [ reduce a 1000000000 min ] ] ] ] [ lambda1 [ == [ deref [ digits [ reduce a 1000000000 min ] ] arg1 ] [ deref [ digits [ reduce a 1000000000 min ] ] [ - [ - [ len [ digits [ reduce a 1000000000 min ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ + [ reduce a 0 max ] [ head b ] ]
[ head [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ head [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ floor [ sqrt [ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] + ] ] ] ]
[ slice [ digits [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] [ / [ len [ digits [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] ] 2 ] [ len [ digits [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ map a [ partial1 b - ] ]
[ reduce [ map [ range 0 [ len [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 2 * ] ] ] ] [ lambda1 [ == [ deref [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 2 * ] ] arg1 ] [ deref [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 2 * ] ] [ - [ - [ len [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 2 * ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ slice a [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] c ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ range 1 [ + [ head [ slice a 0 [ / [ len a ] 2 ] ] ] 1 ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ reduce [ slice [ sort d ] 0 e ] 0 + ] ] [ - b [ reduce [ slice [ sort d ] 0 e ] 0 + ] ] ] ] ] ] ]
[ + [ * [ - a [ min c d ] ] [ - a [ min c d ] ] ] [ * [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g i ] [ - g i ] ] ] ] [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g i ] [ - g i ] ] ] ] ] ]
[ map [ reverse a ] [ partial1 [ deref b [ / [ len b ] 2 ] ] + ] ]
[ * a [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] ]
[ is_sorted [ slice [ reverse a ] b c ] ]
[ >= [ reduce [ reverse [ digits [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] b ]
[ reduce [ slice [ reverse a ] 0 [ / [ len [ reverse a ] ] 2 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ filter [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ reverse [ digits [ deref [ sort [ map a square ] ] [ / [ len [ map a square ] ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ range 0 [ min [ len [ slice a 0 [ / [ len a ] 2 ] ] ] [ len [ filter c [ partial1 b < ] ] ] ] ] [ lambda1 [ if [ > [ deref [ slice a 0 [ / [ len a ] 2 ] ] arg1 ] [ deref [ filter c [ partial1 b < ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ slice [ reverse [ sort [ slice a 0 [ / [ len a ] 2 ] ] ] ] 0 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 + ]
[ filter a [ partial1 [ strlen b ] > ] ]
[ slice a [ strlen [ reduce [ map [ str_split b " " ] [ partial0 0 str_index ] ] "" str_concat ] ] c ]
[ map [ slice [ range 1 a ] [ / [ len [ range 1 a ] ] 2 ] [ len [ range 1 a ] ] ] [ partial0 2 * ] ]
[ head [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ filter [ filter [ range 1 a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 [ reduce [ filter [ range 1 a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 max ] > ] ] 0 max ]
[ reduce [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] 0 max ]
[ + [ * [ - [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] c ] [ - [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] c ] ] [ * [ - b [ reduce [ reverse [ digits d ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ - b [ reduce [ reverse [ digits d ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] ]
[ digits [ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ range 0 [ - [ reduce [ range 0 [ + a 1 ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ deref [ map [ digits a ] [ partial0 2 * ] ] [ / [ len [ map [ digits a ] [ partial0 2 * ] ] ] 2 ] ]
[ reduce [ filter [ slice a [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 b + ] ] ] ] c ] [ partial0 [ reduce [ slice a [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 b + ] ] ] ] c ] 0 max ] > ] ] 0 max ]
[ range 0 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ len a ] ] ]
[ - [ reduce [ slice [ reverse a ] b c ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ filter [ reverse a ] [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ]
[ head [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ map [ filter [ range 0 [ len [ map a [ partial1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 b + ] ] ] ] - ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ map a [ partial1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 b + ] ] ] ] - ] ] int-deref ] ]
[ * a [ head b ] ]
[ slice a [ / [ reduce b 0 + ] [ len b ] ] [ strlen c ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ range 0 [ min [ len [ slice a 0 [ / [ len a ] 2 ] ] ] [ len [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ] ] ] [ lambda1 [ if [ < [ deref [ slice a 0 [ / [ len a ] 2 ] ] arg1 ] [ deref [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ slice [ reverse [ sort [ range 0 a ] ] ] 0 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] 0 + ]
[ deref [ range 0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ / [ len [ range 0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] 2 ] ]
[ reduce [ slice [ sort [ reverse [ range 1 [ + a 1 ] ] ] ] 0 b ] 0 + ]
[ range 0 [ reduce [ slice [ sort a ] 0 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] 0 + ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ >= [ / [ reduce [ reverse a ] 0 + ] [ len [ reverse a ] ] ] b ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ range 0 [ + [ reduce a 1000000000 min ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ * a [ head [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ]
[ is_sorted [ slice [ reverse a ] b c ] ]
[ map [ slice a b c ] [ partial1 [ reduce [ range 0 [ + d 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] + ] ]
[ filter [ range 0 [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ slice a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ slice b 0 [ / [ len b ] 2 ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ slice b 0 [ / [ len b ] 2 ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial1 b * ] ]
[ filter [ range 1 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ range 0 [ + [ - [ reduce [ reverse a ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ is_sorted [ slice a b [ reduce [ slice [ sort c ] 0 d ] 0 + ] ] ]
[ filter [ range 1 [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ]
[ - [ reduce [ slice a b [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ floor [ sqrt [ + [ * [ - [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ] c ] [ - [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ] c ] ] [ * [ - b [ strlen d ] ] [ - b [ strlen d ] ] ] ] ] ]
[ reduce [ map [ filter a [ combine ! is_prime ] ] square ] 0 max ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ map [ range 0 [ min [ len a ] [ len [ map c [ partial1 b + ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map c [ partial1 b + ] ] arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ > [ deref [ sort a ] [ / [ len a ] 2 ] ] [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ slice [ sort [ reverse a ] ] 0 [ strlen b ] ] 0 + ]
[ map [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] * ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ filter c [ lambda1 [ reduce [ map [ range 0 b ] [ partial0 arg1 == ] ] false || ] ] ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ filter c [ lambda1 [ reduce [ map [ range 0 b ] [ partial0 arg1 == ] ] false || ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reverse [ map [ filter a [ partial1 b > ] ] [ partial1 c * ] ] ]
[ filter [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ filter [ reverse a ] [ partial1 [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] > ] ]
[ filter [ slice a b c ] [ partial1 [ reduce d 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len e ] ] [ deref e arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] < ] ]
[ digits [ min [ reduce a 1000000000 min ] b ] ]
[ is_sorted [ slice a b [ reduce [ slice [ sort c ] 0 d ] 0 + ] ] ]
[ reduce [ map [ range 0 [ len [ slice [ range 1 a ] b c ] ] ] [ lambda1 [ == [ deref [ slice [ range 1 a ] b c ] arg1 ] [ deref [ range 1 a ] [ - [ - [ len [ range 1 a ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ map a [ partial1 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] - ] ]
[ map [ filter [ map a [ partial1 b - ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] square ]
[ reduce [ map [ range 0 [ len [ filter a [ partial1 [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ < [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] > ] ] ] ] [ lambda1 [ == [ deref [ filter a [ partial1 [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ < [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] > ] ] arg1 ] [ deref [ filter a [ partial1 [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ < [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] > ] ] [ - [ - [ len [ filter a [ partial1 [ reduce [ map [ range 0 [ min [ len d
[ reduce [ reverse [ digits [ + [ * [ - a [ reduce [ filter c [ partial0 [ reduce c 0 max ] > ] ] 0 max ] ] [ - a [ reduce [ filter c [ partial0 [ reduce c 0 max ] > ] ] 0 max ] ] ] [ * [ - b d ] [ - b d ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map [ range 0 [ + [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ] ] [ partial1 b * ] ]
[ * [ max a b ] [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ > [ * [ head a ] b ] 1 ]
[ digits [ strlen a ] ]
[ floor [ sqrt [ + [ * [ - a [ reduce d 1000000000 min ] ] [ - a [ reduce d 1000000000 min ] ] ] [ * [ - [ * c b ] e ] [ - [ * c b ] e ] ] ] ] ]
[ range 0 [ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ + [ * [ - [ deref [ sort [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] ] c ] [ - [ deref [ sort [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] ] c ] ] [ * [ - b d ] [ - b d ] ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] * ] ] ] ] ]
[ floor [ sqrt [ + [ * [ - [ head a ] c ] [ - [ head a ] c ] ] [ * [ - b [ reduce [ reverse [ digits d ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ - b [ reduce [ reverse [ digits d ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] ] ] ]
[ map a [ partial1 b - ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ digits a ] 1000000000 min ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ slice [ reverse [ sort [ digits [ head a ] ] ] ] 0 b ] 0 + ]
[ filter [ slice [ reverse a ] [ / [ len [ reverse a ] ] 2 ] [ len [ reverse a ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len d ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ] - ] ]
[ filter [ reverse a ] [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ]
[ map [ filter [ digits a ] [ combine ! is_prime ] ] square ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ deref [ range 1 [ + [ head a ] 1 ] ] [ / [ len [ range 1 [ + [ head a ] 1 ] ] ] 2 ] ]
[ deref [ sort [ slice a [ strlen b ] c ] ] [ / [ len [ slice a [ strlen b ] c ] ] 2 ] ]
[ reduce [ slice [ sort a ] 0 [ reduce [ filter b [ combine ! is_prime ] ] 0 + ] ] 0 + ]
[ range 0 [ + a 1 ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] + ] ] ] ]
[ range 0 [ + a 1 ] ]
[ reduce [ map [ filter a is_prime ] square ] 1000000000 min ]
[ reduce [ range 0 [ + [ deref [ digits a ] [ / [ len [ digits a ] ] 2 ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 [ reduce c 0 max ] > ] ]
[ map a [ partial1 [ head [ slice b [ / [ len b ] 2 ] [ len b ] ] ] + ] ]
[ filter a [ lambda1 [ reduce [ map [ filter c [ partial1 [ len b ] > ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ map [ map [ digits a ] square ] square ]
[ + [ * [ - [ reduce [ slice [ sort a ] 0 b ] 0 + ] d ] [ - [ reduce [ slice [ sort a ] 0 b ] 0 + ] d ] ] [ * [ - c [ reduce [ filter e [ partial0 [ reduce e 0 max ] > ] ] 0 max ] ] [ - c [ reduce [ filter e [ partial0 [ reduce e 0 max ] > ] ] 0 max ] ] ] ]
[ map [ filter [ filter a [ combine ! is_prime ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] square ]
[ floor [ sqrt [ + [ * [ - [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] g ] [ - [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] g ] ] [ * [ - f h ] [ - f h ] ] ] ] ]
[ reduce [ map [ range 0 [ min [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ len [ slice d b c ] ] ] ] [ lambda1 [ if [ > [ deref [ slice a [ / [ len a ] 2 ] [ len a ] ] arg1 ] [ deref [ slice d b c ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter a [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ digits b ] ] ] [ deref [ digits b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] > ] ]
[ map [ range 1 [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] square ]
[ reduce [ reverse [ digits [ reduce [ map a [ partial1 b + ] ] 1000000000 min ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ filter a [ partial1 [ - [ reduce [ slice e b c ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] > ] ]
[ map [ reverse a ] [ partial1 [ reduce b 0 + ] + ] ]
[ digits [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ]
[ reduce [ map [ range 0 [ len [ map a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] + ] ] ] ] [ lambda1 [ == [ deref [ map a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] + ] ] arg1 ] [ deref [ map a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] + ] ] [ - [ - [ len [ map a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] + ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce [ reverse [ digits [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 + ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ]
[ reverse [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] ]
[ reduce [ filter [ range 0 [ + a 1 ] ] [ partial1 b < ] ] 0 max ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ deref [ reverse a ] [ / [ len [ reverse a ] ] 2 ] ] ]
[ map [ digits [ deref [ sort a ] [ / [ len a ] 2 ] ] ] [ partial0 2 * ] ]
[ reduce [ range 0 [ + [ reduce [ reverse [ digits [ reduce a 1000000000 min ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ <= [ reduce [ slice [ reverse [ sort [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] 0 c ] 0 + ] 0 ]
[ reverse [ slice a [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] ]
[ reduce [ map [ range 0 [ min [ len [ reverse a ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ reverse a ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ range 0 [ + a 1 ] ]
[ - [ reduce [ range 0 [ max a b ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce [ reverse [ digits [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 + ]
[ map [ reverse [ filter a [ partial1 b < ] ] ] square ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ - [ reduce [ range 0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ reverse [ digits [ max [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] d ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ combine ! is_prime ] ] square ]
[ head [ filter [ slice a b c ] [ partial1 d > ] ] ]
[ + [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] [ reduce b 0 max ] ]
[ - [ reduce [ range 1 [ + [ deref a [ / [ len a ] 2 ] ] 1 ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ filter [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 b - ] ] [ partial0 [ reduce [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 b - ] ] 0 max ] > ] ] 0 max ]
[ floor [ sqrt [ + [ * [ - [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] g ] [ - [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] g ] ] [ * [ - f h ] [ - f h ] ] ] ] ] ]
[ digits [ reduce [ range 0 [ + [ reduce [ slice [ sort a ] 0 b ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ range 0 [ + [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ range 1 [ + [ * [ - [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ] [ - [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ] ] [ * [ - c e ] [ - c e ] ] ] ]
[ reduce [ map a [ partial0 2 * ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter b [ combine ! is_prime ] ] ] ] [ deref [ filter b [ combine ! is_prime ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ range 0 [ + [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] 1 ] ] 0 max ]
[ reduce [ filter [ map [ reverse a ] square ] [ partial0 [ reduce [ map [ reverse a ] square ] 0 max ] > ] ] 0 max ]
[ digits [ deref a [ / [ len a ] 2 ] ] ]
[ filter [ map [ range 0 a ] [ partial1 b - ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ slice [ reverse [ sort [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] 0 c ] 0 + ] ]
[ reduce [ map [ range 0 [ min [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ len [ slice e b c ] ] ] ] [ lambda1 [ if [ < [ deref [ slice a [ / [ len a ] 2 ] [ len a ] ] arg1 ] [ deref [ slice e b c ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ slice [ reverse a ] [ / [ len [ reverse a ] ] 2 ] [ len [ reverse a ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ reduce [ range 0 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ reverse b ] ] ] [ deref [ reverse b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ * [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ] [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len [ digits b ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ digits b ] arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ * [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ slice a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ filter [ slice e b c ] [ lambda1 [ reduce [ map e [ partial0 arg1 == ] ] false || ] ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ filter [ slice e b c ] [ lambda1 [ reduce [ map e [ partial0 arg1 == ] ] false || ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ range 0 [ + [ - [ reduce [ reverse a ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ map [ reverse b ] [ partial0 2 * ] ] ] ] [ deref [ map [ reverse b ] [ partial0 2 * ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ partial0 [ reduce [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] 1000000000 min ] < ] ] 1000000000 min ] ]
[ reduce [ range 0 [ + [ reduce [ digits a ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ filter a [ combine ! is_prime ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ range 0 [ + [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ digits [ head [ reverse a ] ] ]
[ reduce [ map [ range 0 [ len [ filter [ reverse a ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] ] [ lambda1 [ == [ deref [ filter [ reverse a ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] arg1 ] [ deref [ filter [ reverse a ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ - [ - [ len [ filter [ reverse a ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ digits [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ reduce [ reverse [ digits [ reduce [ range 0 [ + [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ slice a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] [ floor [ sqrt [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ]
[ - [ reduce [ range 0 [ max a b ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ map [ map [ digits a ] square ] [ partial1 b * ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ range 0 [ + [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ slice [ reverse a ] [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ]
[ map a [ partial1 [ - [ reduce [ slice b [ / [ len b ] 2 ] [ len b ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] * ] ]
[ filter a [ partial1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] > ] ]
[ reverse [ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] square ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ slice b [ / [ len b ] 2 ] [ len b ] ] [ partial0 2 * ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map [ slice b [ / [ len b ] 2 ] [ len b ] ] [ partial0 2 * ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ map [ filter [ range 0 [ len [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] int-deref ] ]
[ - [ reduce [ range 1 [ + [ deref [ sort a ] [ / [ len a ] 2 ] ] 1 ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ digits [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ]
[ map [ digits a ] [ partial1 [ max c b ] * ] ]
[ min [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ range 0 [ len [ map [ map a [ partial1 b * ] ] [ partial1 c * ] ] ] ] [ lambda1 [ == [ deref [ map [ map a [ partial1 b * ] ] [ partial1 c * ] ] arg1 ] [ deref [ map [ map a [ partial1 b * ] ] [ partial1 c * ] ] [ - [ - [ len [ map [ map a [ partial1 b * ] ] [ partial1 c * ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ deref [ map [ digits a ] [ partial0 2 * ] ] [ / [ len [ map [ digits a ] [ partial0 2 * ] ] ] 2 ] ]
[ map [ slice [ filter a [ partial1 b > ] ] 0 [ / [ len [ filter a [ partial1 b > ] ] ] 2 ] ] square ]
[ - [ reduce [ digits [ max a b ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ filter [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ head [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] ]
[ filter [ reverse [ filter a [ partial1 b < ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ map [ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b - ] ] [ partial0 2 * ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map a [ partial1 b - ] ]
[ reduce [ map [ range 0 [ len [ filter a [ lambda1 [ reduce [ map [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 arg1 == ] ] false || ] ] ] ] ] [ lambda1 [ == [ deref [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] arg1 ] [ deref [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ - [ - [ len [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ floor [ sqrt [ + [ * [ - [ reduce [ slice a b c ] 1000000000 min ] e ] [ - [ reduce [ slice a b c ] 1000000000 min ] e ] ] [ * [ - f h ] [ - f h ] ] ] ] ]
[ reduce [ map a [ partial0 2 * ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter b [ combine ! is_prime ] ] ] ] [ deref [ filter b [ combine ! is_prime ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] * ] ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ reverse [ digits [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ slice [ slice [ filter a is_prime ] [ / [ len [ filter a is_prime ] ] 2 ] [ len [ filter a is_prime ] ] ] 0 [ / [ len [ slice [ filter a is_prime ] [ / [ len [ filter a is_prime ] ] 2 ] [ len [ filter a is_prime ] ] ] ] 2 ] ]
[ reduce [ filter [ filter a [ lambda1 [ reduce [ map [ filter c [ partial1 b < ] ] [ partial0 arg1 == ] ] false || ] ] ] [ partial0 [ reduce [ filter a [ lambda1 [ reduce [ map [ filter c [ partial1 b < ] ] [ partial0 arg1 == ] ] false || ] ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ reduce [ reverse [ digits [ deref a [ / [ len a ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ slice [ reverse [ reverse a ] ] 0 [ / [ len [ reverse [ reverse a ] ] ] 2 ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ range 1 [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ range 1 [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ range 0 [ + a 1 ] ]
[ filter [ map a [ partial1 b - ] ] [ partial1 [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] < ] ]
[ deref [ range 0 [ + [ deref a [ / [ len a ] 2 ] ] 1 ] ] [ / [ len [ range 0 [ + [ deref a [ / [ len a ] 2 ] ] 1 ] ] ] 2 ] ]
[ filter [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ head [ filter a [ partial1 b > ] ] ]
[ digits [ strlen [ reduce a "z" str_min ] ] ]
[ deref [ filter a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] < ] ] [ / [ len [ filter a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] < ] ] ] 2 ] ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ digits [ + a [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map [ map a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] * ] ] [ partial0 2 * ] ]
[ is_sorted [ map a [ partial1 b * ] ] ]
[ reduce [ map [ range 0 [ min [ len [ map [ digits a ] square ] ] [ len b ] ] ] [ lambda1 [ if [ < [ deref [ map [ digits a ] square ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] is_prime ]
[ slice [ reverse [ range 1 a ] ] [ / [ len [ reverse [ range 1 a ] ] ] 2 ] [ len [ reverse [ range 1 a ] ] ] ]
[ filter [ slice a b c ] [ partial1 [ floor [ sqrt [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] ] < ] ]
[ map [ filter a [ partial1 b < ] ] [ partial1 [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] - ] ]
[ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ / [ reduce d 0 + ] [ len d ] ] ] [ - b [ / [ reduce d 0 + ] [ len d ] ] ] ] ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] + ] ] ] ]
[ filter [ reverse [ slice a b c ] ] [ partial1 e < ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ filter [ slice a b c ] [ partial0 [ reduce [ slice a b c ] 0 max ] > ] ] 0 max ] ]
[ digits [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ map c [ partial1 b + ] ] ] ] [ deref [ map c [ partial1 b + ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ reduce [ reverse [ digits d ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ - b [ reduce [ reverse [ digits d ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] ] ] ] ]
[ * a [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ slice [ sort [ filter a is_prime ] ] 0 [ max c b ] ] 0 + ]
[ digits [ strlen a ] ]
[ digits [ strlen [ reduce a "z" str_min ] ] ]
[ filter a [ lambda1 [ reduce [ map [ range 0 [ + b 1 ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ + [ * [ - [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] [ - [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] ] [ * [ - b [ reduce [ slice [ sort d ] 0 e ] 0 + ] ] [ - b [ reduce [ slice [ sort d ] 0 e ] 0 + ] ] ] ]
[ - [ reduce [ range 1 a ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ + [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] b ] ]
[ reduce [ filter [ filter a [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] > ] ] [ partial0 [ reduce [ filter a [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] > ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ min a [ reduce [ reverse [ digits [ head c ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ map [ map a [ partial1 [ * c b ] - ] ] [ partial0 2 * ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] square ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ map [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] square ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b < ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ filter a [ lambda1 [ reduce [ map [ digits [ reduce [ slice [ reverse [ sort c ] ] 0 b ] 0 + ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ head [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ map [ slice a [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] c ] [ partial0 2 * ] ]
[ filter [ filter a is_prime ] [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] < ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ + [ * [ - [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ] c ] [ - [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ] c ] ] [ * [ - b d ] [ - b d ] ] ]
[ reduce [ map [ slice a b c ] [ partial0 2 * ] ] 0 max ]
[ head [ filter a [ partial1 b > ] ] ]
[ map [ range 0 [ + a 1 ] ] [ partial1 b - ] ]
[ head [ filter a [ partial1 b > ] ] ]
[ digits [ len [ filter a [ combine ! is_prime ] ] ] ]
[ reverse [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] ]
[ head [ filter [ filter a [ partial1 b > ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ]
[ range 0 [ + [ - [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ] ]
[ digits [ strlen [ reduce a "z" str_min ] ] ]
[ filter [ filter [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ combine ! is_prime ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ range 1 [ reduce [ reverse [ digits [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ map [ map [ filter a [ partial1 b < ] ] [ partial1 c - ] ] square ]
[ map [ digits [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] ] [ partial0 2 * ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ filter [ slice d b c ] [ lambda1 [ reduce [ map d [ partial0 arg1 == ] ] false || ] ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ filter [ slice d b c ] [ lambda1 [ reduce [ map d [ partial0 arg1 == ] ] false || ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ map [ filter [ range 0 [ len [ slice [ reverse a ] 0 [ / [ len [ reverse a ] ] 2 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ slice [ reverse a ] 0 [ / [ len [ reverse a ] ] 2 ] ] int-deref ] ]
[ range 1 [ reduce [ filter [ reverse a ] [ partial0 [ reduce [ reverse a ] 1000000000 min ] < ] ] 1000000000 min ] ]
[ head [ map [ map a [ partial1 b - ] ] [ partial1 c - ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ filter b [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 2 * ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map [ filter b [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 2 * ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ len [ filter [ reverse a ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] ] [ lambda1 [ == [ deref [ filter [ reverse a ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] arg1 ] [ deref [ filter [ reverse a ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ - [ - [ len [ filter [ reverse a ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ map a [ partial1 b - ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ reverse [ range 0 b ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ reverse [ range 0 b ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ - [ reduce [ range 0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 c + ] ] ] ] + ] ]
[ max [ reduce [ slice [ sort a ] 0 b ] 0 + ] [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 c + ] ] ] ] ]
[ reduce [ reverse [ digits [ deref [ map a [ partial0 2 * ] ] [ / [ len [ map a [ partial0 2 * ] ] ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ filter [ map a [ partial1 [ * c b ] + ] ] [ partial0 [ reduce [ map a [ partial1 [ * c b ] + ] ] 0 max ] > ] ] 0 max ]
[ deref [ digits [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ] [ / [ len [ digits [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ] ] 2 ] ]
[ reverse [ map a [ partial1 [ min c b ] + ] ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter [ filter c [ partial1 b < ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] ] ] [ deref [ filter [ filter c [ partial1 b < ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ slice a [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] d ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len e ] ] [ deref e arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ map [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] 1 ] ] [ partial0 2 * ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] ]
[ reduce [ reverse [ digits [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ range 0 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ head [ slice a 0 [ / [ len a ] 2 ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ reverse [ digits [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reverse [ map [ filter [ range 0 [ len [ slice a 0 [ / [ len a ] 2 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ slice a 0 [ / [ len a ] 2 ] ] int-deref ] ] ]
[ reduce [ reverse [ digits [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 [ reduce c 1000000000 min ] > ] ]
[ reduce [ map a [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] - ] ] 1000000000 min ]
[ reduce [ filter [ slice [ reverse a ] b c ] [ partial0 [ reduce [ slice [ reverse a ] b c ] 0 max ] > ] ] 0 max ]
[ - [ reduce [ slice [ reverse a ] b c ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ slice [ sort [ digits a ] ] 0 [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] b ] ] 0 + ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ digits [ reduce [ range 0 [ + [ head a ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ slice d b c ] [ partial0 2 * ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map [ slice d b c ] [ partial0 2 * ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ filter [ slice [ range 0 [ + a 1 ] ] [ / [ len [ range 0 [ + a 1 ] ] ] 2 ] [ len [ range 0 [ + a 1 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ reduce [ range 0 [ + [ reduce [ reverse [ digits [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ filter [ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] is_prime ]
[ filter [ reverse [ filter a [ partial1 b < ] ] ] [ partial1 c < ] ]
[ reduce [ range 1 [ head a ] ] 0 max ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ partial1 b + ] ]
[ map [ reverse a ] [ partial1 [ deref b [ / [ len b ] 2 ] ] * ] ]
[ digits [ reduce [ range 0 [ + [ head a ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ reverse [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ range 0 [ min [ len [ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ partial0 2 * ] ] ] [ len b ] ] ] [ lambda1 [ if [ < [ deref [ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ partial0 2 * ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ reduce [ reverse d ] 0 max ] ] [ - b [ reduce [ reverse d ] 0 max ] ] ] ] ] ]
[ range 0 [ + a 1 ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] < ] ]
[ reduce [ slice a 0 [ / [ len a ] 2 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ map b [ partial0 2 * ] ] ] ] [ deref [ map b [ partial0 2 * ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ map [ filter a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] > ] ] square ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ range 0 [ + [ head [ filter a [ partial1 b < ] ] ] 1 ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] * ] ] ] ] ]
[ reduce [ slice [ sort [ reverse a ] ] 0 [ min c b ] ] 0 + ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ is_sorted [ filter a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] > ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ deref [ sort [ range 0 a ] ] [ / [ len [ range 0 a ] ] 2 ] ] ]
[ filter [ slice a 0 [ / [ len a ] 2 ] ] [ lambda1 [ reduce [ map [ filter b [ combine ! is_prime ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ deref [ digits [ reduce a 1000000000 min ] ] [ / [ len [ digits [ reduce a 1000000000 min ] ] ] 2 ] ]
[ reduce [ filter [ slice [ reverse a ] b c ] [ partial0 [ reduce [ slice [ reverse a ] b c ] 0 max ] > ] ] 0 max ]
[ reduce [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] square ] 0 max ]
[ reduce [ range 0 [ + [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ - [ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] 1 ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ digits [ head [ slice a b c ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ map [ range 0 [ min [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ slice a [ / [ len a ] 2 ] [ len a ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ reverse [ digits [ len a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ slice [ sort a ] 0 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] ] 0 + ]
[ reduce [ filter [ filter [ filter a [ partial1 b < ] ] [ partial1 c < ] ] [ partial0 [ reduce [ filter [ filter a [ partial1 b < ] ] [ partial1 c < ] ] 0 max ] > ] ] 0 max ]
[ reduce [ reverse [ digits [ head [ filter a [ partial1 b < ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ * a [ reduce [ slice e b c ] 0 max ] ]
[ reduce [ slice [ reverse [ sort [ digits [ head a ] ] ] ] 0 b ] 0 + ]
[ map [ range 0 a ] [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] + ] ]
[ - [ reduce [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ is_sorted [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 b + ] ] ]
[ reduce [ slice [ reverse [ sort [ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b + ] ] ] ] 0 c ] 0 + ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ slice [ reverse [ sort a ] ] 0 [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] 0 + ] ]
[ reduce [ map [ range 0 [ len [ filter [ range 0 [ + a 1 ] ] [ partial1 b > ] ] ] ] [ lambda1 [ == [ deref [ filter [ range 0 [ + a 1 ] ] [ partial1 b > ] ] arg1 ] [ deref [ filter [ range 0 [ + a 1 ] ] [ partial1 b > ] ] [ - [ - [ len [ filter [ range 0 [ + a 1 ] ] [ partial1 b > ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ reduce [ filter [ digits [ max a b ] ] [ partial0 [ reduce [ digits [ max a b ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ filter [ slice a b c ] [ combine ! is_prime ] ]
[ - [ reduce [ map a [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] * ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ slice [ sort a ] 0 [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ]
[ max [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ slice [ sort a ] 0 [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ]
[ reduce [ filter a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ len [ range 0 [ + [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ + [ * [ - a c ] [ - a c ] ] [ * [ - [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] d ] [ - [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] d ] ] ] ]
[ filter [ filter a [ partial1 [ + c b ] < ] ] [ combine ! is_prime ] ]
[ filter [ map [ filter [ range 0 [ len [ range 0 a ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ range 0 a ] int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ slice [ sort [ slice a b c ] ] 0 e ] 0 + ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ digits [ strlen a ] ]
[ map [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ partial1 b - ] ]
[ filter a [ lambda1 [ reduce [ map [ filter c [ partial1 [ len b ] > ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ map [ reverse b ] [ partial0 2 * ] ] ] ] [ deref [ map [ reverse b ] [ partial0 2 * ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ map [ filter [ range 1 [ + a 1 ] ] [ partial1 b < ] ] square ]
[ map [ map [ slice a 0 [ / [ len a ] 2 ] ] square ] [ partial0 2 * ] ]
[ slice [ map a [ partial1 b * ] ] c [ head d ] ]
[ floor [ sqrt [ + [ * [ - a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len d ] ] [ deref d arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] [ - a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len d ] ] [ deref d arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ] [ * [ - b [ reduce [ range 0 [ + e 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ] [ - b [ reduce [ range 0 [ + e 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0
[ range 0 [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ * d e ] ] [ - b [ * d e ] ] ] ] ] ] ] ]
[ digits [ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ > [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] 1 ]
[ reduce [ slice a 0 [ / [ len a ] 2 ] ] 0 max ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map d [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] * ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map d [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] * ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ digits [ min a [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ slice [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ head c ] d ]
[ reduce [ filter [ map [ filter [ range 0 [ len [ slice a 0 [ / [ len a ] 2 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ slice a 0 [ / [ len a ] 2 ] ] int-deref ] ] [ partial0 [ reduce [ map [ filter [ range 0 [ len [ slice a 0 [ / [ len a ] 2 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ slice a 0 [ / [ len a ] 2 ] ] int-deref ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ filter [ range 0 a ] [ partial1 [ reduce [ slice [ reverse [ sort c ] ] 0 b ] 0 + ] < ] ]
[ map a [ partial1 b - ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ digits [ strlen a ] ]
[ slice [ map a square ] [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] c ]
[ floor [ sqrt [ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] ] ] ] ]
[ > [ reduce [ reverse [ digits [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] b ]
[ reduce [ map [ range 0 [ len [ map [ filter [ range 0 [ len [ slice a 0 [ / [ len a ] 2 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ slice a 0 [ / [ len a ] 2 ] ] int-deref ] ] ] ] [ lambda1 [ == [ deref [ map [ filter [ range 0 [ len [ slice a 0 [ / [ len a ] 2 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ slice a 0 [ / [ len a ] 2 ] ] int-deref ] ] arg1 ] [ deref [ map [ filter [ range 0 [ len [ slice a 0 [ / [ len a ] 2 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ slice a 0 [ / [ len a ] 2 ] ] int-deref ] ] [ - [ - [ len [ map [ filter [ range 0 [
[ reduce [ map [ range 0 [ min [ len [ slice a 0 [ / [ len a ] 2 ] ] ] [ len [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] ] [ lambda1 [ if [ > [ deref [ slice a 0 [ / [ len a ] 2 ] ] arg1 ] [ deref [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ digits [ strlen a ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map [ reverse a ] [ partial1 [ strlen b ] + ] ]
[ range 0 [ strlen [ reduce a "" str_concat ] ] ]
[ slice a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ]
[ map a [ partial1 [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] * ] ]
[ * a [ reduce [ reverse [ digits [ strlen b ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ slice a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] [ - [ reduce d 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ reverse [ digits [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ range 0 [ + a 1 ] ]
[ map [ digits a ] [ partial1 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] * ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter d [ lambda1 [ reduce [ map [ filter c [ partial1 b < ] ] [ partial0 arg1 == ] ] false || ] ] ] ] ] [ deref [ filter d [ lambda1 [ reduce [ map [ filter c [ partial1 b < ] ] [ partial0 arg1 == ] ] false || ] ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ map [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial1 [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ > [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] - ] ]
[ floor [ sqrt [ + [ * [ - a [ / [ reduce c 0 + ] [ len c ] ] ] [ - a [ / [ reduce c 0 + ] [ len c ] ] ] ] [ * [ - b [ reduce [ reverse [ digits d ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ - b [ reduce [ reverse [ digits d ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] ] ] ]
[ slice [ map a [ partial0 2 * ] ] [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ < [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ]
[ max [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] c ]
[ - [ reduce [ slice [ reverse a ] b c ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ filter [ map a [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] - ] ] [ combine ! is_prime ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ filter d [ lambda1 [ reduce [ map [ slice d b c ] [ partial0 arg1 == ] ] false || ] ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ filter d [ lambda1 [ reduce [ map [ slice d b c ] [ partial0 arg1 == ] ] false || ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ is_sorted [ slice [ reverse a ] b c ] ]
[ reduce [ filter [ filter [ filter a [ partial1 b < ] ] [ combine ! is_prime ] ] [ partial0 [ reduce [ filter [ filter a [ partial1 b < ] ] [ combine ! is_prime ] ] 0 max ] > ] ] 0 max ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ digits b ] square ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map [ digits b ] square ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ map [ reverse [ range 0 [ + a 1 ] ] ] square ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ filter [ filter [ map a [ partial1 b - ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ reduce [ filter [ map a [ partial1 b - ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] 0 max ] > ] ] 0 max ]
[ reduce [ map [ range 0 [ len [ digits [ reduce a 1000000000 min ] ] ] ] [ lambda1 [ == [ deref [ digits [ reduce a 1000000000 min ] ] arg1 ] [ deref [ digits [ reduce a 1000000000 min ] ] [ - [ - [ len [ digits [ reduce a 1000000000 min ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ - [ reduce [ filter a [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] > ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ head [ filter a [ partial1 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] < ] ] ]
[ digits [ strlen a ] ]
[ head [ slice [ digits a ] 0 [ / [ len [ digits a ] ] 2 ] ] ]
[ map a [ partial0 2 * ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ min a [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len a ] [ len [ map c [ partial1 b * ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ map c [ partial1 b * ] ] arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ slice [ reverse [ filter a is_prime ] ] 0 [ / [ len [ reverse [ filter a is_prime ] ] ] 2 ] ]
[ digits [ strlen [ reduce a "z" str_min ] ] ]
[ reduce [ map [ range 0 [ len [ filter a [ partial1 [ deref b [ / [ len b ] 2 ] ] < ] ] ] ] [ lambda1 [ == [ deref [ filter a [ partial1 [ deref b [ / [ len b ] 2 ] ] < ] ] arg1 ] [ deref [ filter a [ partial1 [ deref b [ / [ len b ] 2 ] ] < ] ] [ - [ - [ len [ filter a [ partial1 [ deref b [ / [ len b ] 2 ] ] < ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ range 0 [ + a 1 ] ]
[ deref [ sort [ map [ map a [ partial1 b - ] ] square ] ] [ / [ len [ map [ map a [ partial1 b - ] ] square ] ] 2 ] ]
[ map [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial1 b * ] ]
[ reduce [ slice a b c ] 1000000000 min ]
[ floor [ sqrt [ + [ * [ - a [ min c d ] ] [ - a [ min c d ] ] ] [ * [ - b [ reduce [ filter e [ partial0 [ reduce e 1000000000 min ] < ] ] 1000000000 min ] ] [ - b [ reduce [ filter e [ partial0 [ reduce e 1000000000 min ] < ] ] 1000000000 min ] ] ] ] ] ]
[ reverse [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] ]
[ map a [ partial1 [ reduce [ range 0 [ + [ reduce [ slice [ sort c ] 0 b ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] * ] ]
[ reduce [ map [ range 0 [ min [ len [ filter [ range 0 a ] [ partial1 b < ] ] ] [ len c ] ] ] [ lambda1 [ if [ < [ deref [ filter [ range 0 a ] [ partial1 b < ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ filter [ map a [ partial1 b + ] ] [ partial0 [ reduce [ map a [ partial1 b + ] ] 1000000000 min ] < ] ] 1000000000 min ] ]
[ slice a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] [ reduce [ map [ range 0 [ min [ len c ] [ len d ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] square ] 0 max ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ range 0 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter b [ combine ! is_prime ] ] ] ] [ deref [ filter b [ combine ! is_prime ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ min a [ reduce [ reverse [ digits [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ + [ * [ - [ strlen a ] c ] [ - [ strlen a ] c ] ] [ * [ - b [ reduce [ reverse [ digits d ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ - b [ reduce [ reverse [ digits d ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] ]
[ slice [ reverse [ range 0 [ + a 1 ] ] ] [ / [ len [ reverse [ range 0 [ + a 1 ] ] ] ] 2 ] [ len [ reverse [ range 0 [ + a 1 ] ] ] ] ]
[ reduce [ range 0 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ map c [ partial1 b + ] ] ] ] [ deref [ map c [ partial1 b + ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ - [ reduce [ range 1 [ + [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ] 1 ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ slice a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] [ reduce [ map [ range 0 [ min [ len d ] [ len e ] ] ] [ lambda1 [ if [ < [ deref d arg1 ] [ deref e arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ deref [ sort [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ] [ / [ len [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ] 2 ] ]
[ reduce [ filter [ slice [ slice a 0 [ / [ len a ] 2 ] ] 0 [ / [ len [ slice a 0 [ / [ len a ] 2 ] ] ] 2 ] ] [ partial0 [ reduce [ slice [ slice a 0 [ / [ len a ] 2 ] ] 0 [ / [ len [ slice a 0 [ / [ len a ] 2 ] ] ] 2 ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ - [ reduce [ range 0 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ slice b [ / [ len b ] 2 ] [ len b ] ] ] ] [ deref [ slice b [ / [ len b ] 2 ] [ len b ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ floor [ sqrt [ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] ] ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ range 0 [ + [ head a ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ slice e [ deref [ sort b ] [ / [ len b ] 2 ] ] c ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ slice e [ deref [ sort b ] [ / [ len b ] 2 ] ] c ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] ] 0 + ]
[ >= [ head a ] 1 ]
[ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ reduce [ range 0 [ + [ reduce [ filter d [ partial0 [ reduce d 0 max ] > ] ] 0 max ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ] [ - b [ reduce [ range 0 [ + [ reduce [ filter d [ partial0 [ reduce d 0 max ] > ] ] 0 max ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ map [ filter [ map a [ partial1 b - ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] square ]
[ digits [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1000000000 min ] ]
[ reverse [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] ]
[ reduce [ filter [ slice [ reverse a ] b c ] [ partial0 [ reduce [ slice [ reverse a ] b c ] 0 max ] > ] ] 0 max ]
[ head [ map a [ partial1 b - ] ] ]
[ max [ - [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ reduce [ range 0 [ + [ deref [ sort [ map a [ partial1 b - ] ] ] [ / [ len [ map a [ partial1 b - ] ] ] 2 ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ]
[ slice a [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] d ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ slice [ reverse [ sort [ digits [ head a ] ] ] ] 0 b ] 0 + ]
[ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ partial1 [ head b ] * ] ]
[ reverse [ map [ range 0 [ + a 1 ] ] square ] ]
[ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 [ deref [ sort c ] [ / [ len c ] 2 ] ] * ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ min a [ reduce [ slice [ sort d ] 0 [ min c b ] ] 0 + ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] + ] ] ] ]
[ > [ reduce [ reverse [ digits [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ is_sorted [ map [ slice a b c ] [ partial0 2 * ] ] ]
[ slice [ range 1 [ + a b ] ] [ / [ len [ range 1 [ + a b ] ] ] 2 ] [ len [ range 1 [ + a b ] ] ] ]
[ map [ slice a [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] d ] square ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ filter a [ partial1 [ floor [ sqrt [ + [ * [ - f [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 c * ] ] ] ] ] ] [ - f [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 c * ] ] ] ] ] ] ] [ * [ - b d ] [ - b d ] ] ] ] ] > ] ]
[ floor [ sqrt [ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] ] ] ] ]
[ reverse [ filter [ slice a b c ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ]
[ filter [ range 1 a ] [ lambda1 [ reduce [ map [ slice b c ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ reverse [ digits [ reduce [ slice a b c ] 0 max ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter [ slice a b c ] [ partial1 [ reduce [ slice [ sort e ] 0 f ] 0 + ] < ] ]
[ range 0 [ + [ reduce [ range 0 [ + [ head a ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] 1 ] ]
[ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ digits [ strlen a ] ]
[ floor [ sqrt [ + [ * [ - a [ reduce [ filter c [ partial0 [ reduce c 0 max ] > ] ] 0 max ] ] [ - a [ reduce [ filter c [ partial0 [ reduce c 0 max ] > ] ] 0 max ] ] ] [ * [ - b [ strlen d ] ] [ - b [ strlen d ] ] ] ] ] ]
[ head [ filter a [ partial1 [ reduce b 1000000000 min ] > ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ filter [ range 1 [ + a 1 ] ] [ partial0 [ reduce [ range 1 [ + a 1 ] ] 0 max ] > ] ] 0 max ] ]
[ reduce [ map [ range 0 [ min [ len [ map a [ partial1 b * ] ] ] [ len [ map c [ partial1 d + ] ] ] ] ] [ lambda1 [ if [ > [ deref [ map a [ partial1 b * ] ] arg1 ] [ deref [ map c [ partial1 d * ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ head [ slice a b [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] c ] ] ]
[ map [ filter a [ lambda1 [ reduce [ map [ map c [ partial1 b - ] ] [ partial0 arg1 == ] ] false || ] ] ] square ]
[ reverse [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ is_sorted [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ]
[ reduce [ filter [ digits [ head a ] ] [ partial0 [ reduce [ digits [ head a ] ] 0 max ] > ] ] 0 max ]
[ head [ filter a [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] > ] ] ]
[ reduce [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ partial1 b < ] ] 0 max ]
[ map [ map [ slice a b c ] [ partial1 d + ] ] square ]
[ floor [ sqrt [ + [ * [ - a [ deref [ sort [ filter c [ lambda1 [ reduce [ map d [ partial0 arg1 == ] ] false || ] ] ] ] [ / [ len [ filter c [ lambda1 [ reduce [ map d [ partial0 arg1 == ] ] false || ] ] ] ] 2 ] ] ] [ - a [ deref [ sort [ filter c [ lambda1 [ reduce [ map d [ partial0 arg1 == ] ] false || ] ] ] ] [ / [ len [ filter c [ lambda1 [ reduce [ map d [ partial0 arg1 == ] ] false || ] ] ] ] 2 ] ] ] ] [ * [ - b e ] [ - b e ] ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ head [ filter [ range 1 a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ filter [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c > ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] * ] ] ] ] ]
[ is_sorted [ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ partial1 b + ] ] ]
[ filter a [ partial1 [ reduce [ reverse [ digits [ deref [ sort b ] [ / [ len b ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] < ] ]
[ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] square ]
[ reduce [ map [ range 0 [ len [ filter [ slice a b c ] [ partial1 e < ] ] ] ] [ lambda1 [ == [ deref [ filter [ slice a b c ] [ partial1 e < ] ] arg1 ] [ deref [ filter [ slice a b c ] [ partial1 e < ] ] [ - [ - [ len [ filter [ slice a b c ] [ partial1 e < ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ is_sorted [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ combine ! is_prime ] ] ]
[ head [ filter a [ partial1 b > ] ] ]
[ map [ filter [ slice a b c ] [ lambda1 [ reduce [ map e [ partial0 arg1 == ] ] false || ] ] ] square ]
[ filter [ slice [ digits a ] [ / [ len [ digits a ] ] 2 ] [ len [ digits a ] ] ] is_prime ]
[ max [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ deref [ reverse a ] [ / [ len [ reverse a ] ] 2 ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ filter [ digits b ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ filter [ digits b ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ filter [ map [ map a [ partial1 b + ] ] square ] [ partial0 [ reduce [ map [ map a [ partial1 b * ] ] [ partial0 2 * ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ map [ map a square ] [ partial1 [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ > [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] + ] ]
[ map a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ slice [ reverse [ sort c ] ] 0 b ] 0 + ] ] + ] ]
[ range 1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map c [ partial1 b + ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map c [ partial1 b + ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ >= [ head [ reverse a ] ] b ]
[ digits [ * a [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ reduce [ range 0 [ + [ reduce [ filter [ digits a ] [ partial0 [ reduce [ digits a ] 0 max ] > ] ] 0 max ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ range 1 [ + [ reduce [ reverse [ digits [ + a b ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ]
[ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] ] ]
[ * [ reduce a 0 max ] [ reduce b 0 max ] ]
[ deref [ sort [ filter a [ partial1 b < ] ] ] [ / [ len [ filter a [ partial1 b < ] ] ] 2 ] ]
[ <= a [ reduce [ range 0 [ + [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] + ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] + ] ] ] ]
[ reduce [ slice [ reverse a ] 0 [ / [ len [ reverse a ] ] 2 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ range 0 [ + [ head [ filter a [ partial1 b < ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ floor [ sqrt [ + [ * [ - [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] d ] [ - [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] d ] ] [ * [ - [ reduce [ slice [ reverse [ sort c ] ] 0 b ] 0 + ] e ] [ - [ reduce [ slice [ reverse [ sort c ] ] 0 b ] 0 + ] e ] ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] * ] ] ] ] ]
[ / [ reduce [ range 0 [ max a b ] ] 0 + ] [ len [ range 0 [ max a b ] ] ] ]
[ map [ filter [ range 0 [ len [ map [ digits a ] [ partial1 b + ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ map [ digits a ] [ partial1 b + ] ] int-deref ] ]
[ reverse [ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ partial1 b + ] ] ]
[ map [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c * ] ] [ partial0 2 * ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ range 0 [ + [ head a ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reduce [ slice [ reverse [ sort [ filter a is_prime ] ] ] 0 b ] 0 + ]
[ reduce [ range 0 [ + [ reduce [ slice [ reverse [ sort [ range 0 [ + a 1 ] ] ] ] 0 b ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ reduce [ reverse [ digits [ deref [ sort a ] [ / [ len a ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter [ map [ reverse a ] [ partial1 b + ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ digits [ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ map [ range 0 [ + [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] 1 ] ] square ]
[ slice a [ reduce [ slice b [ / [ len b ] 2 ] [ len b ] ] 0 max ] c ]
[ reduce [ map [ range 0 [ len [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c - ] ] ] ] [ lambda1 [ == [ deref [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c - ] ] arg1 ] [ deref [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c - ] ] [ - [ - [ len [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c - ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ is_sorted [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] ]
[ map [ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] [ partial0 2 * ] ]
[ digits [ * a [ head b ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ filter [ range 1 [ + [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] [ partial1 c < ] ]
[ map [ filter a [ partial1 [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] b ] > ] ] square ]
[ < [ + a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] ] 1 ]
[ reduce [ reverse [ digits [ + [ * [ - a [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ] [ - a [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ] ] [ * [ - b e ] [ - b e ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ range 0 [ + [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ reduce [ reverse [ digits [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter b is_prime ] ] ] [ deref [ filter b is_prime ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ - [ reduce [ range 0 [ min a b ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ map [ range 0 [ min [ len [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] b c ] ] [ len d ] ] ] [ lambda1 [ if [ > [ deref [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] b c ] arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ reverse [ digits [ reduce [ filter [ filter a [ partial1 b < ] ] [ partial0 [ reduce [ filter a [ partial1 b < ] ] 0 max ] > ] ] 0 max ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ range 0 [ + a 1 ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reduce [ filter [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 b - ] ] [ partial0 [ reduce [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 b - ] ] 0 max ] > ] ] 0 max ]
[ reduce [ reverse [ digits [ head [ map a square ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map [ map a [ partial1 b * ] ] [ partial1 [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] c ] * ] ]
[ range 0 [ reduce [ reverse [ digits [ / [ reduce a 0 + ] [ len a ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ > [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] 1 ]
[ head [ slice [ digits a ] 0 [ / [ len [ digits a ] ] 2 ] ] ]
[ floor [ sqrt [ + [ * [ - a [ reduce [ filter c [ partial0 [ reduce c 1000000000 min ] < ] ] 1000000000 min ] ] [ - a [ reduce [ filter c [ partial0 [ reduce c 1000000000 min ] < ] ] 1000000000 min ] ] ] [ * [ - b d ] [ - b d ] ] ] ] ]
[ filter a [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] > ] ]
[ reverse [ map a [ partial1 b + ] ] ]
[ digits [ strlen a ] ]
[ reduce [ map [ range 0 [ min [ len [ slice a b c ] ] [ len e ] ] ] [ lambda1 [ if [ > [ deref [ slice a b c ] arg1 ] [ deref e arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ combine ! is_prime ] ] ] [ len b ] ] ] [ lambda1 [ if [ < [ deref [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ combine ! is_prime ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ filter a [ partial1 [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] b ] < ] ] 0 + ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ range 0 [ deref [ filter a [ partial1 b < ] ] [ / [ len [ filter a [ partial1 b < ] ] ] 2 ] ] ]
[ reduce [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ map [ filter [ digits a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ]
[ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ filter [ map [ reverse a ] square ] [ partial0 [ reduce [ map [ reverse a ] square ] 0 max ] > ] ] 0 max ]
[ digits [ head [ slice a b c ] ] ]
[ map [ range 1 [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] ] [ partial0 2 * ] ]
[ filter [ map [ filter a [ combine ! is_prime ] ] square ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ]
[ reverse [ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] square ] ]
[ reduce [ range 0 [ + [ floor [ sqrt [ + [ * [ - a [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ] [ - a [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ] ] [ * [ - b e ] [ - b e ] ] ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ filter [ range 0 a ] [ lambda1 [ reduce [ map [ filter b [ combine ! is_prime ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ range 0 [ min [ len [ filter [ range 1 a ] [ partial1 b < ] ] ] [ len c ] ] ] [ lambda1 [ if [ < [ deref [ filter [ range 1 a ] [ partial1 b < ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ reverse [ slice a b c ] ] [ lambda1 [ reduce [ map e [ partial0 arg1 == ] ] false || ] ] ]
[ - [ reduce [ slice [ reverse a ] b c ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ > [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 + ]
[ filter [ range 1 [ + [ head a ] 1 ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reduce [ reverse [ digits [ head [ map a square ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter [ slice [ range 0 a ] 0 [ / [ len [ range 0 a ] ] 2 ] ] [ partial1 b < ] ]
[ reverse [ map a [ partial1 b * ] ] ]
[ head [ slice [ digits a ] 0 [ / [ len [ digits a ] ] 2 ] ] ]
[ head [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c + ] ] ]
[ map [ filter a [ partial1 [ head b ] < ] ] [ partial1 c - ] ]
[ map [ slice a b c ] [ partial1 [ * e f ] + ] ]
[ head [ map a [ partial1 b - ] ] ]
[ filter [ map [ slice a b c ] [ partial1 d + ] ] is_prime ]
[ reduce [ reverse [ digits [ deref a [ / [ len a ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ reverse [ digits [ deref [ sort a ] [ / [ len a ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ filter [ slice d b c ] [ lambda1 [ reduce [ map d [ partial0 arg1 == ] ] false || ] ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ filter [ slice d b c ] [ lambda1 [ reduce [ map d [ partial0 arg1 == ] ] false || ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ / [ reduce [ slice [ range 0 a ] [ / [ len [ range 0 a ] ] 2 ] [ len [ range 0 a ] ] ] 0 + ] [ len [ range 0 a ] ] ] ]
[ filter [ slice [ range 0 a ] [ / [ len [ range 0 a ] ] 2 ] [ len [ range 0 a ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ map [ reverse a ] [ partial1 [ * c b ] - ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ reduce [ range 0 [ + [ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ filter [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ head [ filter [ range 1 a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reverse [ reverse [ map a [ partial1 b + ] ] ] ]
[ reduce [ reverse [ digits [ head [ map a square ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map [ filter [ slice a 0 [ / [ len a ] 2 ] ] is_prime ] square ]
[ map [ slice [ slice a b c ] 0 [ / [ len [ slice a b c ] ] 2 ] ] square ]
[ map a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] - ] ]
[ map a [ partial1 b - ] ]
[ reduce [ slice [ sort [ map a [ partial1 [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] b ] + ] ] ] 0 c ] 0 + ]
[ reduce [ slice [ sort [ slice a 0 [ / [ len a ] 2 ] ] ] 0 [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] b ] ] 0 + ]
[ map [ slice [ filter a [ partial1 b > ] ] 0 [ / [ len [ filter a [ partial1 b > ] ] ] 2 ] ] square ]
[ is_sorted [ filter a [ partial1 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] > ] ] ]
[ / [ reduce [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 0 + ] [ len [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] ]
[ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ / [ reduce d 0 + ] [ len d ] ] ] [ - b [ / [ reduce d 0 + ] [ len d ] ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ reduce [ slice [ sort [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] 1 ] ] ] 0 b ] 0 + ]
[ filter [ range 0 a ] [ combine ! is_prime ] ]
[ map [ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] [ partial1 c - ] ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ digits [ strlen [ reduce a "z" str_min ] ] ]
[ deref [ filter a [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] < ] ] [ / [ len [ filter a [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] < ] ] ] 2 ] ]
[ + [ * [ - [ reduce [ slice a 0 [ / [ len a ] 2 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ] [ - [ reduce [ slice a 0 [ / [ len a ] 2 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ] ] [ * [ - c e ] [ - c e ] ] ]
[ * a [ reduce [ slice [ reverse [ sort [ map c square ] ] ] 0 b ] 0 + ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ max a [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] b ] ] ]
[ reduce [ slice [ reverse a ] 0 [ / [ len [ reverse a ] ] 2 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ filter [ map [ filter [ range 0 [ len [ slice a 0 [ / [ len a ] 2 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ slice a 0 [ / [ len a ] 2 ] ] int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ filter [ map [ slice a b c ] [ partial1 d - ] ] [ partial0 [ reduce [ map [ slice a b c ] [ partial1 d - ] ] 0 max ] > ] ] 0 max ]
[ filter [ range 0 [ + [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ reverse [ digits [ reduce [ filter [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ reduce [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] 1000000000 min ] < ] ] 1000000000 min ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map a [ partial1 [ reduce [ map c [ partial1 b - ] ] 0 max ] - ] ]
[ reduce [ map [ map a [ partial1 b + ] ] square ] 0 + ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ filter a [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len [ slice b 0 [ / [ len b ] 2 ] ] ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref [ slice b 0 [ / [ len b ] 2 ] ] arg1 ] ] 1 0 ] ] ] 0 + ] > ] ]
[ slice a [ reduce [ slice [ sort c ] 0 b ] 0 + ] [ reduce [ filter d [ partial0 [ reduce d 0 max ] > ] ] 0 max ] ]
[ map [ map a [ partial1 b - ] ] [ partial1 [ reduce [ slice [ sort c ] 0 d ] 0 + ] * ] ]
[ reduce [ filter [ filter [ map a [ partial1 b - ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ reduce [ filter [ map a [ partial1 b - ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] 0 max ] > ] ] 0 max ]
[ + [ * [ - a [ strlen c ] ] [ - a [ strlen c ] ] ] [ * [ - b [ head d ] ] [ - b [ strlen d ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ slice [ map [ digits a ] [ partial1 b * ] ] 0 [ / [ len [ map [ digits a ] [ partial1 b * ] ] ] 2 ] ]
[ - [ reduce [ slice a b [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ filter a [ lambda1 [ reduce [ map [ filter d [ partial1 [ reduce [ slice [ sort c ] 0 b ] 0 + ] < ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ reverse [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] ]
[ floor [ sqrt [ + [ * [ - a [ reduce c 0 + ] ] [ - a [ reduce c 0 + ] ] ] [ * [ - b [ reduce [ range 0 [ + d 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] [ - b [ reduce [ range 0 [ + d 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] ] ] ] ]
[ map a [ partial1 b - ] ]
[ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 [ strlen c ] < ] ]
[ reduce [ reverse [ digits [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 max ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ digits [ reduce [ slice [ reverse [ sort [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] ] ] 0 b ] 0 + ] ]
[ - [ reduce [ slice a b [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ > [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 ]
[ map [ filter [ reverse a ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] square ]
[ range 1 [ + [ reduce [ filter [ map a [ partial0 2 * ] ] [ partial0 [ reduce [ map a [ partial0 2 * ] ] 0 max ] > ] ] 0 max ] 1 ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] square ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] square ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ * [ deref a [ / [ len a ] 2 ] ] [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ map [ slice a b c ] [ partial1 [ reduce [ map [ range 0 [ min [ len d ] [ len e ] ] ] [ lambda1 [ if [ > [ deref d arg1 ] [ deref e arg1 ] ] 1 0 ] ] ] 0 + ] + ] ]
[ map [ digits [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] ] [ partial0 2 * ] ]
[ filter a [ lambda1 [ reduce [ map [ digits [ reduce [ slice [ reverse [ sort c ] ] 0 b ] 0 + ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ digits [ strlen a ] ]
[ filter [ slice [ range 0 a ] 0 [ / [ len [ range 0 a ] ] 2 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ > a [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] b ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ range 1 [ + [ head [ slice a b c ] ] 1 ] ]
[ * a [ reduce [ range 0 [ + [ deref [ sort b ] [ / [ len b ] 2 ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ map [ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b - ] ] [ partial0 2 * ] ]
[ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ map [ map a [ partial1 b * ] ] [ partial1 [ reduce [ slice [ sort c ] 0 d ] 0 + ] - ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] ] ]
[ reduce [ filter [ map [ filter a [ combine ! is_prime ] ] square ] [ partial0 [ reduce [ map [ filter a [ combine ! is_prime ] ] square ] 1000000000 min ] < ] ] 1000000000 min ]
[ floor [ sqrt [ + [ * [ - a [ min c d ] ] [ - a [ min c d ] ] ] [ * [ - b e ] [ - b e ] ] ] ] ] ]
[ is_sorted [ filter [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ filter [ digits a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ slice [ sort [ digits a ] ] 0 [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 + ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map a [ partial1 b - ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ floor [ sqrt [ + [ * [ - [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ] c ] [ - [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ] c ] ] [ * [ - [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] d ] [ - [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] d ] ] ] ] ]
[ reduce [ map [ range 0 [ min [ len [ slice a b c ] ] [ len [ reverse d ] ] ] ] [ lambda1 [ if [ > [ deref [ slice a b c ] arg1 ] [ deref [ reverse d ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ map [ reverse [ digits a ] ] [ partial0 2 * ] ]
[ deref [ sort [ range 0 [ reduce a 0 max ] ] ] [ / [ len [ range 0 [ reduce a 0 max ] ] ] 2 ] ]
[ map [ reverse a ] [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] * ] ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ filter a [ partial1 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] > ] ]
[ min [ head a ] [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ slice [ slice [ reverse a ] 0 [ / [ len [ reverse a ] ] 2 ] ] 0 [ / [ len [ slice [ reverse a ] 0 [ / [ len [ reverse a ] ] 2 ] ] ] 2 ] ]
[ reduce [ slice [ sort a ] 0 [ reduce [ filter c [ partial1 b < ] ] 0 max ] ] 0 + ]
[ range 0 [ + a 1 ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ slice [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ]
[ deref [ map [ range 0 [ + a 1 ] ] square ] [ / [ len [ map [ range 0 [ + a 1 ] ] square ] ] 2 ] ]
[ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 [ reduce [ slice [ sort c ] 0 b ] 0 + ] + ] ]
[ reduce [ filter [ slice [ range 1 a ] 0 [ / [ len [ range 1 a ] ] 2 ] ] [ partial0 [ reduce [ slice [ range 1 a ] 0 [ / [ len [ range 1 a ] ] 2 ] ] 0 max ] > ] ] 0 max ]
[ reduce [ range 0 [ + [ reduce [ reverse [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ deref [ range 0 [ + a 1 ] ] [ / [ len [ range 0 [ + a 1 ] ] ] 2 ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ slice a b c ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter d [ partial1 e > ] ] ] ] [ deref [ filter d [ partial1 e > ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ digits [ strlen a ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ map a [ partial1 [ + [ * [ - f c ] [ - f c ] ] [ * [ - b [ reduce [ filter d [ partial0 [ reduce d 0 max ] > ] ] 0 max ] ] [ - b [ reduce [ filter d [ partial0 [ reduce d 0 max ] > ] ] 0 max ] ] ] ] * ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ reverse [ slice a [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ slice [ reverse [ sort [ digits a ] ] ] 0 b ] 0 + ] ]
[ reduce [ map [ range 0 [ len [ slice [ filter a [ partial1 b < ] ] c d ] ] ] [ lambda1 [ == [ deref [ slice [ filter a [ partial1 b < ] ] c d ] arg1 ] [ deref [ slice [ filter a [ partial1 b < ] ] c d ] [ - [ - [ len [ slice [ filter a [ partial1 b < ] ] c d ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map [ map [ map a [ partial0 2 * ] ] [ partial1 b + ] ] square ]
[ < [ * [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] b ] 1 ]
[ reduce [ filter [ map [ digits a ] [ partial1 b + ] ] [ partial0 [ reduce [ map [ digits a ] [ partial1 b + ] ] 0 max ] > ] ] 0 max ]
[ filter [ map a [ partial1 b + ] ] [ partial1 [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] > ] ]
[ reduce [ map [ range 0 [ len [ reverse [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] ] ] [ lambda1 [ == [ deref [ reverse [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] arg1 ] [ deref [ reverse [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] [ - [ - [ len [ reverse [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ head [ map a [ partial1 b - ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] square ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] square ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ map [ map [ map a [ partial1 b * ] ] [ partial1 c + ] ] square ]
[ reduce [ range 0 [ + [ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ is_sorted [ slice [ reverse a ] b c ] ]
[ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ reduce [ map [ filter [ range 0 [ len d ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 d int-deref ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len e ] ] [ deref e arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] [ - b [ reduce [ map [ filter [ range 0 [ len d ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 d int-deref ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len e ] ] [ deref e arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ] ] ] ]
[ reduce [ slice [ sort [ filter a [ lambda1 [ reduce [ map [ filter c [ partial1 b < ] ] [ partial0 arg1 == ] ] false || ] ] ] ] 0 c ] 0 + ]
[ reduce [ filter [ range 1 [ + a 1 ] ] [ partial1 b > ] ] 0 max ]
[ reduce [ filter [ digits a ] [ partial0 [ reduce [ digits a ] 1000000000 min ] < ] ] 1000000000 min ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ strlen d ] ] [ - b [ strlen d ] ] ] ] ]
[ digits [ reduce [ map [ range 0 [ min [ len a ] [ len [ map c [ partial1 b + ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map c [ partial1 b + ] ] arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ >= [ reduce [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ partial0 [ reduce [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] 0 max ] > ] ] 0 max ] b ]
[ reduce [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 max ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ]
[ map [ map a [ partial1 b + ] ] [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len d ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ] - ] ]
[ reverse [ reverse [ filter a [ partial1 b > ] ] ] ]
[ digits [ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ slice [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ reduce [ map [ range 0 [ min [ len c ] [ len d ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ] e ]
[ reduce [ slice [ sort a ] 0 [ reduce [ slice b [ / [ len b ] 2 ] [ len b ] ] 1000000000 min ] ] 0 + ]
[ filter [ slice [ digits a ] 0 [ / [ len [ digits a ] ] 2 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ digits [ reduce [ slice [ reverse [ sort [ map a [ partial1 b + ] ] ] ] 0 c ] 0 + ] ]
[ digits [ reduce [ slice [ sort a ] 0 [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] ] 0 + ] ]
[ < a [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ < [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ filter [ filter a [ lambda1 [ reduce [ map [ digits b ] [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ]
[ reduce [ map [ range 0 [ len [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] [ lambda1 [ == [ deref [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] arg1 ] [ deref [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ - [ - [ len [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ digits [ reduce [ map [ range 0 [ min [ len a ] [ len [ slice e b c ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ slice e b c ] arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ reduce [ range 0 [ + [ reduce [ reverse a ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ digits [ head [ slice a b c ] ] ]
[ / [ reduce [ map [ digits a ] [ partial1 b + ] ] 0 + ] [ len [ map [ digits a ] [ partial1 b + ] ] ] ]
[ digits [ - [ reduce [ map a [ partial1 b + ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map c [ partial1 b + ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ map c [ partial1 b + ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ floor [ sqrt [ + [ * [ - [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] c ] [ - [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] c ] ] [ * [ - b [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] d ] ] [ - b [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] d ] ] ] ] ] ]
[ min a [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] ]
[ deref [ map [ filter [ range 0 [ len [ map a [ partial0 2 * ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ map a [ partial0 2 * ] ] int-deref ] ] [ / [ len [ map [ filter [ range 0 [ len [ map a [ partial0 2 * ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ map a [ partial0 2 * ] ] int-deref ] ] ] 2 ] ]
[ reduce [ filter [ filter [ digits a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 [ reduce [ filter [ digits a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ filter a [ partial1 [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ + c b ] ] > ] ]
[ map [ digits [ head a ] ] [ partial1 b * ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ map [ range 0 [ min [ len a ] [ len [ filter c [ partial1 b > ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ filter c [ partial1 b > ] ] arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ map [ filter [ map a [ partial1 b * ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] square ]
[ map [ reverse a ] [ partial1 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] + ] ]
[ + [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] b ]
[ is_sorted [ map [ slice a b c ] [ partial0 2 * ] ] ]
[ reduce [ filter a [ partial1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 b + ] ] ] ] < ] ] 1000000000 min ]
[ deref [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] [ / [ len [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] ] 2 ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter d [ lambda1 [ reduce [ map [ filter c [ partial1 b < ] ] [ partial0 arg1 == ] ] false || ] ] ] ] ] [ deref [ filter d [ lambda1 [ reduce [ map [ filter c [ partial1 b < ] ] [ partial0 arg1 == ] ] false || ] ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ]
[ range 1 [ + [ deref [ sort [ filter a [ combine ! is_prime ] ] ] [ / [ len [ filter a [ combine ! is_prime ] ] ] 2 ] ] 1 ] ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] ] 0 + ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ range 0 [ + [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ reduce [ range 0 [ + [ reduce [ filter [ digits a ] [ partial0 [ reduce [ digits a ] 0 max ] > ] ] 0 max ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ digits [ reduce [ filter [ map a [ partial0 2 * ] ] [ partial0 [ reduce [ map a [ partial0 2 * ] ] 0 max ] > ] ] 0 max ] ]
[ + [ max a b ] [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ > [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 ]
[ + [ * [ - a [ min c d ] ] [ - a [ min c d ] ] ] [ * [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g i ] [ - g i ] ] ] ] [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g i ] [ - g i ] ] ] ] ] ]
[ reverse [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial1 b - ] ] ]
[ deref [ digits [ reduce a 1000000000 min ] ] [ / [ len [ digits [ reduce a 1000000000 min ] ] ] 2 ] ]
[ reduce [ map [ range 0 [ min [ len [ reverse [ filter a [ partial1 b < ] ] ] ] [ len c ] ] ] [ lambda1 [ if [ < [ deref [ reverse [ filter a [ partial1 b < ] ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ map [ digits [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] ] [ partial0 2 * ] ]
[ reverse [ map a [ partial1 [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 b + ] ] ] ] + ] ] ]
[ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ floor [ sqrt [ + [ * [ - a [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ] [ - a [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ] ] [ * [ - b e ] [ - b e ] ] ] ] ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ slice b 0 [ / [ len b ] 2 ] ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ floor [ sqrt [ + [ * [ - a [ reduce [ filter c [ partial0 [ reduce c 1000000000 min ] < ] ] 1000000000 min ] ] [ - a [ reduce [ filter c [ partial0 [ reduce c 1000000000 min ] < ] ] 1000000000 min ] ] ] [ * [ - b d ] [ - b d ] ] ] ] ]
[ filter [ range 1 [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] [ lambda1 [ reduce [ map d [ partial0 arg1 == ] ] false || ] ] ]
[ map [ range 0 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] ] [ partial0 2 * ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter d [ lambda1 [ reduce [ map [ filter c [ partial1 b < ] ] [ partial0 arg1 == ] ] false || ] ] ] ] ] [ deref [ filter d [ lambda1 [ reduce [ map [ filter c [ partial1 b < ] ] [ partial0 arg1 == ] ] false || ] ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ map [ map [ digits a ] square ] [ partial1 b * ] ]
[ map [ reverse [ slice a 0 [ / [ len a ] 2 ] ] ] square ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ range 0 [ len [ slice a b c ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ min a [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ map [ map a [ partial1 b + ] ] [ partial1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 c + ] ] ] ] * ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map c [ partial1 b + ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ map c [ partial1 b + ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ reverse [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ map [ digits [ max a b ] ] square ]
[ range 0 [ + [ * a [ deref [ sort b ] [ / [ len b ] 2 ] ] ] 1 ] ]
[ filter [ range 1 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] [ partial1 c > ] ]
[ - [ reduce [ slice a b [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ map [ map a [ partial1 b + ] ] [ partial0 2 * ] ] 0 + ]
[ min [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] d ]
[ filter [ reverse a ] [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ]
[ range 0 [ + a 1 ] ]
[ reverse [ range 0 [ + [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] 1 ] ] ]
[ reverse [ slice [ map a [ partial1 b * ] ] c d ] ]
[ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ - [ reduce [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ min [ reduce a 1000000000 min ] [ reduce c 0 max ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ max a [ reduce [ map [ range 0 [ min [ len [ slice c 0 [ / [ len c ] 2 ] ] ] [ len b ] ] ] [ lambda1 [ if [ < [ deref [ slice c 0 [ / [ len c ] 2 ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ reduce [ map [ range 0 [ len [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] is_prime ] ] ] [ lambda1 [ == [ deref [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] is_prime ] arg1 ] [ deref [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] is_prime ] [ - [ - [ len [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] is_prime ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ reduce [ range 0 [ + [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ + [ * [ - [ reduce [ filter [ reverse a ] [ partial0 [ reduce [ reverse a ] 0 max ] > ] ] 0 max ] c ] [ - [ reduce [ filter [ reverse a ] [ partial0 [ reduce [ reverse a ] 0 max ] > ] ] 0 max ] c ] ] [ * [ - b d ] [ - b d ] ] ]
[ map [ filter [ range 0 [ len [ slice [ filter a [ partial1 b < ] ] 0 [ / [ len [ filter a [ partial1 b < ] ] ] 2 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ slice [ filter a [ partial1 b < ] ] 0 [ / [ len [ filter a [ partial1 b < ] ] ] 2 ] ] int-deref ] ]
[ reduce [ map [ range 0 [ min [ len [ reverse [ range 1 [ + a 1 ] ] ] ] [ len b ] ] ] [ lambda1 [ if [ < [ deref [ reverse [ range 1 [ + a 1 ] ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ floor [ sqrt [ + [ * [ - a [ reduce [ filter c [ partial0 [ reduce c 0 max ] > ] ] 0 max ] ] [ - a [ reduce [ filter c [ partial0 [ reduce c 0 max ] > ] ] 0 max ] ] ] [ * [ - b [ strlen d ] ] [ - b [ strlen d ] ] ] ] ] ]
[ deref [ sort [ map [ reverse a ] [ partial0 2 * ] ] ] [ / [ len [ map [ reverse a ] [ partial0 2 * ] ] ] 2 ] ]
[ map a [ partial1 b - ] ]
[ + a [ reduce [ reverse [ digits [ - [ reduce c 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ filter [ range 1 [ + [ reduce a 0 max ] 1 ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ range 0 [ + a 1 ] ]
[ map a [ partial1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] - ] ]
[ map [ map [ map a square ] [ partial1 b + ] ] square ]
[ reverse [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] 0 [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] ] ]
[ reduce [ slice [ reverse [ sort [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] 0 [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ] 0 + ]
[ reduce [ filter [ map [ reverse a ] square ] [ partial0 [ reduce [ map [ reverse a ] square ] 0 max ] > ] ] 0 max ]
[ reduce [ range 0 [ + [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ head [ map a [ partial1 [ head [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] * ] ] ]
[ digits [ reduce [ reverse [ digits [ / [ reduce a 0 + ] [ len a ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ reverse [ digits [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ reverse [ map a [ partial1 [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] + ] ] ]
[ head [ filter a [ partial1 b > ] ] ]
[ > [ deref [ slice a [ / [ len a ] 2 ] [ len a ] ] [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] ] b ]
[ - [ reduce [ map a [ partial1 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] - ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ map [ map a [ partial1 b + ] ] [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] + ] ]
[ range 1 [ head [ map a square ] ] ]
[ map [ filter [ filter a [ partial1 b > ] ] is_prime ] [ partial1 c * ] ]
[ >= [ reduce [ map [ range 0 [ min [ len [ range 0 [ + a 1 ] ] ] [ len b ] ] ] [ lambda1 [ if [ < [ deref [ range 0 [ + a 1 ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] 1 ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ slice [ sort a ] 0 [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ range 1 [ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ reduce [ range 0 [ + [ reduce [ range 0 [ + [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ filter [ map [ filter [ range 0 [ len [ reverse a ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ reverse a ] int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 [ + a b ] + ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ max d e ] ] [ - b [ max d e ] ] ] ] ] ] ]
[ head [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ * a [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ max [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] [ reduce [ slice [ reverse [ sort c ] ] 0 b ] 0 + ] ]
[ is_sorted [ slice [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] c d ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] ]
[ map a [ partial1 [ * c [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] b ] ] + ] ]
[ head [ filter a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] > ] ] ]
[ digits [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce a 0 max ] ] ]
[ filter a [ partial1 [ reduce [ range 0 [ + [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] > ] ]
[ reduce [ reverse [ digits [ deref [ sort [ map a square ] ] [ / [ len [ map a square ] ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map a [ partial1 [ + [ * [ - f [ reduce [ map [ range 0 [ min [ len c ] [ len d ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ] ] [ - f [ reduce [ map [ range 0 [ min [ len c ] [ len d ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ] ] ] [ * [ - b e ] [ - b e ] ] ] * ] ]
[ filter [ reverse [ reverse a ] ] [ partial1 b > ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ reduce [ map [ range 0 [ len [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c - ] ] ] ] [ lambda1 [ == [ deref [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c - ] ] arg1 ] [ deref [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c - ] ] [ - [ - [ len [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c - ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ - [ reduce [ filter a [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] > ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ slice [ sort a ] 0 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ]
[ filter a [ partial1 [ floor [ sqrt [ + [ * [ - f [ reduce [ filter c [ partial0 [ reduce c 1000000000 min ] < ] ] 1000000000 min ] ] [ - f [ reduce [ filter c [ partial0 [ reduce c 1000000000 min ] < ] ] 1000000000 min ] ] ] [ * [ - b d ] [ - b d ] ] ] ] ] > ] ]
[ reduce [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] 0 [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] ] 1000000000 min ]
[ digits [ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] 0 + ] ]
[ floor [ sqrt [ + [ * [ - [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] d ] [ - [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] d ] ] [ * [ - c [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] e ] ] [ - c [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] e ] ] ] ] ] ]
[ * a [ strlen b ] ]
[ map [ filter a [ partial1 b > ] ] [ partial1 [ min c d ] * ] ]
[ map a [ partial1 b - ] ]
[ reduce [ reverse [ digits [ deref [ sort [ map a square ] ] [ / [ len [ map a square ] ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ slice [ reverse [ range 1 [ + a 1 ] ] ] [ / [ len [ reverse [ range 1 [ + a 1 ] ] ] ] 2 ] [ len [ reverse [ range 1 [ + a 1 ] ] ] ] ]
[ filter [ reverse a ] [ partial1 [ reduce [ slice [ sort c ] 0 b ] 0 + ] < ] ]
[ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ reverse c ] ] ] [ deref [ reverse c ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ map a [ partial0 2 * ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ range 0 [ + [ reduce [ reverse a ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ range 0 [ strlen [ reduce a "" str_concat ] ] ]
[ + [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] [ reduce [ range 0 [ + d 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ head [ map a [ partial1 b - ] ] ]
[ reduce [ slice a 0 [ / [ len a ] 2 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ map b [ partial0 2 * ] ] ] ] [ deref [ map b [ partial0 2 * ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ - [ reduce [ slice [ slice a b c ] [ / [ len [ slice a b c ] ] 2 ] [ len [ slice a b c ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter [ digits c ] [ partial1 b < ] ] ] ] [ deref [ filter [ digits c ] [ partial1 b < ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ head [ slice a [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] g ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ reduce [ filter d [ partial0 [ reduce d 1000000000 min ] < ] ] 1000000000 min ] ] [ - b [ reduce [ filter d [ partial0 [ reduce d 1000000000 min ] < ] ] 1000000000 min ] ] ] ] ]
[ reduce [ slice [ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b + ] ] 0 [ / [ len [ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b + ] ] ] 2 ] ] 0 max ]
[ floor [ sqrt [ + [ * [ - [ * a b ] d ] [ - [ * a b ] d ] ] [ * [ - c e ] [ - c e ] ] ] ] ]
[ filter [ reverse a ] [ partial1 [ deref b [ / [ len b ] 2 ] ] > ] ]
[ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 max ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] ]
[ map [ reverse [ slice a 0 [ / [ len a ] 2 ] ] ] [ partial1 b + ] ]
[ digits [ - [ reduce [ map a [ partial1 b - ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ reduce [ map [ range 0 [ len [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] [ lambda1 [ == [ deref [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] arg1 ] [ deref [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ - [ - [ len [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ reverse [ digits [ min a b ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ is_sorted [ slice [ reverse a ] b c ] ]
[ reverse [ filter [ filter a [ partial1 b < ] ] [ combine ! is_prime ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ range 0 [ + [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ reduce [ range 0 [ + [ deref [ filter a [ partial1 b > ] ] [ / [ len [ filter a [ partial1 b > ] ] ] 2 ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ reduce [ range 0 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ slice d b c ] ] ] [ deref [ slice d b c ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ slice [ sort a ] 0 [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ]
[ reduce [ slice [ sort [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] 0 [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 + ]
[ digits [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ map b [ partial0 2 * ] ] ] ] [ deref [ map b [ partial0 2 * ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ reduce [ slice [ sort a ] 0 [ strlen [ reduce b "" str_concat ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] [ len [ digits b ] ] ] ] [ lambda1 [ if [ > [ deref [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] arg1 ] [ deref [ digits b ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reverse [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] 0 [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ head [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ range 0 [ reduce [ map [ range 0 [ min [ len a ] [ len [ slice e b c ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ slice e b c ] arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ filter [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c - ] ] [ partial1 d < ] ]
[ - [ reduce [ slice [ reverse a ] b c ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ filter [ filter [ reverse a ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial1 b > ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ digits [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] 0 max ]
[ filter [ slice [ range 0 a ] [ / [ len [ range 0 a ] ] 2 ] [ len [ range 0 a ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ range 0 [ + [ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ map a [ partial1 b - ] ] 0 max ] ]
[ floor [ sqrt [ + [ * [ - [ max a b ] d ] [ - [ max a b ] d ] ] [ * [ - c [ reduce [ reverse [ digits e ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ - c [ reduce [ reverse [ digits e ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] ] ] ]
[ filter a [ lambda1 [ reduce [ map [ slice [ reverse b ] 0 [ / [ len [ reverse b ] ] 2 ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map [ digits [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] ] [ partial0 2 * ] ]
[ floor [ sqrt [ + [ * [ - a [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 c + ] ] ] ] ] [ - a [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 c + ] ] ] ] ] ] [ * [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] ] ]
[ floor [ sqrt [ + [ * [ - [ min a b ] d ] [ - [ min a b ] d ] ] [ * [ - c e ] [ - c e ] ] ] ] ]
[ slice [ filter [ map a [ partial1 b - ] ] [ partial1 c < ] ] 0 [ / [ len [ filter [ map a [ partial1 b - ] ] [ partial1 c < ] ] ] 2 ] ]
[ map [ map [ filter [ range 0 [ len [ reverse a ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ reverse a ] int-deref ] ] square ]
[ head [ map [ filter [ range 0 [ len [ filter a is_prime ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ filter a is_prime ] int-deref ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ map a [ partial0 2 * ] ] 1000000000 min ] ]
[ filter [ reverse [ map a [ partial1 b - ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ slice [ map [ range 1 a ] [ partial1 b * ] ] [ / [ len [ map [ range 1 a ] [ partial1 b * ] ] ] 2 ] [ len [ map [ range 1 a ] [ partial1 b * ] ] ] ]
[ filter a [ lambda1 [ reduce [ map [ slice [ reverse b ] 0 [ / [ len [ reverse b ] ] 2 ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ range 0 [ + [ reduce [ slice [ reverse [ sort [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] ] 0 b ] 0 + ] 1 ] ]
[ map [ filter a [ lambda1 [ reduce [ map [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 arg1 == ] ] false || ] ] ] square ]
[ min [ strlen a ] [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ slice [ range 1 [ + [ reduce a 1000000000 min ] 1 ] ] 0 [ / [ len [ range 1 [ + [ reduce a 1000000000 min ] 1 ] ] ] 2 ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ map [ reverse a ] [ partial1 [ deref b [ / [ len b ] 2 ] ] * ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ reverse [ range 0 [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ]
[ reduce [ slice [ sort [ digits a ] ] 0 [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 + ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ]
[ filter [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 2 * ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ map [ map [ filter [ range 0 [ len [ digits a ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ digits a ] int-deref ] ] [ partial1 b + ] ]
[ range 1 [ + [ reduce [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial0 [ reduce [ slice a 0 [ / [ len a ] 2 ] ] 0 max ] > ] ] 0 max ] 1 ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ reduce [ slice [ reverse [ sort [ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b * ] ] ] ] 0 c ] 0 + ]
[ slice [ map [ range 1 a ] [ partial0 2 * ] ] b c ]
[ is_sorted [ slice [ reverse a ] b c ] ]
[ slice a [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] b ] [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ reverse b ] ] ] [ deref [ reverse b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ + [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] b ]
[ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ slice c [ / [ len c ] 2 ] [ len c ] ] ] ] [ deref [ slice c [ / [ len c ] 2 ] [ len c ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ reverse [ digits [ deref a [ / [ len a ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map [ slice [ map a [ partial1 b + ] ] 0 [ / [ len [ map a [ partial1 b + ] ] ] 2 ] ] [ partial1 c + ] ]
[ reduce [ map [ range 0 [ len [ slice a b [ head c ] ] ] ] [ lambda1 [ == [ deref [ slice a b [ head c ] ] arg1 ] [ deref [ slice a b [ head c ] ] [ - [ - [ len [ slice a b [ head c ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ filter [ slice [ slice a b c ] 0 [ / [ len [ slice a b c ] ] 2 ] ] [ partial1 d > ] ]
[ filter a [ partial1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] > ] ]
[ filter a [ partial1 [ + [ * [ - f [ reduce [ filter c [ partial0 [ reduce c 1000000000 min ] < ] ] 1000000000 min ] ] [ - f [ reduce [ filter c [ partial0 [ reduce c 1000000000 min ] < ] ] 1000000000 min ] ] ] [ * [ - b d ] [ - b d ] ] ] < ] ]
[ reverse [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] ]
[ reduce [ map [ range 0 [ min [ len [ filter a [ partial1 b < ] ] ] [ len [ digits c ] ] ] ] [ lambda1 [ if [ < [ deref [ filter a [ partial1 b < ] ] arg1 ] [ deref [ digits c ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ reduce [ range 0 [ + d 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] [ - b [ reduce [ range 0 [ + d 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] ] ] ] ] ]
[ slice a [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] [ reduce [ range 0 [ + d 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ reverse [ reverse [ filter a [ partial1 b > ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ head [ filter a [ partial1 b > ] ] ]
[ filter [ map [ filter [ range 0 [ len [ reverse a ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ reverse a ] int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ map [ range 1 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] [ partial1 c * ] ]
[ <= [ * a [ deref [ sort b ] [ / [ len b ] 2 ] ] ] 0 ]
[ map [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ] [ partial0 2 * ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ reverse [ digits [ reduce [ range 0 [ + [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ digits [ head [ filter a is_prime ] ] ]
[ reduce [ filter [ slice [ reverse a ] b c ] [ partial0 [ reduce [ slice [ reverse a ] b c ] 0 max ] > ] ] 0 max ]
[ range 1 [ + [ reduce [ slice [ sort a ] 0 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 + ] 1 ] ]
[ filter [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c - ] ] [ partial1 d < ] ]
[ range 1 [ reduce [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial0 [ reduce [ slice a 0 [ / [ len a ] 2 ] ] 0 max ] > ] ] 0 max ] ]
[ filter [ filter a [ partial1 [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] < ] ] [ combine ! is_prime ] ]
[ filter [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ partial1 b < ] ]
[ reduce [ map [ range 0 [ min [ len [ reverse [ digits a ] ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ reverse [ digits a ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ < [ deref [ sort [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] [ / [ len [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] 2 ] ] 1 ]
[ reduce [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] 0 + ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ partial1 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] < ] ]
[ reduce [ reverse [ digits [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ slice e b c ] ] ] [ deref [ slice e b c ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ filter [ map a [ partial0 2 * ] ] [ partial0 [ reduce [ map a [ partial0 2 * ] ] 0 max ] > ] ] 0 max ] ]
[ digits [ reduce [ filter [ map a [ partial0 2 * ] ] [ partial0 [ reduce [ map a [ partial0 2 * ] ] 0 max ] > ] ] 0 max ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ map [ range 0 [ min [ len a ] [ len [ filter c [ partial1 b < ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ filter c [ partial1 b < ] ] arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ reverse [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter c [ partial1 b < ] ] ] ] [ deref [ filter c [ partial1 b < ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ + [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] b ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ digits [ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ map [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] square ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reverse [ map [ filter a [ partial1 b < ] ] [ partial1 c + ] ] ]
[ digits [ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ map [ slice a b [ reduce [ filter c [ partial0 [ reduce c 0 max ] > ] ] 0 max ] ] [ partial0 2 * ] ]
[ range 0 [ reduce [ slice [ reverse [ sort a ] ] 0 [ head b ] ] 0 + ] ]
[ map [ digits a ] [ partial1 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] * ] ]
[ map [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] square ]
[ map [ range 0 a ] [ partial1 [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] b ] * ] ]
[ map [ reverse [ digits a ] ] [ partial0 2 * ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] + ] ] ] ]
[ reduce [ filter [ slice [ reverse a ] b c ] [ partial0 [ reduce [ slice [ reverse a ] b c ] 0 max ] > ] ] 0 max ]
[ filter [ range 1 [ + [ reduce a 0 max ] 1 ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ filter [ filter [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial1 b > ] ] [ partial0 [ reduce [ filter [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial1 b > ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ range 0 [ reduce [ map [ range 0 [ min [ len [ slice a 0 [ / [ len a ] 2 ] ] ] [ len b ] ] ] [ lambda1 [ if [ < [ deref [ slice a 0 [ / [ len a ] 2 ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ reduce [ map [ range 0 [ min [ len [ reverse [ slice a b c ] ] ] [ len e ] ] ] [ lambda1 [ if [ < [ deref [ reverse [ slice a b c ] ] arg1 ] [ deref e arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map [ reverse a ] [ partial1 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] * ] ]
[ map [ map a [ partial1 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] - ] ] [ partial0 2 * ] ]
[ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ head [ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial0 2 * ] ] ]
[ digits [ strlen [ reduce a "z" str_min ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ - [ reduce [ range 0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ map [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] [ partial1 c + ] ]
[ map [ range 1 [ + [ head a ] 1 ] ] square ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ map [ map [ map a [ partial1 b - ] ] square ] [ partial1 c * ] ]
[ slice a [ strlen [ reduce [ map [ str_split b " " ] [ partial0 0 str_index ] ] "" str_concat ] ] c ]
[ head [ filter a [ partial1 b > ] ] ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce [ filter [ digits b ] [ partial0 [ reduce [ digits b ] 0 max ] > ] ] 0 max ] ] 0 + ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c - ] ] [ partial1 d + ] ]
[ digits [ head [ reverse a ] ] ]
[ reduce [ map [ range 0 [ min [ len [ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] [ len c ] ] ] [ lambda1 [ if [ < [ deref [ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reverse [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ range 0 [ + [ reduce [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial0 [ reduce [ slice a [ / [ len a ] 2 ] [ len a ] ] 1000000000 min ] < ] ] 1000000000 min ] 1 ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ reverse [ digits [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ slice [ sort a ] 0 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ]
[ map [ reverse a ] [ partial1 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] + ] ]
[ range 0 [ + a 1 ] ]
[ filter [ range 0 a ] [ lambda1 [ reduce [ map [ range 0 [ + b 1 ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ reverse b ] ] ] [ deref [ reverse b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - [ strlen b ] [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 d * ] ] ] ] ] ] [ - [ strlen b ] [ strlen d ] ] ] ] ] ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter a [ partial1 [ reduce [ slice b 0 [ / [ len b ] 2 ] ] 0 max ] < ] ]
[ filter a [ partial1 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] < ] ]
[ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] < ] ]
[ map [ filter a [ lambda1 [ reduce [ map [ map b [ partial0 2 * ] ] [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ]
[ reduce [ digits [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ] 1000000000 min ]
[ map a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] + ] ]
[ filter [ digits a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ head [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ map a [ partial1 [ + [ * [ - f c ] [ - f c ] ] [ * [ - b [ deref d [ / [ len d ] 2 ] ] ] [ - b [ deref d [ / [ len d ] 2 ] ] ] ] ] * ] ]
[ reduce [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] square ] 0 max ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ range 0 [ + [ + a [ deref b [ / [ len b ] 2 ] ] ] 1 ] ]
[ reduce [ filter [ filter [ reverse a ] [ combine ! is_prime ] ] [ partial0 [ reduce [ filter [ reverse a ] [ combine ! is_prime ] ] 0 max ] > ] ] 0 max ]
[ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] * ] ]
[ filter [ slice [ map a [ partial1 b - ] ] 0 [ / [ len [ map a [ partial1 b - ] ] ] 2 ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ < [ reduce [ slice [ sort [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] ] 0 b ] 0 + ] 1 ]
[ floor [ sqrt [ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ slice [ sort a ] 0 [ head [ map [ filter [ range 0 [ len b ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 b int-deref ] ] ] ] 0 + ]
[ reduce [ range 0 [ head a ] ] 0 max ]
[ reduce [ filter [ slice [ range 1 a ] 0 [ / [ len [ range 1 a ] ] 2 ] ] [ partial0 [ reduce [ slice [ range 1 a ] 0 [ / [ len [ range 1 a ] ] 2 ] ] 0 max ] > ] ] 0 max ]
[ map a [ partial1 b - ] ]
[ filter [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ]
[ reverse [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] ]
[ is_sorted [ map a [ partial1 [ head b ] - ] ] ]
[ - [ reduce [ range 0 [ + [ reduce a 0 + ] 1 ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ map [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ] [ partial0 2 * ] ]
[ filter [ filter a [ partial1 b < ] ] [ lambda1 [ reduce [ map [ filter c [ partial1 d > ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ head [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c + ] ] ]
[ reduce [ slice [ reverse [ sort [ map a [ partial0 2 * ] ] ] ] 0 [ reduce b 1000000000 min ] ] 0 + ]
[ range 1 [ + [ reduce [ range 0 [ + [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] 1 ] ]
[ reverse [ map [ map a [ partial1 b * ] ] [ partial1 c + ] ] ]
[ deref [ sort [ range 1 [ + [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] 1 ] ] ] [ / [ len [ range 1 [ + [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] 1 ] ] ] 2 ] ]
[ reduce [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] 1000000000 min ]
[ reduce [ filter a [ partial1 b < ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter c [ partial1 d < ] ] ] ] [ deref [ filter c [ partial1 d < ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ / [ reduce [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] 0 + ] [ len [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ] ]
[ reverse [ map a [ partial1 b * ] ] ]
[ map [ filter [ range 0 [ len [ map [ slice a b c ] square ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ map [ slice a b c ] square ] int-deref ] ]
[ floor [ sqrt [ + [ * [ - [ reduce [ slice [ sort a ] 0 b ] 0 + ] d ] [ - [ reduce [ slice [ sort a ] 0 b ] 0 + ] d ] ] [ * [ - c [ head e ] ] [ - c [ head e ] ] ] ] ] ]
[ reduce [ slice [ sort a ] 0 [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ]
[ reduce [ reverse [ digits [ reduce [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1000000000 min ] < ] ] 1000000000 min ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 [ strlen c ] + ] ]
[ reduce [ map [ range 0 [ len [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] ] ] [ lambda1 [ == [ deref [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] arg1 ] [ deref [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] [ - [ - [ len [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ slice a [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] b ] c ]
[ * a [ reduce [ reverse [ digits [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ filter a [ lambda1 [ reduce [ map [ filter c [ partial1 [ head b ] < ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ map [ slice a b c ] [ partial1 [ reduce [ map [ range 0 [ min [ len d ] [ len e ] ] ] [ lambda1 [ if [ > [ deref d arg1 ] [ deref e arg1 ] ] 1 0 ] ] ] 0 + ] - ] ]
[ range 0 [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ floor [ sqrt [ + [ * [ - [ deref [ sort a ] [ / [ len a ] 2 ] ] c ] [ - [ deref [ sort a ] [ / [ len a ] 2 ] ] c ] ] [ * [ - [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] d ] [ - [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] d ] ] ] ] ]
[ digits [ head a ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ * a [ reduce b 0 max ] ]
[ filter [ filter a [ partial1 b < ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ]
[ slice [ reverse a ] [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] c ]
[ reverse [ reverse [ filter a [ partial1 b > ] ] ] ]
[ head [ slice [ digits a ] 0 [ / [ len [ digits a ] ] 2 ] ] ]
[ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ range 0 [ + a 1 ] ]
[ > [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 ]
[ slice [ filter a [ partial1 b > ] ] c [ reduce [ slice [ reverse [ sort d ] ] 0 e ] 0 + ] ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ map [ filter [ filter a [ partial1 b > ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] square ]
[ - [ reduce [ slice [ slice a b c ] 0 [ / [ len [ slice a b c ] ] 2 ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reverse [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ partial1 [ reduce [ slice [ sort c ] 0 b ] 0 + ] > ] ]
[ reduce [ slice [ sort a ] 0 [ reduce [ reverse [ digits [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 c + ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ slice b 0 [ / [ len b ] 2 ] ] square ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ map [ slice b 0 [ / [ len b ] 2 ] ] square ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ / [ reduce a 0 + ] [ len a ] ] * ] ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ floor [ sqrt [ + [ * [ - [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] c ] [ - [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] c ] ] [ * [ - b [ strlen d ] ] [ - b [ strlen d ] ] ] ] ] ]
[ filter [ digits [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] [ lambda1 [ reduce [ map f [ partial0 arg1 == ] ] false || ] ] ]
[ > [ - [ reduce [ range 0 [ + a 1 ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] b ]
[ digits [ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ filter a [ lambda1 [ reduce [ map [ range 1 [ + c b ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ filter [ slice [ reverse a ] [ / [ len [ reverse a ] ] 2 ] [ len [ reverse a ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ slice a [ head [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] d ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ slice b 0 [ / [ len b ] 2 ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ slice b 0 [ / [ len b ] 2 ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reverse [ digits [ deref [ sort a ] [ / [ len a ] 2 ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ min a [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ range 0 [ + [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] 1 ] ]
[ digits [ strlen a ] ]
[ floor [ sqrt [ + [ * [ - [ reduce [ slice [ sort a ] 0 b ] 0 + ] d ] [ - [ reduce [ slice [ sort a ] 0 b ] 0 + ] d ] ] [ * [ - c e ] [ - c e ] ] ] ] ]
[ head [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ map [ filter [ range 0 [ len [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] b c ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] b c ] int-deref ] ]
[ deref [ sort [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] ]
[ reduce [ map [ range 0 [ min [ len [ filter a [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] > ] ] ] [ len d ] ] ] [ lambda1 [ if [ < [ deref [ filter a [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] > ] ] arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ range 1 [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ filter [ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] is_prime ] [ partial1 b > ] ]
[ digits [ head [ filter a is_prime ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ slice [ map a [ partial1 b * ] ] c [ reduce [ slice [ reverse [ sort d ] ] 0 e ] 0 + ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ slice [ sort [ digits a ] ] 0 b ] 0 + ] ]
[ floor [ sqrt [ + [ * [ - a [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] [ - a [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] ] [ * [ - b [ head d ] ] [ - b [ head d ] ] ] ] ] ]
[ filter [ range 0 a ] [ partial1 [ reduce b 0 max ] > ] ]
[ range 1 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ slice d b c ] ] ] [ deref [ slice d b c ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ + [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ len [ reverse [ filter a [ partial1 b > ] ] ] ]
[ filter [ reverse [ range 0 a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] * ] ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ deref [ map [ range 0 [ + a 1 ] ] square ] [ / [ len [ map [ range 0 [ + a 1 ] ] square ] ] 2 ] ]
[ reduce [ map [ filter a [ partial1 b < ] ] [ partial0 2 * ] ] 1000000000 min ]
[ filter [ slice [ slice a b c ] [ / [ len [ slice a b c ] ] 2 ] [ len [ slice a b c ] ] ] [ combine ! is_prime ] ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ head [ digits b ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ digits b ] square ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map [ digits b ] square ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ map [ slice a b c ] [ partial1 e - ] ] [ partial1 f < ] ]
[ reduce [ map [ range 0 [ len [ map [ slice a b c ] [ partial0 2 * ] ] ] ] [ lambda1 [ == [ deref [ map [ slice a b c ] [ partial0 2 * ] ] arg1 ] [ deref [ map [ slice a b c ] [ partial0 2 * ] ] [ - [ - [ len [ map [ slice a b c ] [ partial0 2 * ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ map [ range 1 [ + [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] 1 ] ] [ partial0 2 * ] ]
[ range 0 [ + [ reduce [ range 0 [ + [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] 1 ] ]
[ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] ] ]
[ range 0 [ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ]
[ map a [ partial1 [ reduce [ range 0 b ] 0 + ] + ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ map [ map a [ partial1 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] * ] ] [ partial0 2 * ] ]
[ * a [ max c [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] ]
[ filter [ filter [ filter a [ partial1 b > ] ] is_prime ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ digits [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ]
[ reduce [ map [ filter [ range 0 [ len [ reverse a ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ reverse a ] int-deref ] ] 0 max ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ map [ digits [ max a b ] ] square ]
[ floor [ sqrt [ + [ * [ - [ head a ] c ] [ - [ head a ] c ] ] [ * [ - [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] d ] [ - [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] d ] ] ] ] ]
[ map [ map a square ] [ partial1 [ strlen b ] - ] ]
[ reduce [ range 0 [ + [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ reduce d 0 max ] ] [ - b [ reduce d 0 max ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ map a [ partial1 [ reduce [ slice [ reverse [ sort c ] ] 0 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ] + ] ]
[ reduce [ range 0 [ + [ reduce [ range 0 [ + [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ deref [ sort [ reverse a ] ] [ / [ len [ reverse a ] ] 2 ] ] ]
[ range 1 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ range 1 b ] ] ] [ deref [ range 1 b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ reduce [ map [ range 0 [ len [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] ] ] [ lambda1 [ == [ deref [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] arg1 ] [ deref [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] [ - [ - [ len [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ range 1 [ reduce [ slice [ sort a ] 0 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] 0 + ] ]
[ reduce [ filter [ filter [ digits a ] [ partial1 b < ] ] [ partial0 [ reduce [ filter [ digits a ] [ partial1 b < ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ range 0 [ reduce [ slice [ sort a ] 0 [ head b ] ] 0 + ] ]
[ filter [ reverse a ] [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ]
[ filter a [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] > ] ]
[ len [ map a [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] - ] ] ]
[ map a [ partial1 [ reduce [ range 0 [ + [ head b ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] * ] ]
[ reduce [ map [ range 0 [ len [ digits [ max a b ] ] ] ] [ lambda1 [ == [ deref [ digits [ max a b ] ] arg1 ] [ deref [ digits [ max a b ] ] [ - [ - [ len [ digits [ max a b ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter [ digits c ] [ partial1 b < ] ] ] ] [ deref [ filter [ digits c ] [ partial1 b < ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ filter [ map a [ partial1 b + ] ] [ partial1 c < ] ] 1000000000 min ]
[ filter [ slice [ reverse a ] 0 [ / [ len [ reverse a ] ] 2 ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ head [ filter a [ partial1 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] < ] ] ]
[ max [ reduce [ reverse [ digits [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] f ]
[ digits [ strlen a ] ]
[ map [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] [ partial0 2 * ] ]
[ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] > ] ]
[ digits [ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ reverse [ digits [ floor [ sqrt [ + [ * [ - a [ reduce [ slice [ sort c ] 0 d ] 0 + ] ] [ - a [ reduce [ slice [ sort c ] 0 d ] 0 + ] ] ] [ * [ - b e ] [ - b e ] ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ + [ * [ - a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] d ] ] [ - a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] d ] ] ] [ * [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] ] ]
[ reverse [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ] ]
[ - [ reduce [ filter a [ partial1 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] > ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ + [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] b ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ - [ reduce [ filter a [ partial1 b < ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ reduce [ filter a [ partial1 [ strlen b ] < ] ] 1000000000 min ]
[ digits [ reduce [ slice [ sort [ map a [ partial1 b * ] ] ] 0 c ] 0 + ] ]
[ filter [ map a [ partial0 2 * ] ] [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] > ] ]
[ filter [ slice [ range 0 a ] b c ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ filter [ range 0 [ + a 1 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ digits [ head [ filter a is_prime ] ] ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ slice b 0 [ / [ len b ] 2 ] ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ digits [ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ]
[ reduce [ slice [ sort [ range 1 a ] ] 0 [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 + ]
[ reverse [ slice a 0 [ / [ len a ] 2 ] ] ]
[ reduce [ range 0 [ + [ strlen [ reduce a "" str_concat ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ filter [ reverse [ map a [ partial1 b - ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ filter [ slice a b c ] [ partial1 [ reduce [ map [ range 0 [ min [ len e ] [ len f ] ] ] [ lambda1 [ if [ < [ deref e arg1 ] [ deref f arg1 ] ] 1 0 ] ] ] 0 + ] > ] ]
[ filter [ map a [ partial1 b + ] ] [ lambda1 [ reduce [ map [ slice d e c ] [ partial0 arg1 == ] ] false || ] ] ]
[ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ partial1 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] - ] ]
[ map [ filter [ range 0 [ len [ map [ digits a ] [ partial1 b + ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ map [ digits a ] [ partial1 b + ] ] int-deref ] ]
[ reverse [ map [ digits a ] [ partial0 2 * ] ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ / [ reduce [ reverse [ range 0 a ] ] 0 + ] [ len [ reverse [ range 0 a ] ] ] ]
[ filter a [ partial1 [ strlen b ] > ] ]
[ * a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ reduce [ filter [ filter [ slice a b c ] [ lambda1 [ reduce [ map e [ partial0 arg1 == ] ] false || ] ] ] [ partial0 [ reduce [ filter [ slice a b c ] [ lambda1 [ reduce [ map e [ partial0 arg1 == ] ] false || ] ] ] 0 max ] > ] ] 0 max ]
[ reduce [ map [ range 0 [ min [ len [ range 1 a ] ] [ len b ] ] ] [ lambda1 [ if [ < [ deref [ range 1 a ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ + [ * [ - a [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] d ] ] [ - a [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] d ] ] ] [ * [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] ] ]
[ map a [ partial1 b - ] ]
[ reduce [ slice [ range 1 a ] [ / [ len [ range 1 a ] ] 2 ] [ len [ range 1 a ] ] ] 1000000000 min ]
[ head [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter c [ partial1 b < ] ] ] ] [ deref [ filter c [ partial1 b < ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ + [ * [ - a [ - [ reduce c 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] [ - a [ - [ reduce c 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] ] [ * [ - b [ + d e ] ] [ - b [ + d e ] ] ] ]
[ reduce [ filter [ map [ range 0 a ] [ partial0 2 * ] ] [ partial0 [ reduce [ map [ range 0 a ] [ partial0 2 * ] ] 0 max ] > ] ] 0 max ]
[ digits [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ / [ reduce a 0 + ] [ len a ] ] ] ]
[ range 0 [ + [ head [ slice a 0 [ / [ len a ] 2 ] ] ] 1 ] ]
[ range 1 [ + [ head [ slice a b c ] ] 1 ] ]
[ digits [ reduce [ range 0 [ + [ head a ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ]
[ reduce [ slice [ reverse [ sort [ reverse [ map a [ partial1 b * ] ] ] ] ] 0 c ] 0 + ]
[ filter [ range 1 [ + a 1 ] ] [ partial1 b > ] ]
[ reduce [ map [ range 0 [ len [ map [ digits a ] [ partial1 b * ] ] ] ] [ lambda1 [ == [ deref [ map [ digits a ] [ partial1 b * ] ] arg1 ] [ deref [ map [ digits a ] [ partial1 b * ] ] [ - [ - [ len [ map [ digits a ] [ partial1 b * ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ len [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ digits [ strlen a ] ]
[ filter [ filter [ digits a ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ range 0 [ min [ len [ map a [ partial1 b - ] ] ] [ len [ digits c ] ] ] ] [ lambda1 [ if [ > [ deref [ map a [ partial1 b - ] ] arg1 ] [ deref [ digits c ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ reverse [ digits [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reverse [ filter [ reverse a ] [ partial1 b > ] ] ]
[ deref [ sort [ map [ reverse a ] [ partial0 2 * ] ] ] [ / [ len [ map [ reverse a ] [ partial0 2 * ] ] ] 2 ] ]
[ head [ slice a 0 [ / [ len a ] 2 ] ] ]
[ map [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 b > ] ] [ partial1 c + ] ]
[ reverse [ reverse [ filter a [ partial1 b > ] ] ] ]
[ max [ reduce [ reverse [ digits [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] f ]
[ slice [ reverse a ] b [ reduce c 0 max ] ]
[ digits [ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ filter a [ lambda1 [ reduce [ map [ slice e b c ] [ partial0 arg1 == ] ] false || ] ] ] 0 max ]
[ head [ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial0 2 * ] ] ]
[ reduce [ map [ range 0 [ min [ len [ map a [ partial1 b - ] ] ] [ len [ digits c ] ] ] ] [ lambda1 [ if [ > [ deref [ map a [ partial1 b - ] ] arg1 ] [ deref [ digits c ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ map [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] square ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ slice [ sort a ] 0 b ] 0 + ] * ] ] ] ] ]
[ filter [ filter [ map a [ partial1 b - ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] [ combine ! is_prime ] ]
[ map [ filter [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] is_prime ] [ partial0 2 * ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ slice [ reverse [ sort [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] 0 c ] 0 + ] ]
[ deref [ sort [ filter a [ partial1 b < ] ] ] [ / [ len [ filter a [ partial1 b < ] ] ] 2 ] ]
[ filter [ slice [ range 1 [ + a 1 ] ] b c ] [ lambda1 [ reduce [ map e [ partial0 arg1 == ] ] false || ] ] ]
[ map [ filter [ filter a [ partial1 b < ] ] [ partial1 c > ] ] [ partial0 2 * ] ]
[ digits [ head [ reverse a ] ] ]
[ map a [ partial0 2 * ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ reverse [ digits [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ filter [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial0 2 * ] ] [ combine ! is_prime ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ range 0 [ len [ map [ filter a [ partial1 b < ] ] [ partial1 c * ] ] ] ] [ lambda1 [ == [ deref [ map [ filter a [ partial1 b < ] ] [ partial1 c * ] ] arg1 ] [ deref [ map [ filter a [ partial1 b < ] ] [ partial1 c * ] ] [ - [ - [ len [ map [ filter a [ partial1 b < ] ] [ partial1 c * ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ is_sorted [ reverse [ filter a [ partial1 b < ] ] ] ]
[ + [ * [ - [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] c ] [ - [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] c ] ] [ * [ - b d ] [ - b d ] ] ]
[ slice [ reverse a ] [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] c ]
[ map [ map a [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] + ] ] square ]
[ is_sorted [ slice [ reverse a ] b c ] ]
[ slice [ reverse [ range 1 a ] ] [ / [ len [ reverse [ range 1 a ] ] ] 2 ] [ len [ reverse [ range 1 a ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ range 0 [ + [ reduce [ range 0 [ + [ head a ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ filter a [ partial1 [ strlen b ] > ] ]
[ reduce [ map [ range 0 [ len [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] ] ] [ lambda1 [ == [ deref [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] arg1 ] [ deref [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] [ - [ - [ len [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ < [ deref [ sort [ map a [ partial1 b + ] ] ] [ / [ len [ map a [ partial1 b + ] ] ] 2 ] ] 1 ]
[ range 1 [ + [ - [ reduce [ reverse a ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ] ]
[ digits [ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] 0 + ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map c [ partial1 b * ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map c [ partial1 b * ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ map [ slice [ digits a ] [ / [ len [ digits a ] ] 2 ] [ len [ digits a ] ] ] [ partial0 2 * ] ]
[ range 0 [ + a 1 ] ]
[ head [ map [ slice a 0 [ / [ len a ] 2 ] ] square ] ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ deref [ digits [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ] [ / [ len [ digits [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] ] ] 2 ] ]
[ reduce [ range 0 [ + [ reduce [ filter a [ partial1 b > ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ head [ filter a [ lambda1 [ reduce [ map [ range 1 b ] [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ map [ range 0 [ len [ filter a [ partial1 [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] < ] ] ] ] [ lambda1 [ == [ deref [ filter a [ partial1 [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] < ] ] arg1 ] [ deref [ filter a [ partial1 [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] < ] ] [ - [ - [ len [ filter a [ partial1 [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] < ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ map [ slice [ slice a b c ] [ / [ len [ slice a b c ] ] 2 ] [ len [ slice a b c ] ] ] square ]
[ head [ filter a [ partial1 b > ] ] ]
[ reduce [ filter [ range 1 [ * a b ] ] [ partial0 [ reduce [ range 1 [ * a b ] ] 0 max ] > ] ] 0 max ]
[ reduce [ filter [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] is_prime ] 0 + ]
[ range 0 [ reduce [ slice a [ / [ len a ] 2 ] [ len a ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ map [ reverse b ] square ] ] ] [ deref [ map [ reverse b ] square ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ filter [ slice a b c ] [ lambda1 [ reduce [ map [ filter d [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ map a [ partial0 2 * ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ digits [ strlen a ] ]
[ reverse [ slice a 0 [ / [ len a ] 2 ] ] ]
[ - [ reduce [ filter a [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] < ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ filter [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ slice [ range 1 a ] [ / [ len [ range 1 a ] ] 2 ] [ len [ range 1 a ] ] ] 1000000000 min ]
[ min a [ reduce [ slice [ sort d ] 0 [ * c b ] ] 0 + ] ]
[ max [ deref [ sort a ] [ / [ len a ] 2 ] ] [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] ]
[ reduce [ range 0 [ + [ reduce [ map [ range 0 [ min [ len a ] [ len [ map b [ partial0 2 * ] ] ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref [ map b [ partial0 2 * ] ] arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ deref [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ / [ len [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] 2 ] ]
[ map [ digits [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] ] [ partial0 2 * ] ]
[ digits [ head [ reverse a ] ] ]
[ filter [ range 0 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] is_prime ]
[ - [ reduce [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ max [ reduce [ filter [ digits a ] [ partial0 [ reduce [ digits a ] 1000000000 min ] < ] ] 1000000000 min ] b ]
[ reduce [ reverse [ digits [ reduce [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1000000000 min ] < ] ] 1000000000 min ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ head [ map [ filter [ range 0 [ len [ map a [ partial0 2 * ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ map a [ partial0 2 * ] ] int-deref ] ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] * ] ] ] ] ]
[ map [ filter [ range 1 [ + a 1 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ]
[ slice [ range 0 [ + [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] 1 ] ] 0 [ / [ len [ range 0 [ + [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] 1 ] ] ] 2 ] ]
[ range 1 [ + [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] 1 ] ]
[ slice [ digits [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] 0 [ / [ len [ digits [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] ] 2 ] ]
[ digits [ head [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ] ]
[ filter [ slice a b c ] [ lambda1 [ reduce [ map [ slice e b c ] [ partial0 arg1 == ] ] false || ] ] ]
[ + [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] b ]
[ reduce [ range 0 [ + [ head [ filter a [ partial1 b < ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ range 0 [ + a 1 ] ]
[ digits [ reduce [ map a [ partial1 b - ] ] 0 max ] ]
[ deref [ range 0 [ min a b ] ] [ / [ len [ range 0 [ min a b ] ] ] 2 ] ]
[ filter [ filter a [ partial1 b < ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ reduce [ slice [ sort [ digits a ] ] 0 [ min c b ] ] 0 + ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ floor [ sqrt [ + [ * [ - [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] d ] ] [ - [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ] ] [ * [ - c e ] [ - c e ] ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ map [ range 1 [ + [ * a b ] 1 ] ] square ]
[ > [ head a ] [ len b ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ min a [ reduce [ reverse [ digits [ strlen b ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ range 1 [ reduce [ map [ range 0 [ min [ len a ] [ len [ slice e b c ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ slice e b c ] arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ filter [ map [ map a [ partial1 b * ] ] [ partial1 c + ] ] is_prime ]
[ max a [ reduce [ slice [ sort c ] 0 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ] ]
[ is_sorted [ map [ map a [ partial0 2 * ] ] [ partial1 b - ] ] ]
[ reverse [ map [ filter [ range 0 [ len [ filter a [ partial1 b < ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ filter a [ partial1 b < ] ] int-deref ] ] ]
[ reduce [ reverse [ digits [ + [ * [ - a [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ] [ - a [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] ] ] [ * [ - b e ] [ - b e ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ map b square ] ] ] [ deref [ map b square ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ slice [ reverse [ sort [ digits [ head a ] ] ] ] 0 b ] 0 + ]
[ deref [ sort [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] ]
[ filter [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] 0 [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] ] [ partial1 b < ] ]
[ range 0 [ + a 1 ] ]
[ reduce [ reverse [ digits [ deref [ range 1 [ + a 1 ] ] [ / [ len [ range 1 [ + a 1 ] ] ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ range 0 [ + [ strlen [ reduce a "" str_concat ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ reduce [ reverse [ digits [ reduce [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1000000000 min ] < ] ] 1000000000 min ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ slice [ filter a [ combine ! is_prime ] ] [ strlen b ] c ]
[ - [ reduce [ range 0 [ reduce [ slice [ sort a ] 0 b ] 0 + ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ map [ map [ map a square ] square ] [ partial0 2 * ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ reduce [ slice [ sort [ map a [ partial1 b * ] ] ] 0 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] 0 + ]
[ filter [ range 1 a ] [ partial1 [ head b ] > ] ]
[ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] > ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] * ] ] ] ] ]
[ digits [ reduce [ filter [ slice a b c ] [ partial0 [ reduce [ slice a b c ] 0 max ] > ] ] 0 max ] ]
[ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] + ] ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ filter [ slice [ range 0 [ + a 1 ] ] [ / [ len [ range 0 [ + a 1 ] ] ] 2 ] [ len [ range 0 [ + a 1 ] ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ digits [ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ filter [ range 0 [ len [ slice b 0 [ / [ len b ] 2 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ slice b 0 [ / [ len b ] 2 ] ] int-deref ] ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map [ filter [ range 0 [ len [ slice b 0 [ / [ len b ] 2 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ slice b 0 [ / [ len b ] 2 ] ] int-deref ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ map [ digits a ] [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] + ] ]
[ reduce [ map [ range 0 [ len [ filter a [ lambda1 [ reduce [ map [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 arg1 == ] ] false || ] ] ] ] ] [ lambda1 [ == [ deref [ filter a [ lambda1 [ reduce [ map [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 arg1 == ] ] false || ] ] ] arg1 ] [ deref [ filter a [ lambda1 [ reduce [ map [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 arg1 == ] ] false || ] ] ] [ - [ - [ len [ filter a [ lambda1 [ reduce [ map [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 arg1 == ] ] false || ] ] ] ] arg1 ] 1 ] ] ] ] ]
[ map [ range 0 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] ] [ partial0 2 * ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ range 0 [ len [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 2 * ] ] ] ] [ lambda1 [ == [ deref [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 2 * ] ] arg1 ] [ deref [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 2 * ] ] [ - [ - [ len [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 2 * ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ reverse [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] ]
[ slice a [ reduce [ reverse [ digits [ deref [ sort c ] [ / [ len c ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] d ]
[ reduce [ filter [ slice [ range 1 [ + a 1 ] ] b c ] [ partial0 [ reduce [ slice [ range 1 [ + a 1 ] ] b c ] 1000000000 min ] < ] ] 1000000000 min ]
[ + [ * [ - a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len d ] ] [ deref d arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] [ - a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len d ] ] [ deref d arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ] [ * [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g i ] [ - g i ] ] ] ] [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g i ] [ - g i ] ] ] ] ]
[ filter [ slice [ range 1 a ] b c ] [ lambda1 [ reduce [ map e [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map [ map a [ partial1 b + ] ] [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len d ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ] - ] ]
[ map [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ combine ! is_prime ] ] [ partial0 2 * ] ]
[ head [ map [ slice a 0 [ / [ len a ] 2 ] ] square ] ]
[ max [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ filter a [ partial1 [ strlen b ] > ] ]
[ map [ map a [ partial1 b - ] ] [ partial1 c * ] ]
[ slice [ digits [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] [ / [ len [ digits [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] ] 2 ] [ len [ digits [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ filter a [ lambda1 [ reduce [ map [ range 0 [ + [ reduce [ slice [ reverse [ sort c ] ] 0 b ] 0 + ] 1 ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ range 0 [ + [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] 1 ] ]
[ reduce [ range 0 [ + [ strlen [ reduce a "z" str_min ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ range 1 [ + [ + a [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 1 ] ]
[ floor [ sqrt [ + [ * [ - [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] [ reduce [ slice [ sort d ] 0 e ] 0 + ] ] [ - [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] [ reduce [ slice [ sort d ] 0 e ] 0 + ] ] ] [ * [ - c f ] [ - c f ] ] ] ] ]
[ digits [ strlen a ] ]
[ reverse [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ < [ deref [ sort [ map a [ partial0 2 * ] ] ] [ / [ len [ map a [ partial0 2 * ] ] ] 2 ] ] b ]
[ reduce [ filter [ digits a ] [ partial0 [ reduce [ digits a ] 1000000000 min ] < ] ] 1000000000 min ]
[ is_sorted [ slice [ reverse a ] b c ] ]
[ digits [ * a [ head b ] ] ]
[ range 1 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map [ slice [ slice a b c ] e f ] square ]
[ head [ digits [ min a b ] ] ]
[ reduce [ range 0 [ + [ strlen [ reduce a "z" str_min ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ filter a [ partial1 [ strlen b ] > ] ]
[ map [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] square ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] + ] ] ] ]
[ filter [ slice a [ head b ] c ] is_prime ]
[ reduce [ reverse [ digits [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter c [ partial1 b < ] ] ] ] [ deref [ filter c [ partial1 b < ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ head [ map a [ partial1 [ reduce [ slice [ reverse [ sort c ] ] 0 b ] 0 + ] - ] ] ]
[ reduce [ reverse [ digits [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ digits [ strlen [ reduce a "z" str_min ] ] ]
[ reduce [ filter [ filter a [ lambda1 [ reduce [ map [ filter c [ partial1 b > ] ] [ partial0 arg1 == ] ] false || ] ] ] [ partial0 [ reduce [ filter a [ lambda1 [ reduce [ map [ filter c [ partial1 b > ] ] [ partial0 arg1 == ] ] false || ] ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ digits [ head [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ slice a b [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ + [ * [ - [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] c ] [ - [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] c ] ] [ * [ - [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 b + ] ] ] ] d ] [ - [ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 b + ] ] ] ] d ] ] ]
[ > [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len c ] ] [ deref c arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ floor [ sqrt [ + [ * [ - [ / [ reduce [ slice a [ / [ len a ] 2 ] [ len a ] ] 0 + ] [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] c ] [ - [ / [ reduce [ slice a [ / [ len a ] 2 ] [ len a ] ] 0 + ] [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] c ] ] [ * [ - b d ] [ - b d ] ] ] ] ]
[ range 0 [ + [ len [ digits a ] ] 1 ] ]
[ digits [ strlen a ] ]
[ filter [ filter a [ lambda1 [ reduce [ map [ digits b ] [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c < ] ]
[ reduce [ reverse [ digits [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ reduce [ range 0 [ + d 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] [ - b [ reduce [ range 0 [ + d 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] ] ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter [ map [ filter [ range 0 [ len [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ filter [ filter [ map a [ partial1 b - ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] [ partial1 d > ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ head [ slice a 0 [ / [ len a ] 2 ] ] ] ]
[ reduce [ reverse [ digits [ + [ * [ - a [ max c d ] ] [ - a [ max c d ] ] ] [ * [ - b e ] [ - b e ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ - [ reduce [ range 0 [ + [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] 1 ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ head [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ]
[ filter a [ partial1 [ + [ * [ - f [ reduce [ filter c [ partial0 [ reduce c 1000000000 min ] < ] ] 1000000000 min ] ] [ - f [ reduce [ filter c [ partial0 [ reduce c 1000000000 min ] < ] ] 1000000000 min ] ] ] [ * [ - b d ] [ - b d ] ] ] < ] ]
[ reduce [ range 0 [ + [ - [ reduce [ reverse a ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ map [ slice a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] c ] square ]
[ > [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 0 ]
[ slice [ range 0 a ] b c ]
[ max a [ reduce [ slice e b c ] 0 + ] ]
[ filter [ filter a [ partial1 b < ] ] [ partial1 [ - [ reduce c 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] > ] ]
[ filter a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] > ] ]
[ map [ map a [ partial1 b * ] ] [ partial1 [ head c ] + ] ]
[ map [ digits a ] [ partial1 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] * ] ]
[ reduce [ filter [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 b < ] ] [ partial0 [ reduce [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 b < ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ reduce [ reverse [ digits [ len a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ + [ * [ - a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] ] [ - a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] ] ] [ * [ - b [ reduce [ filter d [ partial0 [ reduce d 1000000000 min ] < ] ] 1000000000 min ] ] [ - b [ reduce [ filter d [ partial0 [ reduce d 1000000000 min ] < ] ] 1000000000 min ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ map a [ partial1 b - ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 [ deref [ sort c ] [ / [ len c ] 2 ] ] * ] ]
[ reverse [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ filter [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial1 [ deref b [ / [ len b ] 2 ] ] < ] ]
[ + [ * [ - [ + a b ] d ] [ - [ + a b ] d ] ] [ * [ - c e ] [ - c e ] ] ]
[ digits [ head [ map a [ partial1 b + ] ] ] ]
[ reduce [ map a [ partial1 [ strlen b ] - ] ] 0 max ]
[ head [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] ]
[ len [ range 1 [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] ]
[ reduce [ slice [ sort a ] 0 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ]
[ reverse [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] 0 [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] ] ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce [ map b square ] 0 + ] ] 0 + ]
[ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ reverse c ] ] ] [ deref [ reverse c ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ deref [ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ partial0 2 * ] ] [ / [ len [ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ partial0 2 * ] ] ] 2 ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] * ] ] ] ] ]
[ head [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] ] ]
[ strlen a ]
[ + [ reduce [ range 0 [ + [ head a ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] b ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ slice e b c ] square ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map [ slice e b c ] square ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ is_sorted [ map [ filter a [ partial1 b < ] ] [ partial1 c + ] ] ]
[ reduce [ map [ filter [ range 0 [ len [ reverse a ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ reverse a ] int-deref ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ filter [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] square ] [ partial0 [ reduce [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] square ] 1000000000 min ] < ] ] 1000000000 min ]
[ reduce [ range 0 [ + [ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ digits [ head a ] ]
[ deref [ sort [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ digits a ] 0 + ] ]
[ reduce [ range 0 [ + [ min a [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ reduce [ slice [ sort a ] 0 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ]
[ reduce [ filter [ map [ range 0 a ] [ partial0 2 * ] ] [ partial0 [ reduce [ map [ range 0 a ] [ partial0 2 * ] ] 0 max ] > ] ] 0 max ]
[ filter [ slice a b [ max c d ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ filter [ slice [ digits a ] [ / [ len [ digits a ] ] 2 ] [ len [ digits a ] ] ] is_prime ]
[ map [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] square ] [ partial1 b * ] ]
[ slice [ digits a ] [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] c ]
[ map a [ partial1 [ head [ slice b [ / [ len b ] 2 ] [ len b ] ] ] + ] ]
[ digits [ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] 0 + ] ]
[ reduce [ slice [ sort [ map a [ partial1 b * ] ] ] 0 [ reduce [ slice [ sort c ] 0 d ] 0 + ] ] 0 + ]
[ reduce [ filter [ filter [ digits a ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ reduce [ filter [ digits a ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] 0 max ] > ] ] 0 max ]
[ head [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ slice [ slice a b c ] [ strlen e ] f ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ filter [ slice a 0 [ / [ len a ] 2 ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ reduce [ slice [ sort [ map a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] * ] ] ] 0 c ] 0 + ]
[ reduce [ map [ range 0 [ min [ len [ reverse a ] ] [ len [ slice d b c ] ] ] ] [ lambda1 [ if [ > [ deref [ reverse a ] arg1 ] [ deref [ slice d b c ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ head [ filter a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] < ] ] ]
[ filter [ slice [ digits a ] [ / [ len [ digits a ] ] 2 ] [ len [ digits a ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ filter [ map [ range 0 [ + a 1 ] ] [ partial1 b * ] ] [ partial1 c < ] ]
[ reduce [ map [ range 0 [ min [ len [ reverse [ range 0 a ] ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ reverse [ range 0 a ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] * ] ] ] ] ]
[ reverse [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] ]
[ range 0 [ + a 1 ] ]
[ filter [ map [ filter [ range 0 [ len [ filter a [ partial1 b > ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ filter a [ partial1 b > ] ] int-deref ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ floor [ sqrt [ + [ * [ - [ reduce [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial0 [ reduce [ slice a [ / [ len a ] 2 ] [ len a ] ] 1000000000 min ] < ] ] 1000000000 min ] c ] [ - [ reduce [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial0 [ reduce [ slice a [ / [ len a ] 2 ] [ len a ] ] 1000000000 min ] < ] ] 1000000000 min ] c ] ] [ * [ - b d ] [ - b d ] ] ] ] ]
[ filter [ filter [ range 1 [ + a 1 ] ] [ partial1 b > ] ] [ partial1 c > ] ]
[ range 0 [ + [ * a [ reduce [ slice [ sort c ] 0 b ] 0 + ] ] 1 ] ]
[ reduce [ range 0 [ + [ reduce [ reverse [ digits [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ head [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ reduce [ map a [ partial0 2 * ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ reverse b ] ] ] [ deref [ reverse b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ slice [ reverse [ sort [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 b < ] ] ] ] 0 c ] 0 + ]
[ deref [ slice [ map a [ partial1 b + ] ] 0 [ / [ len [ map a [ partial1 b + ] ] ] 2 ] ] [ / [ len [ slice [ map a [ partial1 b + ] ] 0 [ / [ len [ map a [ partial1 b + ] ] ] 2 ] ] ] 2 ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ floor [ sqrt [ + [ * [ - a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] ] [ - a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] c ] ] ] [ * [ - b [ floor [ sqrt [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] [ - b [ floor [ sqrt [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map e [ partial1 [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ < [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] * ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map e [ partial1 [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ < [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] * ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ max [ reduce [ slice [ sort a ] 0 b ] 0 + ] c ]
[ min [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] b ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ slice a 0 [ / [ len a ] 2 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ reduce [ reverse [ digits [ deref [ map a [ partial0 2 * ] ] [ / [ len [ map a [ partial0 2 * ] ] ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ range 1 [ reduce [ slice [ reverse [ sort [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] 0 c ] 0 + ] ]
[ head [ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial0 2 * ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ deref [ reverse a ] [ / [ len [ reverse a ] ] 2 ] ] ]
[ reverse [ range 0 [ + [ reduce [ filter a [ partial0 [ reduce a 1000000000 min ] < ] ] 1000000000 min ] 1 ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ + [ * [ - a d ] [ - a d ] ] [ * [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] [ - [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] e ] ] ] ]
[ range 1 [ + [ reduce [ reverse [ digits [ min a b ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ]
[ filter [ slice a 0 [ / [ len a ] 2 ] ] [ lambda1 [ reduce [ map [ slice b 0 [ / [ len b ] 2 ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ head [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ slice [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] c ] d ]
[ head [ slice [ filter a [ partial1 b > ] ] c d ] ]
[ slice a [ strlen b ] [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] c ] ]
[ reduce [ map [ range 0 [ min [ len [ reverse [ digits a ] ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ reverse [ digits a ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ min [ head [ slice a [ / [ len a ] 2 ] [ len a ] ] ] b ]
[ reduce [ map [ range 0 [ len [ slice a [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] c ] ] ] ] [ lambda1 [ == [ deref [ slice a [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] c ] arg1 ] [ deref [ slice a [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1
[ reduce [ range 0 [ + [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ + [ * [ - [ deref a [ / [ len a ] 2 ] ] c ] [ - [ deref a [ / [ len a ] 2 ] ] c ] ] [ * [ - b [ reduce [ reverse [ digits d ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ - b [ reduce [ reverse [ digits d ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] ]
[ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ range 0 [ min [ len [ filter a [ lambda1 [ reduce [ map [ slice b [ / [ len b ] 2 ] [ len b ] ] [ partial0 arg1 == ] ] false || ] ] ] ] [ len c ] ] ] [ lambda1 [ if [ > [ deref [ filter a [ lambda1 [ reduce [ map [ slice b [ / [ len b ] 2 ] [ len b ] ] [ partial0 arg1 == ] ] false || ] ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ max [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ digits b ] ] ] [ deref [ digits b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] c ]
[ reduce [ filter [ map [ reverse a ] square ] [ partial0 [ reduce [ map [ reverse a ] square ] 0 max ] > ] ] 0 max ]
[ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ partial1 [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] + ] ]
[ map [ map a [ partial1 b * ] ] [ partial1 c + ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ slice [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] c d ]
[ reduce [ map [ range 0 [ min [ len [ slice a b c ] ] [ len [ digits d ] ] ] ] [ lambda1 [ if [ > [ deref [ slice a b c ] arg1 ] [ deref [ digits d ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ len [ map [ filter [ range 0 [ len [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] int-deref ] ] ] ] [ lambda1 [ == [ deref [ map [ filter [ range 0 [ len [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] int-deref ] ] arg1 ] [ deref [ map [ filter [ range 0 [ len [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] [ lambda1 [ == [
[ slice [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] c [ min d e ] ]
[ digits [ reduce [ map [ range 0 [ min [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ len b ] ] ] [ lambda1 [ if [ < [ deref [ slice a [ / [ len a ] 2 ] [ len a ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ reduce [ filter [ slice [ reverse a ] b c ] [ partial0 [ reduce [ slice [ reverse a ] b c ] 0 max ] > ] ] 0 max ]
[ reduce [ map [ range 0 [ len [ slice a [ head b ] c ] ] ] [ lambda1 [ == [ deref [ slice a [ head b ] c ] arg1 ] [ deref [ slice a [ head b ] c ] [ - [ - [ len [ slice a [ head b ] c ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ map [ reverse a ] [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] - ] ]
[ map a [ partial1 [ floor [ sqrt [ + [ * [ - j c ] [ - j c ] ] [ * [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] [ - b [ + [ * [ - f h ] [ - f h ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] ] ] + ] ]
[ digits [ strlen a ] ]
[ > [ deref a [ / [ len a ] 2 ] ] [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ filter a [ partial1 [ reduce [ reverse [ digits [ reduce [ slice [ sort c ] 0 b ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] > ] ]
[ digits [ head [ filter a is_prime ] ] ]
[ floor [ sqrt [ + [ * [ - a [ min c d ] ] [ - a [ min c d ] ] ] [ * [ - b [ reduce [ reverse [ digits e ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ - b [ reduce [ reverse [ digits e ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] ] ] ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ map [ slice [ slice a b c ] 0 [ / [ len [ slice a b c ] ] 2 ] ] square ]
[ - [ reduce [ filter [ slice a 0 [ / [ len a ] 2 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ digits [ reduce [ map [ range 0 [ min [ len [ map a [ partial1 b - ] ] ] [ len c ] ] ] [ lambda1 [ if [ > [ deref [ map a [ partial1 b - ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ reverse [ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] square ] ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ min a [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ map b [ partial0 2 * ] ] ] ] [ deref [ map b [ partial0 2 * ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ filter [ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial0 2 * ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ filter a [ partial1 [ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] < ] ]
[ reduce [ reverse [ digits [ reduce [ filter [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ reduce [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] 1000000000 min ] < ] ] 1000000000 min ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map [ filter [ range 0 [ len [ map [ slice a b c ] square ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ map [ slice a b c ] square ] int-deref ] ]
[ digits [ reduce [ range 0 [ + [ deref [ sort a ] [ / [ len a ] 2 ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ filter a [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ digits b ] ] ] [ deref [ digits b ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] > ] ]
[ filter [ slice [ range 0 [ + a 1 ] ] 0 [ / [ len [ range 0 [ + a 1 ] ] ] 2 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ head [ filter [ slice a [ / [ len a ] 2 ] [ len a ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ deref [ map [ filter [ range 0 [ len [ map a [ partial0 2 * ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ map a [ partial0 2 * ] ] int-deref ] ] [ / [ len [ map [ filter [ range 0 [ len [ map a [ partial0 2 * ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ map a [ partial0 2 * ] ] int-deref ] ] ] 2 ] ]
[ slice [ reverse [ range 1 [ + a 1 ] ] ] 0 [ / [ len [ reverse [ range 1 [ + a 1 ] ] ] ] 2 ] ]
[ reverse [ reverse [ filter a [ partial1 b > ] ] ] ]
[ filter [ slice a [ head b ] c ] is_prime ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ filter [ map [ map a square ] [ partial0 2 * ] ] [ partial0 [ reduce [ map [ map a square ] [ partial0 2 * ] ] 0 max ] > ] ] 0 max ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ]
[ slice [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ reduce b 1000000000 min ] c ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ map [ reverse b ] [ partial0 2 * ] ] ] ] [ deref [ map [ reverse b ] [ partial0 2 * ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ map a [ partial1 [ * d [ reduce [ slice [ reverse [ sort c ] ] 0 b ] 0 + ] ] - ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ reduce [ map [ range 0 [ min [ len a ] [ len [ filter c [ partial1 b > ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ filter c [ partial1 b > ] ] arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ map [ map [ digits a ] square ] square ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] square ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] square ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ slice [ sort a ] 0 [ strlen [ reduce b "" str_concat ] ] ] 0 + ]
[ reduce [ filter [ filter [ reverse a ] is_prime ] [ partial0 [ reduce [ filter [ reverse a ] is_prime ] 1000000000 min ] < ] ] 1000000000 min ]
[ reduce [ map [ range 0 [ len [ map [ digits a ] [ partial1 b * ] ] ] ] [ lambda1 [ == [ deref [ map [ digits a ] [ partial1 b * ] ] arg1 ] [ deref [ map [ digits a ] [ partial1 b * ] ] [ - [ - [ len [ map [ digits a ] [ partial1 b * ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ reduce [ range 0 [ + [ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] ] 0 + ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ slice [ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] c d ]
[ reduce [ filter [ map [ digits a ] [ partial1 b + ] ] [ partial0 [ reduce [ map [ digits a ] [ partial1 b + ] ] 0 max ] > ] ] 0 max ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ]
[ map [ slice a b c ] [ partial1 [ - [ reduce d 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] * ] ]
[ digits [ strlen [ reduce a "z" str_min ] ] ]
[ floor [ sqrt [ + [ * [ - a [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 d + ] ] ] ] ] [ - a [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 d + ] ] ] ] ] ] [ * [ - [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] e ] [ - [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] e ] ] ] ] ]
[ filter [ slice a b [ + c d ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ + a [ reduce [ range 0 [ + [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ map [ map [ filter [ range 0 [ len [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] int-deref ] ] [ partial1 c + ] ]
[ filter [ reverse a ] [ lambda1 [ reduce [ map [ slice e b c ] [ partial0 arg1 == ] ] false || ] ] ]
[ slice [ filter a [ partial1 b < ] ] [ reduce [ map [ range 0 [ min [ len c ] [ len d ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ] e ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] [ partial1 b < ] ]
[ reduce [ slice [ sort [ filter [ filter a [ partial1 b < ] ] [ combine ! is_prime ] ] ] 0 c ] 0 + ]
[ - [ reduce [ range 1 [ + [ deref [ sort a ] [ / [ len a ] 2 ] ] 1 ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ reverse [ range 0 a ] ] 0 max ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ reduce [ filter [ digits [ reduce a 1000000000 min ] ] [ partial0 [ reduce [ digits [ reduce a 1000000000 min ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] + ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ range 0 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ range 0 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ slice [ sort [ filter [ map a square ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] 0 b ] 0 + ]
[ is_sorted [ filter a [ partial1 [ deref b [ / [ len b ] 2 ] ] < ] ] ]
[ filter [ range 1 [ + [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] 1 ] ] [ partial1 b > ] ]
[ deref [ slice [ map a [ partial1 b + ] ] 0 [ / [ len [ map a [ partial1 b + ] ] ] 2 ] ] [ / [ len [ slice [ map a [ partial1 b + ] ] 0 [ / [ len [ map a [ partial1 b + ] ] ] 2 ] ] ] 2 ] ]
[ reduce [ range 0 [ + [ reduce [ map a square ] 0 max ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ filter [ map a square ] [ partial1 [ deref b [ / [ len b ] 2 ] ] < ] ]
[ filter [ filter a [ combine ! is_prime ] ] [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ]
[ map a [ partial1 [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ strlen b ] ] + ] ]
[ deref [ filter a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] > ] ] [ / [ len [ filter a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] > ] ] ] 2 ] ]
[ head [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ map a [ partial1 b - ] ]
[ map [ map [ reverse a ] square ] [ partial0 2 * ] ]
[ filter a [ lambda1 [ reduce [ map [ range 0 [ + b 1 ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ map a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] * ] ]
[ map [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] square ]
[ reduce [ filter [ filter [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ combine ! is_prime ] ] [ partial0 [ reduce [ filter [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ combine ! is_prime ] ] 0 max ] > ] ] 0 max ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map [ filter [ range 0 [ len [ range 0 [ strlen a ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ range 0 [ strlen a ] ] int-deref ] ]
[ reduce [ filter [ map a [ partial1 b - ] ] [ partial0 [ reduce [ map a [ partial1 b - ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ reduce [ map [ range 0 [ min [ len [ slice a b c ] ] [ len [ filter e [ lambda1 [ reduce [ map f [ partial0 arg1 == ] ] false || ] ] ] ] ] ] [ lambda1 [ if [ > [ deref [ slice a b c ] arg1 ] [ deref [ filter e [ lambda1 [ reduce [ map f [ partial0 arg1 == ] ] false || ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ slice [ sort a ] 0 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ]
[ reduce [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] b c ] 0 max ]
[ reduce [ range 0 [ + [ min a [ reduce [ slice [ sort c ] 0 b ] 0 + ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ map [ map a square ] [ partial1 [ strlen b ] - ] ]
[ filter [ slice [ digits a ] 0 [ / [ len [ digits a ] ] 2 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ map [ range 0 [ min [ len [ map a [ partial1 b + ] ] ] [ len [ filter c [ partial1 d < ] ] ] ] ] [ lambda1 [ if [ > [ deref [ map a [ partial1 b + ] ] arg1 ] [ deref [ filter c [ partial1 d < ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ + [ head [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ] b ]
[ map [ map [ filter a [ partial1 b < ] ] [ partial0 2 * ] ] [ partial0 2 * ] ]
[ reduce [ range 0 [ + [ / [ reduce [ reverse a ] 0 + ] [ len [ reverse a ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ range 0 [ + [ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ head [ map a [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] + ] ] ]
[ reduce [ reverse [ digits [ deref a [ / [ len a ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] + ] ] ] ]
[ reverse [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ slice a [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] b ] c ]
[ reduce [ range 0 [ + [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ reduce [ slice [ reverse [ sort d ] ] 0 e ] 0 + ] ] [ - b [ reduce [ slice [ reverse [ sort d ] ] 0 e ] 0 + ] ] ] ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ range 0 [ + [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ slice a [ strlen b ] [ reduce [ slice [ sort c ] 0 d ] 0 + ] ]
[ deref [ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] [ / [ len [ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] ] 2 ] ]
[ reverse [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] ]
[ max [ head [ digits a ] ] b ]
[ slice [ reverse [ range 1 [ + a 1 ] ] ] [ / [ len [ reverse [ range 1 [ + a 1 ] ] ] ] 2 ] [ len [ reverse [ range 1 [ + a 1 ] ] ] ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ map a [ partial0 2 * ] ] 0 max ] ]
[ floor [ sqrt [ + [ * [ - [ + a b ] d ] [ - [ + a b ] d ] ] [ * [ - c [ reduce [ slice [ sort e ] 0 f ] 0 + ] ] [ - c [ reduce [ slice [ sort e ] 0 f ] 0 + ] ] ] ] ] ]
[ digits [ head [ slice a b c ] ] ]
[ reduce [ range 0 [ + [ deref [ filter a [ partial1 b < ] ] [ / [ len [ filter a [ partial1 b < ] ] ] 2 ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ reduce [ map [ range 0 [ len [ map a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] + ] ] ] ] [ lambda1 [ == [ deref [ map a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] + ] ] arg1 ] [ deref [ map a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] + ] ] [ - [ - [ len [ map a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] + ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ deref [ digits [ len a ] ] [ / [ len [ digits [ len a ] ] ] 2 ] ]
[ reduce [ map [ range 0 [ min [ len [ filter [ range 0 a ] [ partial1 b < ] ] ] [ len c ] ] ] [ lambda1 [ if [ < [ deref [ filter [ range 0 a ] [ partial1 b < ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ - [ reduce [ digits [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 a * ] ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ filter [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ]
[ map [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] * ] ]
[ filter [ slice a 0 [ / [ len a ] 2 ] ] [ partial1 [ reduce [ reverse [ digits b ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] < ] ]
[ - [ reduce [ slice [ reverse a ] b c ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ map [ map a [ partial1 b + ] ] [ partial0 2 * ] ] 1000000000 min ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ]
[ filter [ digits [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] is_prime ]
[ > [ - [ reduce [ slice a [ / [ len a ] 2 ] [ len a ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ]
[ map [ range 1 [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] square ]
[ reduce [ range 0 [ + [ reduce [ filter [ digits a ] [ partial0 [ reduce [ digits a ] 0 max ] > ] ] 0 max ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ head [ map a [ partial1 [ reduce [ slice [ reverse [ sort c ] ] 0 b ] 0 + ] + ] ] ]
[ reduce [ slice [ reverse [ sort [ slice a b c ] ] ] 0 [ min d e ] ] 0 + ]
[ reduce [ digits [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ] 0 + ]
[ reverse [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] 0 [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] ] ]
[ digits [ strlen a ] ]
[ slice [ digits [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] 0 [ / [ len [ digits [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ] ] 2 ] ]
[ range 0 [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ]
[ filter [ range 0 [ + [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] 1 ] ] is_prime ]
[ filter [ reverse a ] [ lambda1 [ reduce [ map [ slice e b c ] [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ slice [ sort [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 0 [ deref [ sort b ] [ / [ len b ] 2 ] ] ] 0 + ]
[ map a [ partial1 b - ] ]
[ filter [ range 1 a ] [ partial1 [ max c b ] > ] ]
[ filter [ reverse [ slice a b c ] ] [ lambda1 [ reduce [ map e [ partial0 arg1 == ] ] false || ] ] ]
[ digits [ - [ reduce [ filter a [ partial1 b > ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ range 1 [ + a 1 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ reduce [ reverse [ digits [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len [ map b [ partial0 2 * ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map b [ partial0 2 * ] ] arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ map [ slice a b c ] [ partial1 [ reduce [ reverse [ digits d ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] - ] ]
[ deref [ map [ digits a ] [ partial0 2 * ] ] [ / [ len [ map [ digits a ] [ partial0 2 * ] ] ] 2 ] ]
[ / [ reduce [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] square ] 0 + ] [ len [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] square ] ] ]
[ deref [ sort a ] [ / [ len a ] 2 ] ]
[ reduce [ filter [ map [ filter [ range 0 [ len [ reverse a ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ reverse a ] int-deref ] ] [ partial0 [ reduce [ map [ filter [ range 0 [ len [ reverse a ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ reverse a ] int-deref ] ] 0 max ] > ] ] 0 max ]
[ map [ filter a [ partial1 b < ] ] [ partial1 [ reduce [ slice [ sort c ] 0 d ] 0 + ] * ] ]
[ map a [ partial1 b - ] ]
[ floor [ sqrt [ + [ * [ - [ max a b ] d ] [ - [ max a b ] d ] ] [ * [ - c [ reduce [ filter e [ partial0 [ reduce e 0 max ] > ] ] 0 max ] ] [ - c [ reduce [ filter e [ partial0 [ reduce e 0 max ] > ] ] 0 max ] ] ] ] ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ reduce [ range 0 [ + [ reduce [ filter a [ partial1 b < ] ] 0 max ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ map [ map a [ partial1 [ reduce [ slice [ sort c ] 0 b ] 0 + ] + ] ] [ combine ! is_prime ] ]
[ floor [ sqrt [ + [ * [ - a [ reduce [ slice [ sort c ] 0 d ] 0 + ] ] [ - a [ reduce [ slice [ sort c ] 0 d ] 0 + ] ] ] [ * [ - b [ floor [ sqrt [ + [ * [ - f h ] [ - f h ] ] [ * [ - g i ] [ - g i ] ] ] ] ] ] [ - b [ floor [ sqrt [ + [ * [ - f h ] [ - f h ] ] [ * [ - g i ] [ - g i ] ] ] ] ] ] ] ] ] ]
[ reduce [ map a [ partial0 2 * ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter c [ partial1 b < ] ] ] ] [ deref [ filter c [ partial1 b < ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ reduce [ slice [ sort [ range 0 [ + a 1 ] ] ] 0 [ reduce b 0 + ] ] 0 + ]
[ head [ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial0 2 * ] ] ]
[ reduce [ map [ range 0 [ min [ len [ range 1 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] ] [ len c ] ] ] [ lambda1 [ if [ < [ deref [ range 1 [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ map [ range 0 [ + a 1 ] ] [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] * ] ]
[ reverse [ slice [ map a [ partial1 b + ] ] c d ] ]
[ digits [ strlen a ] ]
[ deref [ filter a [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] < ] ] [ / [ len [ filter a [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] < ] ] ] 2 ] ]
[ range 0 [ + a 1 ] ]
[ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] * ] ] ] ] ]
[ range 0 [ reduce [ range 0 [ + [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] ]
[ digits [ deref a [ / [ len a ] 2 ] ] ]
[ filter [ filter [ filter a [ partial1 b < ] ] [ combine ! is_prime ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ slice b 0 [ / [ len b ] 2 ] ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ map a [ partial1 b - ] ]
[ filter [ slice a b c ] [ lambda1 [ reduce [ map d [ partial0 arg1 == ] ] false || ] ] ]
[ filter [ slice a b c ] [ partial1 [ + [ * [ - f c ] [ - f c ] ] [ * [ - g d ] [ - g d ] ] ] < ] ]
[ reduce [ reverse [ digits [ + [ * [ - a [ deref c [ / [ len c ] 2 ] ] ] [ - a [ deref c [ / [ len c ] 2 ] ] ] ] [ * [ - b d ] [ - b d ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ range 0 [ min [ len [ filter a [ partial1 b < ] ] ] [ len [ slice c 0 [ / [ len c ] 2 ] ] ] ] ] [ lambda1 [ if [ > [ deref [ filter a [ partial1 b < ] ] arg1 ] [ deref [ slice c 0 [ / [ len c ] 2 ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map [ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial0 2 * ] ] [ partial0 2 * ] ]
[ map [ filter [ filter a is_prime ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 2 * ] ]
[ filter [ filter a [ combine ! is_prime ] ] [ partial1 [ reduce [ filter b [ partial0 [ reduce b 0 max ] > ] ] 0 max ] < ] ]
[ reverse [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] ]
[ reduce [ range 0 [ + [ deref [ filter a [ partial1 b > ] ] [ / [ len [ filter a [ partial1 b > ] ] ] 2 ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ slice [ sort a ] 0 [ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ]
[ filter [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] > ] ]
[ filter [ slice a [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] c ] is_prime ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ deref [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ / [ len [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] 2 ] ]
[ reverse [ digits [ reduce [ slice [ reverse [ sort a ] ] 0 b ] 0 + ] ] ]
[ - [ reduce [ slice a b [ + [ * [ - f c ] [ - f c ] ] [ * [ - g d ] [ - g d ] ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ map [ map [ filter [ range 0 [ len [ map a [ partial0 2 * ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ map a [ partial0 2 * ] ] int-deref ] ] [ partial1 b * ] ]
[ filter [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] [ partial1 b < ] ]
[ deref [ sort a ] [ / [ len a ] 2 ] ]
[ reduce [ filter [ filter [ map a [ partial1 b + ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] [ partial0 [ reduce [ filter [ map a [ partial1 b + ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] 1000000000 min ] < ] ] 1000000000 min ]
[ reduce [ reverse [ digits [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ reduce d 0 max ] ] [ - b [ reduce d 0 max ] ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ min a [ min c b ] ] ]
[ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 [ strlen c ] + ] ]
[ - [ reduce [ slice [ filter a [ partial1 b < ] ] 0 [ / [ len [ filter a [ partial1 b < ] ] ] 2 ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ reduce [ range 0 [ + [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ]
[ reduce [ map [ range 0 [ len [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] ] ] [ lambda1 [ == [ deref [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] arg1 ] [ deref [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] [ - [ - [ len [ digits [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] square ]
[ reverse [ slice a [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] c ] ]
[ map [ filter [ range 0 [ len [ map a [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] + ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ map a [ partial1 [ deref [ sort b ] [ / [ len b ] 2 ] ] + ] ] int-deref ] ]
[ deref [ sort [ map [ reverse a ] [ partial0 2 * ] ] ] [ / [ len [ map [ reverse a ] [ partial0 2 * ] ] ] 2 ] ]
[ map a [ partial1 b - ] ]
[ map [ range 0 [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] square ]
[ min [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] b ]
[ filter [ reverse [ reverse a ] ] [ partial1 b > ] ]
[ reduce [ range 0 [ + [ max a [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ len [ range 0 [ + [ - [ reduce a 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] 1 ] ] ]
[ reduce [ map [ range 0 [ min [ len [ reverse [ map a [ partial1 b - ] ] ] ] [ len c ] ] ] [ lambda1 [ if [ > [ deref [ reverse [ map a [ partial1 b - ] ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ range 1 [ + a 1 ] ] [ partial1 [ deref b [ / [ len b ] 2 ] ] > ] ]
[ reduce [ reverse [ digits [ reduce [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1000000000 min ] < ] ] 1000000000 min ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reverse [ map a [ partial1 b * ] ] ]
[ filter [ reverse a ] [ lambda1 [ reduce [ map [ slice b 0 [ / [ len b ] 2 ] ] [ partial0 arg1 == ] ] false || ] ] ]
[ reverse [ digits [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ deref [ sort [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ] [ / [ len [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 a int-deref ] ] ] 2 ] ]
[ filter a [ partial1 [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] < ] ]
[ reduce [ reverse [ digits [ deref [ sort [ range 1 a ] ] [ / [ len [ range 1 a ] ] 2 ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ reduce [ map [ range 0 [ len [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] ] ] [ lambda1 [ == [ deref [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] arg1 ] [ deref [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] [ - [ - [ len [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ reduce [ reverse [ digits [ strlen a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map [ digits a ] [ partial1 [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] + ] ]
[ head [ map [ range 0 a ] [ partial1 b + ] ] ]
[ slice [ reverse [ range 1 [ + a 1 ] ] ] [ / [ len [ reverse [ range 1 [ + a 1 ] ] ] ] 2 ] [ len [ reverse [ range 1 [ + a 1 ] ] ] ] ]
[ floor [ sqrt [ + [ * [ - [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] c ] [ - [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] c ] ] [ * [ - b [ reduce [ range 0 [ + d 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] [ - b [ reduce [ range 0 [ + d 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ] ] ] ] ]
[ / [ reduce [ slice a [ / [ len a ] 2 ] [ len a ] ] 0 + ] [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ]
[ map [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] square ]
[ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ reduce [ digits [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] ] 1000000000 min ]
[ is_sorted [ filter a [ partial1 [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] > ] ] ]
[ reduce [ range 0 [ + [ reduce [ reverse [ digits [ * a b ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ > [ deref a [ / [ len a ] 2 ] ] 0 ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ reverse [ filter c [ partial1 b < ] ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ reverse [ filter c [ partial1 b < ] ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ filter [ slice [ slice a [ / [ len a ] 2 ] [ len a ] ] 0 [ / [ len [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 2 ] ] is_prime ]
[ reduce [ range 0 [ + [ deref [ range 1 [ + a 1 ] ] [ / [ len [ range 1 [ + a 1 ] ] ] 2 ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ map [ map a [ partial1 b + ] ] [ partial1 [ reduce [ slice [ sort c ] 0 d ] 0 + ] * ] ]
[ reduce [ slice [ sort [ map a square ] ] 0 [ - [ reduce b 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ] ] 0 + ]
[ range 0 [ reduce [ range 0 [ + [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ floor [ sqrt [ + [ * [ - [ reduce [ slice [ sort a ] 0 b ] 0 + ] d ] [ - [ reduce [ slice [ sort a ] 0 b ] 0 + ] d ] ] [ * [ - c [ reduce [ reverse [ digits e ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ - c [ reduce [ reverse [ digits e ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ deref [ map [ digits a ] [ partial0 2 * ] ] [ / [ len [ map [ digits a ] [ partial0 2 * ] ] ] 2 ] ]
[ reduce [ range 0 [ + [ reduce [ reverse [ digits [ * a b ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ map [ filter [ range 0 [ len [ slice [ slice a b c ] [ / [ len [ slice a b c ] ] 2 ] [ len [ slice a b c ] ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ slice [ slice a b c ] [ / [ len [ slice a b c ] ] 2 ] [ len [ slice a b c ] ] ] int-deref ] ]
[ filter [ map [ reverse a ] square ] [ combine ! is_prime ] ]
[ <= [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] b ]
[ reduce [ filter [ map [ filter a [ partial1 b < ] ] [ partial0 2 * ] ] [ partial0 [ reduce [ map [ filter a [ partial1 b < ] ] [ partial0 2 * ] ] 0 max ] > ] ] 0 max ]
[ slice [ reverse [ filter a [ combine ! is_prime ] ] ] [ / [ len [ reverse [ filter a [ combine ! is_prime ] ] ] ] 2 ] [ len [ reverse [ filter a [ combine ! is_prime ] ] ] ] ]
[ reduce [ range 0 [ + [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ partial0 a + ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ]
[ digits [ * a [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ]
[ map [ slice [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 [ / [ len [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] 2 ] ] [ partial1 c * ] ]
[ map [ map [ filter [ range 0 [ len a ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 a int-deref ] ] [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] + ] ]
[ map a [ partial1 b - ] ]
[ min [ head a ] [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ > a [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ]
[ digits [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter b is_prime ] ] ] [ deref [ filter b is_prime ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ reverse [ map [ slice a [ / [ len a ] 2 ] [ len a ] ] [ partial1 b - ] ] ]
[ filter [ map a [ partial1 b + ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ]
[ - [ reduce [ filter a [ lambda1 [ reduce [ map [ reverse b ] [ partial0 arg1 == ] ] false || ] ] ] 1 [ lambda2 [ if [ == arg1 arg2 ] [ + arg1 1 ] arg1 ] ] ] 1 ]
[ + [ * [ - [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ] [ - [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ] ] [ * [ - c [ strlen e ] ] [ - c [ strlen e ] ] ] ]
[ reduce [ reverse [ digits [ reduce [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 [ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 1000000000 min ] < ] ] 1000000000 min ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ digits [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] a ] ]
[ map a [ partial1 b - ] ]
[ digits [ strlen a ] ]
[ reverse [ map a [ partial1 [ reduce [ slice [ reverse [ sort c ] ] 0 b ] 0 + ] + ] ] ]
[ filter [ digits [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ] is_prime ]
[ reduce [ slice [ sort a ] 0 [ head [ filter [ range 1 40 ] [ combine [ combine ! is_prime ] [ combine [ partial0 1 + ] [ partial0 b * ] ] ] ] ] ] 0 + ]
[ reduce [ map [ range 0 [ len [ map [ slice a b c ] [ partial0 2 * ] ] ] ] [ lambda1 [ == [ deref [ map [ slice a b c ] [ partial0 2 * ] ] arg1 ] [ deref [ map [ slice a b c ] [ partial0 2 * ] ] [ - [ - [ len [ map [ slice a b c ] [ partial0 2 * ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ reduce [ slice [ reverse [ sort a ] ] 0 [ reduce [ reverse b ] 0 + ] ] 0 + ]
[ head [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c + ] ] ]
[ reverse [ filter [ reverse a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ digits [ reduce [ filter [ map a [ partial0 2 * ] ] [ partial0 [ reduce [ map a [ partial0 2 * ] ] 0 max ] > ] ] 0 max ] ]
[ reduce [ map [ range 0 [ min [ len [ reverse [ range 0 a ] ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ reverse [ range 0 a ] ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ map [ filter a [ lambda1 [ reduce [ map [ map c [ partial1 b + ] ] [ partial0 arg1 == ] ] false || ] ] ] [ partial1 c + ] ]
[ map [ filter a [ partial1 b > ] ] [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len d ] ] ] [ lambda1 [ if [ > [ deref c arg1 ] [ deref d arg1 ] ] 1 0 ] ] ] 0 + ] * ] ]
[ map [ filter [ range 0 [ len [ slice [ slice a b c ] [ / [ len [ slice a b c ] ] 2 ] [ len [ slice a b c ] ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ slice [ slice a b c ] [ / [ len [ slice a b c ] ] 2 ] [ len [ slice a b c ] ] ] int-deref ] ]
[ slice [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] 0 [ / [ len [ reverse [ slice a [ / [ len a ] 2 ] [ len a ] ] ] ] 2 ] ]
[ map [ map [ filter [ range 0 [ len [ slice a 0 [ / [ len a ] 2 ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ slice a 0 [ / [ len a ] 2 ] ] int-deref ] ] [ partial0 2 * ] ]
[ slice [ reverse a ] b [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ] ]
[ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial1 [ reduce [ slice [ reverse [ sort c ] ] 0 d ] 0 + ] * ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map c [ partial1 b + ] ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map c [ partial1 b + ] ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ filter [ map a [ partial1 b - ] ] [ partial1 [ reduce [ range 0 [ + c 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ reverse [ digits arg1 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] [ reduce [ reverse [ digits arg2 ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 arg2 ] ] ] > ] ]
[ slice [ range 0 a ] b c ]
[ reduce [ reverse [ digits [ + [ * [ - a [ deref [ sort c ] [ / [ len c ] 2 ] ] ] [ - a [ deref [ sort c ] [ / [ len c ] 2 ] ] ] ] [ * [ - b d ] [ - b d ] ] ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ len [ reverse [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ > [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ]
[ deref [ sort [ range 0 [ + a 1 ] ] ] [ / [ len [ range 0 [ + a 1 ] ] ] 2 ] ]
[ floor [ sqrt [ + [ * [ - a [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] ] [ - a [ floor [ sqrt [ + [ * [ - f c ] [ - f c ] ] [ * [ - g d ] [ - g d ] ] ] ] ] ] ] [ * [ - b h ] [ - b h ] ] ] ] ]
[ filter [ reverse [ range 0 [ + a 1 ] ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ]
[ reduce [ slice [ sort [ filter [ range 0 [ + a 1 ] ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] 0 c ] 0 + ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] a ]
[ slice a b [ + d [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ]
[ reverse [ filter [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ lambda1 [ reduce [ map c [ partial0 arg1 == ] ] false || ] ] ] ]
[ map [ slice a [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] c ] square ]
[ reduce [ map [ range 0 [ min [ len [ reverse [ map a [ partial1 b + ] ] ] ] [ len c ] ] ] [ lambda1 [ if [ > [ deref [ reverse [ map a [ partial1 b + ] ] ] arg1 ] [ deref c arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ digits c ] ] ] [ deref [ digits c ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ map [ range 0 a ] [ partial1 b + ] ]
[ map [ map [ filter a [ partial1 b > ] ] [ partial0 2 * ] ] [ partial1 c * ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ filter a [ partial1 [ reduce [ slice [ sort [ reverse c ] ] 0 b ] 0 + ] < ] ]
[ map [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial1 [ reduce [ reverse [ digits c ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] + ] ]
[ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ filter c [ partial1 b < ] ] ] ] [ deref [ filter c [ partial1 b < ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ floor [ sqrt [ + [ * [ - a [ deref c [ / [ len c ] 2 ] ] ] [ - a [ deref c [ / [ len c ] 2 ] ] ] ] [ * [ - b [ reduce [ map [ range 0 [ min [ len d ] [ len e ] ] ] [ lambda1 [ if [ < [ deref d arg1 ] [ deref e arg1 ] ] 1 0 ] ] ] 0 + ] ] [ - b [ reduce [ map [ range 0 [ min [ len d ] [ len e ] ] ] [ lambda1 [ if [ < [ deref d arg1 ] [ deref e arg1 ] ] 1 0 ] ] ] 0 + ] ] ] ] ] ]
[ filter [ reverse a ] [ partial1 [ head b ] > ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 1 ] 1 [ * [ self [ - arg1 1 ] ] arg1 ] ] ] [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ strlen a ] ] ]
[ reduce [ map [ filter [ range 0 [ len [ reverse a ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ reverse a ] int-deref ] ] 0 max ]
[ floor [ sqrt [ + [ * [ - [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ] [ - [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] d ] ] [ * [ - c [ strlen e ] ] [ - c [ strlen e ] ] ] ] ] ]
[ digits [ head a ] ]
[ reverse [ reverse [ map a [ partial1 b + ] ] ] ]
[ deref [ map [ filter a [ partial1 b > ] ] [ partial1 c * ] ] [ / [ len [ map [ filter a [ partial1 b > ] ] [ partial1 c * ] ] ] 2 ] ]
[ reduce [ slice [ range 1 a ] [ / [ len [ range 1 a ] ] 2 ] [ len [ range 1 a ] ] ] 0 max ]
[ reduce [ slice [ sort [ map a [ partial1 [ reduce [ filter b [ partial0 [ reduce b 1000000000 min ] < ] ] 1000000000 min ] * ] ] ] 0 c ] 0 + ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ map [ filter [ range 0 [ len [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] [ partial0 [ map [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 2 * ] ] int-deref ] ]
[ + [ * [ - [ reduce a 0 max ] d ] [ - [ reduce a 0 max ] d ] ] [ * [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] [ - [ reduce c 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] e ] ] ]
[ min [ reduce [ range 0 [ + a 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] b ]
[ map [ map [ map a square ] square ] [ partial0 2 * ] ]
[ reduce [ map [ str_split [ reduce a "" str_concat ] " " ] [ partial0 0 str_index ] ] "" str_concat ]
[ is_sorted [ filter [ range 0 a ] [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ]
[ head [ map a [ partial1 [ strlen b ] * ] ] ]
[ head [ filter a [ lambda1 [ reduce [ map [ range 1 b ] [ partial0 arg1 == ] ] false || ] ] ] ]
[ reduce [ map [ range 0 [ min [ len a ] [ len [ map [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] square ] ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref [ map [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] square ] arg1 ] ] 1 0 ] ] ] 0 + ]
[ reduce [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ reverse c ] ] ] [ deref [ reverse c ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ strlen [ reduce [ map [ str_split a " " ] [ partial0 0 str_index ] ] "" str_concat ] ] ]
[ reduce [ range 0 [ + [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b [ reduce d 0 max ] ] [ - b [ reduce d 0 max ] ] ] ] ] ] ] 1 ] ] 0 [ lambda2 [ if [ ! [ is_prime arg2 ] ] arg1 arg2 ] ] ]
[ slice [ map [ filter [ range 0 [ len [ reverse a ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ reverse a ] int-deref ] ] b c ]
[ map a [ partial1 [ reduce [ map [ range 0 [ min [ len d ] [ len b ] ] ] [ lambda1 [ if [ > [ deref d arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] + ] ]
[ reduce [ slice [ sort [ slice [ filter a [ partial1 b < ] ] 0 [ / [ len [ filter a [ partial1 b < ] ] ] 2 ] ] ] 0 c ] 0 + ]
[ slice [ map a [ partial1 b - ] ] 0 [ / [ len [ map a [ partial1 b - ] ] ] 2 ] ]
[ map [ map a [ partial1 b * ] ] [ partial1 c * ] ]
[ map [ reverse [ filter a [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] ] square ]
[ slice [ reverse [ range 1 a ] ] [ / [ len [ reverse [ range 1 a ] ] ] 2 ] [ len [ reverse [ range 1 a ] ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ combine [ partial0 1 + ] [ partial0 [ strlen a ] * ] ] ] ] ]
[ range 0 [ + a 1 ] ]
[ digits [ reduce [ reverse [ digits [ head a ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ reduce [ range 1 [ + [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] a ] 1 ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ min a [ * c b ] ]
[ map [ filter a [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial1 [ head b ] + ] ]
[ reverse [ map [ filter [ range 0 [ len [ filter a [ partial1 b < ] ] ] ] [ lambda1 [ == [ % arg1 2 ] 1 ] ] ] [ partial0 [ filter a [ partial1 b < ] ] int-deref ] ] ]
[ range 0 [ + [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] 1 ] ]
[ head [ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial0 2 * ] ] ]
[ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ reduce [ reverse a ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] ]
[ reduce [ map [ range 0 [ len [ range 1 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] ] [ lambda1 [ == [ deref [ range 1 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] arg1 ] [ deref [ range 1 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] [ - [ - [ len [ range 1 [ reduce [ reverse [ digits a ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ] ] arg1 ] 1 ] ] ] ] ] true && ]
[ head [ map a [ partial1 [ * c b ] - ] ] ]
[ digits [ + [ reduce a 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len b ] ] [ deref b arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ] c ] ]
[ slice a [ reduce [ range 0 [ + b 1 ] ] 0 [ lambda2 [ if [ > [ reduce [ digits arg1 ] 0 + ] [ reduce [ digits arg2 ] 0 + ] ] arg1 arg2 ] ] ] [ reduce [ filter c [ partial0 [ reduce c 1000000000 min ] < ] ] 1000000000 min ] ]
[ map [ map [ slice a 0 [ / [ len a ] 2 ] ] [ partial0 2 * ] ] [ partial0 2 * ] ]
[ reduce [ filter a [ lambda1 [ == [ % arg1 2 ] 0 ] ] ] 0 [ lambda2 [ if [ == arg2 [ if [ < arg1 [ len [ map b [ partial0 2 * ] ] ] ] [ deref [ map b [ partial0 2 * ] ] arg1 ] 0 ] ] [ + arg1 1 ] arg1 ] ] ]
[ map [ slice [ digits a ] [ / [ len [ digits a ] ] 2 ] [ len [ digits a ] ] ] [ partial0 2 * ] ]
[ / [ reduce [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] 0 + ] [ len [ digits [ reduce [ map [ range 0 [ min [ len a ] [ len b ] ] ] [ lambda1 [ if [ < [ deref a arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ] ]
[ filter a [ partial1 [ * c [ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] b ] ] > ] ]
[ reverse [ map a [ partial1 b + ] ] ]
[ head [ filter [ range 1 40 ] [ combine is_prime [ partial0 [ reduce [ filter a [ partial0 [ reduce a 0 max ] > ] ] 0 max ] + ] ] ] ]
[ filter a [ partial1 [ reduce [ map [ range 0 [ min [ len c ] [ len b ] ] ] [ lambda1 [ if [ < [ deref c arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] > ] ] 0 max ]
[ map [ filter a [ lambda1 [ reduce [ map [ filter c [ lambda1 [ reduce [ map b [ partial0 arg1 == ] ] false || ] ] ] [ partial0 arg1 == ] ] false || ] ] ] [ partial1 d * ] ]
[ invoke1 [ lambda1 [ if [ == [ len [ digits arg1 ] ] 1 ] 0 [ + 1 [ self [ reduce [ digits arg1 ] 0 + ] ] ] ] ] [ invoke1 [ lambda1 [ if [ <= arg1 2 ] 1 [ + [ self [ - arg1 1 ] ] [ self [ - arg1 2 ] ] ] ] ] [ floor [ sqrt [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] ] ] ] ]
[ reduce [ reverse [ digits [ reduce [ map [ range 0 [ min [ len [ range 0 a ] ] [ len b ] ] ] [ lambda1 [ if [ > [ deref [ range 0 a ] arg1 ] [ deref b arg1 ] ] 1 0 ] ] ] 0 + ] ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ]
[ map [ map [ map a [ partial1 b - ] ] [ partial1 c * ] ] [ partial0 2 * ] ]
[ * [ + [ * [ - a c ] [ - a c ] ] [ * [ - b d ] [ - b d ] ] ] [ reduce [ reverse [ digits f ] ] 0 [ lambda2 [ + [ * arg1 10 ] arg2 ] ] ] ]
[ deref [ map a [ partial0 2 * ] ] [ / [ len [ map a [ partial0 2 * ] ] ] 2 ] ]
